<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>计算机体系结构 - 分类 - Wen Gao 的小站</title><link>https://salvely.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link><description>计算机体系结构 - 分类 - Wen Gao 的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>iamgwen9@gmail.com (Salvely)</managingEditor><webMaster>iamgwen9@gmail.com (Salvely)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 01 May 2024 09:36:04 +0800</lastBuildDate><atom:link href="https://salvely.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/" rel="self" type="application/rss+xml"/><item><title>&lt;Digital Design and Computer Architecture> MIPS 版本 阅读笔记</title><link>https://salvely.github.io/ddca%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 01 May 2024 09:36:04 +0800</pubDate><author><name>Wen Gao</name><uri>https://github.com/Salvely</uri><email>iamgwen9@gmail.com</email></author><guid>https://salvely.github.io/ddca%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid><description><![CDATA[<blockquote>
  <p>以下是 《Digital Design and Computer Architecture》 第 1-8 章的阅读笔记，目录采用原书结构，笔记内容为自己整理（3.5节 时序逻辑电路的时序特性分析跳过）。数字电路部分还可以参考这本教材：<a href="https://www.auhd.edu.ye/upfiles/elibrary/Azal2020-01-22-12-23-12-14318.pdf" target="_blank" rel="noopener noreferrer">Fundamentals of Digital Logic with Verilog Design, THIRD EDITION (auhd.edu.ye)</a></p>
</blockquote><h2 id="chapter-1从-0-到-1" class="headerLink">
    <a href="#chapter-1%e4%bb%8e-0-%e5%88%b0-1" class="header-mark"></a>1 Chapter 1：从 0 到 1</h2><h3 id="11-大纲" class="headerLink">
    <a href="#11-%e5%a4%a7%e7%ba%b2" class="header-mark"></a>1.1 1.1 大纲</h3><blockquote>
  <p>这一章主要为导引内容，比较简单，因此阅读笔记中仅介绍大纲和课后作业。</p>
</blockquote><ul>
<li>Abstraction</li>
<li>Dicipline</li>
<li>3Y&rsquo;s Deisng Dicipline
<ul>
<li>Hierarchy</li>
<li>Modularity</li>
<li>Regularity</li>
</ul>
</li>
<li>Digital Abstraction：From Analog to Digital System</li>
<li>Number System
<ul>
<li>Decimal Numbers</li>
<li>Binary Numbers</li>
<li>Hexdecimal Numbers</li>
<li>Bytes, Nibbles and All that Jazz</li>
<li>8 bits -&gt; bytes</li>
<li>4 bits -&gt; nibble</li>
<li>Data in chunks -&gt; words -&gt; depend on the architecture of the microprocessor</li>
<li>Memory size -&gt; bytes</li>
<li>Communication speed -&gt; bits/sec</li>
<li>Arithmetic</li>
<li>Unsigned numbers
<ul>
<li>Binary Addition
<ul>
<li>溢出判断：使用全加器时，最高位是否为 1</li>
</ul>
</li>
</ul>
</li>
<li>Signed Numbers
<ul>
<li>Sign-magnitude representation</li>
<li>2&rsquo;s complement representation
<ul>
<li>溢出判断：如果两数的符号位相同，最高位是否和他们不同</li>
</ul>
</li>
</ul>
</li>
<li>Comparison of Number System</li>
<li>Unsigned</li>
<li>Sign-Magnitude</li>
<li>2&rsquo;s Complement</li>
</ul>
</li>
<li>Logic Gates
<ul>
<li>Or</li>
<li>And</li>
<li>Not</li>
<li>Buffer</li>
<li>Nand</li>
<li>Xor</li>
</ul>
</li>
<li>Beneath the Digital Abstraction</li>
<li>CMOS Transistors*</li>
<li>Power Consumption*</li>
</ul>
<h2 id="chapter-2组合逻辑设计" class="headerLink">
    <a href="#chapter-2%e7%bb%84%e5%90%88%e9%80%bb%e8%be%91%e8%ae%be%e8%ae%a1" class="header-mark"></a>2 Chapter 2：组合逻辑设计</h2><blockquote>
  <p>这一章前面的布尔运算、公理和对偶式、卡诺图的使用、以及布尔代数到电路图的转换较为简单，因此不作详细说明，摆出重点公式和算法。</p>
</blockquote><h3 id="21-introduction" class="headerLink">
    <a href="#21-introduction" class="header-mark"></a>2.1 2.1 Introduction</h3><p>组合逻辑电路主要有 4 个组成部分：</p>
<ul>
<li>一个或多个输入</li>
<li>一个或多个输出</li>
<li>组合逻辑函数</li>
<li>表示组合逻辑延迟的时序</li>
</ul>
<h3 id="22-boolean-equations" class="headerLink">
    <a href="#22-boolean-equations" class="header-mark"></a>2.2 2.2 Boolean Equations</h3><h4 id="最小项" class="headerLink">
    <a href="#%e6%9c%80%e5%b0%8f%e9%a1%b9" class="header-mark"></a>2.2.1 最小项</h4><p>每个布尔变量，以原变量或者其反变量的形式，在各个<code>&amp;</code>式中出现一次。真值表中输出为 1 的行，可以表示为所有这种<code>&amp;</code>式的或。譬如有布尔变量<code>A</code>和<code>B</code>，其输出公式为$F(A,B)=\bar{A}B+AB$将每个<code>&amp;</code>式表达为一个十进制的值（如 AB 对应<code>0b11</code>，其十进制的值为 3，该项就可以表示为<code>m3</code>），对他们进行<code>|</code>运算，这种表示就是最小项。其最小项公式可以表述为：</p>
<p>$F(A,B)=\Sigma(m1,m3)$</p>
<h4 id="最大项" class="headerLink">
    <a href="#%e6%9c%80%e5%a4%a7%e9%a1%b9" class="header-mark"></a>2.2.2 最大项</h4><p>找到真值表中所有输出为 0 的行，将其中为 1 的布尔变量取反，和值为 0 的布尔变量相或。将每个这样的行的值相与，得到的就是最大项。</p>
<h4 id="最大项和最小项的关系" class="headerLink">
    <a href="#%e6%9c%80%e5%a4%a7%e9%a1%b9%e5%92%8c%e6%9c%80%e5%b0%8f%e9%a1%b9%e7%9a%84%e5%85%b3%e7%b3%bb" class="header-mark"></a>2.2.3 最大项和最小项的关系</h4><ul>
<li>最小项中的每一项结果都为 1，只要这些项有 1 个为 1，结果就为 1</li>
<li>最大项中每一项的结果都为 0，只要有一个项为 0，结果就为 0</li>
<li>最大项可以由最小项进行取反得到</li>
</ul>
<h3 id="23-boolean-algebra" class="headerLink">
    <a href="#23-boolean-algebra" class="header-mark"></a>2.3 2.3 Boolean Algebra</h3><ul>
<li>公理及其对偶式</li>
<li>单变量定理</li>
<li>多变量定理</li>
<li>真值表</li>
<li>简化真值表</li>
</ul>
<h3 id="24-from-logic-to-gates" class="headerLink">
    <a href="#24-from-logic-to-gates" class="header-mark"></a>2.4 2.4 From Logic to Gates</h3><ul>
<li>单输出的 Gates：单个逻辑表达式</li>
<li>多输出的 Gates：多个逻辑表达式</li>
</ul>
<h3 id="25-multilevel-combinational-logic" class="headerLink">
    <a href="#25-multilevel-combinational-logic" class="header-mark"></a>2.5 2.5 Multilevel Combinational Logic</h3><ul>
<li>硬件简化</li>
<li>Bubble Pushing</li>
</ul>
<h3 id="26-xs-and-zs-oh-my" class="headerLink">
    <a href="#26-xs-and-zs-oh-my" class="header-mark"></a>2.6 2.6 X&rsquo;s and Z&rsquo;s, Oh My</h3><p>X：</p>
<ul>
<li>不合法的值，如输出同时出现 1 和 0，导致冲突</li>
<li>电路尚未初始化的值</li>
<li>卡诺图中的无关项（注意区分和电路中的区别）
Z：</li>
<li>高阻态，非 0 也非 1</li>
<li>多见于三态门</li>
</ul>
<h3 id="27-karnaugh-maps" class="headerLink">
    <a href="#27-karnaugh-maps" class="header-mark"></a>2.7 2.7 Karnaugh Maps</h3><ul>
<li>一次在卡诺图中圈出一个大小为 1，2，4，8（或其他 2 的倍数）的块</li>
<li>每个圈都代表一个逻辑表达式</li>
<li>卡诺图的上下，左右的边缘相连</li>
<li>所有逻辑表达式的和就是，电路最后的简化逻辑表达式</li>
</ul>
<h3 id="28-combinational-building-blocks" class="headerLink">
    <a href="#28-combinational-building-blocks" class="header-mark"></a>2.8 2.8 Combinational Building Blocks</h3><ul>
<li>选择器</li>
<li>译码器</li>
</ul>
<h3 id="29-timing" class="headerLink">
    <a href="#29-timing" class="header-mark"></a>2.9 2.9 Timing</h3><h4 id="propagation" class="headerLink">
    <a href="#propagation" class="header-mark"></a>2.9.1 Propagation</h4><ul>
<li>传播延迟：从输入改变 -&gt; 输出值完全稳定下来，中间所需要的时间，一个模块从输入到输出的传播延迟取决于最长的那条路径（关键路径）</li>
<li>最小延迟：从输入改变 -&gt; 输出开始改变，中间所需要的时间</li>
</ul>
<h4 id="glitches" class="headerLink">
    <a href="#glitches" class="header-mark"></a>2.9.2 Glitches</h4><ul>
<li>竞争冒险：多见于关键路径和最短路径输出的值不一样，而其值到达输出的时刻不一样，导致输出电路的值出现波动。</li>
<li>竞争冒险的消除可以通过向电路中增加卡诺图中的冗余项实现。冗余项来源于卡诺图中两个圈相切的部分，将相切的部分的两个圈化为一个圈，将其添加到电路中，即可消除竞争冒险。</li>
</ul>
<h2 id="chapter-3时序逻辑设计" class="headerLink">
    <a href="#chapter-3%e6%97%b6%e5%ba%8f%e9%80%bb%e8%be%91%e8%ae%be%e8%ae%a1" class="header-mark"></a>3 Chapter 3：时序逻辑设计</h2><blockquote>
  <p>这一章的时序逻辑分析和设计较为重要，学习过程中可以参考这个油管系列视频：
<a href="https://www.youtube.com/playlist?list=PLwjK_iyK4LLCCpnnybEztvRqxpMyfgarS" target="_blank" rel="noopener noreferrer">Sequential Circuits - YouTube</a></p>
<p>学习完成之后可以：</p>
<ol>
<li>完成华科的数字逻辑设计头歌平台所有作业</li>
<li>HDLBits Verilog语言学习</li>
<li>Vivado/Quartus Verilog编程环境配置</li>
<li>其他学校的数字电路实验课完成</li>
</ol>
</blockquote><h3 id="31-introduction" class="headerLink">
    <a href="#31-introduction" class="header-mark"></a>3.1 3.1 Introduction</h3><ul>
<li>组合逻辑电路的输出只和输入有关</li>
<li>时序逻辑电路的输出不只和输入有关，还和之前的状态相关</li>
<li>本章我们会
<ul>
<li>介绍时序逻辑电路的组成</li>
</ul>
</li>
</ul>]]></description></item></channel></rss>