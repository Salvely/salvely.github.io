[{"categories":null,"content":"今天写下这篇文章，是因为我过去多年一直饱受身体疾病和体质虚弱的困扰，实在是绷不住了。 在过去的多年里，每个月我必然要经历： 5天例假，整个人虚的一批，只能在床上挺尸； 隔三岔五的荨麻疹，浑身瘙痒难耐，还会因为出汗身上黏糊糊，又不能一直洗澡，浑身起红色划痕一样的疹子； 吹点风就感冒发烧了，出点汗吹点空调又感冒了； 健身两天就膝盖不舒服了，还得吃氨糖； 因为荨麻疹伴随的玫瑰痤疮，不能用护肤品和化妆品，脸上时不时泛红瘙痒； 浑身汗腺发达， 手汗脚汗不断。腋下甚至有时候会有味道，每天要用硫磺皂洗。稍微健个身身上就会有味道。每年换季的时候，两只手还会有很多的汗疱疹，连在一起，又痒又恶心，还不能根治； 脚气和脚藓，这个是伴随着脚汗出来的，跟随我爸遗传的，天天都要用上海药皂洗脚。最近发现超市居然不卖上海药皂和硫磺皂了，妈的； 晕车晕3d，一次只能扛过生化危机8的一章，每次到存档点的时候都脑袋发晕、恶心想吐、浑身出汗、面色苍白，扛过去是因为没有存档点，要是存档点再靠后点我就要扛不住了； 不能接受任何不舒适条件下的活动（比如3月份的炎热户外会让我中暑，有烟味的动车车厢会让我想吐）； 等等等等； 所导致的结果就是： 经常需要睡觉休息，不能进行任何高强度的学习工作活动，否则就会生病，虚弱，扛不住； 身体疾病导致心理韧性差，抗压能力弱，经常想要哭哭，想要别人的安慰和抱抱； 生命力弱，经常出现3分钟热度的情况，因为我的身体能量只够我燃烧那么久，再久点就扛不住了； 看着别人一个个生龙活虎，活力四射，朝着他们的目标和挑战前进，就觉得特别羡慕。但是自己模仿着行动一段时间，身体就报警了，要我去睡觉，无奈最后只能到床上去挺尸； 我不要再这样啦！我也要当健康人！我也要成为活力四射的小朋友！我要健身！健身！ 可是我有时候健身的时候，感觉自己快要扛不住了，感觉浑身出汗，脑袋乏累，眼皮变重，有时候甚至能在健身之后，从镜子里看到自己的单眼皮变成了双眼皮。健身结束以后，就特别想睡觉，一次又是几个小时，也没有做其他事情的动力了。很苦恼哇。 我怎么这么脆弱，呜呜呜，哇哇哇。 ","date":"2025-08-07","objectID":"/%E8%BA%AB%E4%BD%93%E6%98%AF%E9%9D%A9%E5%91%BD%E7%9A%84%E6%9C%AC%E9%92%B1/:0:0","series":["随记"],"tags":null,"title":"身体是革命的本钱！","uri":"/%E8%BA%AB%E4%BD%93%E6%98%AF%E9%9D%A9%E5%91%BD%E7%9A%84%E6%9C%AC%E9%92%B1/#"},{"categories":null,"content":" Tip chloneda/vim-cheatsheet: 🍁Vim cheat sheet with everything you want to know. 这个表更全面。此外，如果你的终端是gb2312编码，vimtutor会是中文版本，详情见此如何获取VIM自带的vimtutor中文版 – 小顾de杂记。如果你想要获得vimtutor的中文版本，可以输入vimtutor zh_cn；英文版是vimtutor en。 打开vim：vim \u003cfile\u003e 不保存强制退出vim：:q! 保存：:w，:w \u003cfile\u003e 保存到文件file中 w是下一个单词开头，e是下一个文字结尾，$是行末，0是行开头 删除：dw de d$ dd，要指明删除到哪里：d2w d2e，命令模式：operation num motion 撤回：u 撤回一个操作 ，U 撤回一行 ，CTRL+R redo 单个替换：r，多个替换：R c是change，c后可接c/e/$ dd 删除一行 p 粘贴刚才删除的那行 CTRL+G 获得当前光标位置（文件，行号，列号等），G 跳到末尾 gg 跳到开头 行号+G 跳到该行 / 搜索并向后查找，?搜索并向前查找， n 向后找 N 向前找 CTRL+O 上一个查找到的 CTRL+I 下一个查找到的 wrpscan模式 当查找到最后一个以后，下一次查找就找到第一个 % 匹配括号 ( [ { } ] ) :s/old/new 搜索到该行第一个old并替换为new :s/old/new/g 搜索到该行所有的old并替换为new :%s/old/new 在整个文件搜索到第一个old并替换为new :%s/old/new/g 在整个文件搜索到所有的old并替换为new gc 逐个询问你是否替换 :#,#s 从某行到某行之间替换 :! \u003c外部命令\u003e 执行外部命令（如ls dir cat等等） y复制 p 粘贴 v 视觉模式 v后再输入:可以输入普通模式下的命令（如!cat \u003cfile\u003e） :r 读内容，并复制到光标处，比如:r !ls就是把ls命令的结果输出到光标处； o在该行下面插入一行 O在该行上面插入一行 a在该字符后面插入字符 A在该行末尾插入字符 :set 设置模式 hls hlsearch 高亮搜索 nohls nohlsearch 非高亮搜索 ic ignorecase忽略大小写 noic noignorecase不忽略大小写 如果仅仅想要在一次搜索中忽略大小写，可以使用/c，如/[text]\\c is incsearch 查找输入时动态增量显示查找结果 nois noicsearch 不动态增量显示 nocp 不兼容vi 按F1或输入:help [命令]调出命令帮助，直接输入:help调出vim帮助，如:help vimrc-intro vim配置文件：~/.vimrc :e，在进入vim后， 在不离开vim的情况下打开其他文件 CTRL+D 列出所有候选命令，Tab 补全当前命令 ","date":"2025-07-10","objectID":"/vimtutor-%E6%80%BB%E7%BB%93/:0:0","series":null,"tags":["vim"],"title":"vimtutor 总结","uri":"/vimtutor-%E6%80%BB%E7%BB%93/#"},{"categories":["Linux"],"content":" Warning 这个帖子并不是什么安装教程，只是纯纯的过程记录。因此其中不乏一些碎碎念和踩坑过程。安装过程参考：在 WSL 上安装 Arch Linux - Arch Linux 中文维基 ","date":"2025-05-21","objectID":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/:0:0","series":["Arch 探索"],"tags":["Arch","安装","配置","WSL2"],"title":"WSL2上的Arch Linux安装过程记录","uri":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/#"},{"categories":["Linux"],"content":" 1 前言很早之前我就听说Arch Linux是个很有趣的Linux发行版了，自定义程度很高，但是之前由于对Linux本身并不那么熟悉，因此并没有使用的想法。在学习Linux期间，我使用的是Ubuntu，挺方便的，通过apt-get安装一些工具，稍微配置一下就可以用。我利用Ubuntu学习了很多的基础Linux命令，还在Ubuntu环境下刷过几门课，算是对Linux环境有个基本的熟悉了。因此现在打算尝试一下Arch Linux，也来折腾折腾。 我以前没有使用过WSL2，都是用的VMWare虚拟机，但是感觉VMWare的屏幕很小，用起来不顺手。我每次写代码的时候，都是用的Windows宿主机上的VSCode，通过SSH远程连接到虚拟机。最早我以为SSH是个VSCode中内置的虚拟机开关，可以在VSCode后台直接开Ubuntu虚拟机，还问群友为什么半天连接不上，闹了笑话（话说我很想实现一个VSCode中内置的虚拟机，这样就不用使用VMWare这样笨重的软件了，我要把这条加到我的待办清单中去）。这次我决定使用WSL2，说实话WSL2跟Arch Linux一样，对我来说都是新事物，需要自己去踩坑折腾的，不过我也不害怕，来就来嘛。我的安装过程主要根据官方文档：在 WSL 上安装 Arch Linux - Arch Linux 中文维基，中间穿插一些踩坑之类的内容。 ","date":"2025-05-21","objectID":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/:1:0","series":["Arch 探索"],"tags":["Arch","安装","配置","WSL2"],"title":"WSL2上的Arch Linux安装过程记录","uri":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/#前言"},{"categories":["Linux"],"content":" 2 安装","date":"2025-05-21","objectID":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/:2:0","series":["Arch 探索"],"tags":["Arch","安装","配置","WSL2"],"title":"WSL2上的Arch Linux安装过程记录","uri":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/#安装"},{"categories":["Linux"],"content":" 2.1 启用虚拟化手册的第一步是在 UEFI 设置中启用虚拟化（说实话我不太清楚UEFI是什么，这里要记录一下，后面学习硬件和操作系统的时候得学） 通过在Google中搜索：how to check if I have enabled the virtualization in UEFI - Google 搜索，我得到的答案是：要检查UEFI是否启动了虚拟化，我们需要在Windows控制台中输入msinfo32命令查看系统信息，然后在系统摘要一栏，看Hyper-V-固件中启用的虚拟化一栏是否为是。我这里显示已经启用了虚拟化，进入下一步。如果没有的话，参考这篇文档：Enable Virtualization on Windows - Microsoft Support。 此外，根据这篇文档Windows 10 支持将于 2025 年 10 月 14 日结束，但是看了网上对Win 11多半差评，还是不升级了。 ","date":"2025-05-21","objectID":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/:2:1","series":["Arch 探索"],"tags":["Arch","安装","配置","WSL2"],"title":"WSL2上的Arch Linux安装过程记录","uri":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/#启用虚拟化"},{"categories":["Linux"],"content":" 2.2 Arch Linux安装首先介绍一下WSL，根据这篇文档：适用于 Linux 的 Windows 子系统文档 | Microsoft Learn（文档非常好，可以深入学习一下WSL） 适用于 Linux 的 Windows 子系统 (WSL) 可让开发人员直接在 Windows 上按原样运行 GNU/Linux 环境（包括大多数命令行工具、实用工具和应用程序），且不会产生传统虚拟机或双启动设置开销。 这次我们的目的是安装Arch Linux，所以先不了解那么多。对于安装命令，文档中是这样写的： 在管理员模式下打开 PowerShell 或 Windows 命令提示符，方法是右键单击并选择\"以管理员身份运行\"，输入 wsl --install 命令，然后重启计算机。 需要注意的是，wsl --install命令安装的是默认Ubuntu发行版，要想安装其他发行版，我们需要输入wsl --install \u003cDistribution Name\u003e。通过wsl --list --online，我们看一下都有哪些发行版： powershell PS C:\\Windows\\system32\u003e wsl --list --online 以下是可安装的有效分发的列表。 使用 'wsl.exe --install \u003cDistro\u003e' 安装。 NAME FRIENDLY NAME AlmaLinux-8 AlmaLinux OS 8 AlmaLinux-9 AlmaLinux OS 9 AlmaLinux-Kitten-10 AlmaLinux OS Kitten 10 Debian Debian GNU/Linux FedoraLinux-42 Fedora Linux 42 SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5 SUSE-Linux-Enterprise-15-SP6 SUSE Linux Enterprise 15 SP6 Ubuntu Ubuntu Ubuntu-24.04 Ubuntu 24.04 LTS archlinux Arch Linux kali-linux Kali Linux Rolling openSUSE-Tumbleweed openSUSE Tumbleweed openSUSE-Leap-15.6 openSUSE Leap 15.6 Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS Ubuntu-22.04 Ubuntu 22.04 LTS OracleLinux_7_9 Oracle Linux 7.9 OracleLinux_8_7 Oracle Linux 8.7 OracleLinux_9_1 Oracle Linux 9.1 这里我们想要安装的是archlinux，安装到D盘去。使用如下命令（管理员权限执行）： powershell wsl --install -d archlinux --name _自定义名称_ --location _自定义路径_ 譬如： powershell PS C:\\Windows\\system32\u003e wsl --install -d archlinux --location D:\\Program_Files\\VM\\Arch 正在下载: Arch Linux 正在安装: Arch Linux 已成功安装分发。它可通过 “wsl.exe -d archlinux” 启动 安装过程中还会弹出来一个欢迎界面： 安装完成后，输入wsl -d archlinux运行archlinux，powershell中的运行效果如下： powershell PS C:\\Windows\\system32\u003e wsl -d archlinux Welcome to the Arch Linux WSL image! This image is maintained at \u003chttps://gitlab.archlinux.org/archlinux/archlinux-wsl\u003e. Please, report bugs at \u003chttps://gitlab.archlinux.org/archlinux/archlinux-wsl/-/issues\u003e. Note that WSL 1 is not supported. For more information about this WSL image and its usage (including \"tips and tricks\" and troubleshooting steps), see the related Arch Wiki page at \u003chttps://wiki.archlinux.org/title/Install_Arch_Linux_on_WSL\u003e. While images are built regularly, it is strongly recommended running \"pacman -Syu\" right after the first launch due to the rolling release nature of Arch Linux. Generating pacman keys... ==\u003e Generating pacman master key. This may take some time. ==\u003e Updating trust database... Done [root@DESKTOP-ROOSFVQ system32]# 成功！ ","date":"2025-05-21","objectID":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/:2:2","series":["Arch 探索"],"tags":["Arch","安装","配置","WSL2"],"title":"WSL2上的Arch Linux安装过程记录","uri":"/wsl2%E4%B8%8A%E7%9A%84arch-linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/#arch-linux安装"},{"categories":["理论计算机"],"content":" 1 图灵机设计对二进制加法过程进行分析，我们可以得出如下过程： 使用小端法在纸带上存储输入的二进制串，即低位放在最左边 第一格是blank，也就是空，最后我们会回退到这个状态，来进入halt状态 最初是start状态，经过blank后改为carry状态 carry状态下，如果最低为是 0，那么直接将其加 1，然后返回（向左行走）即可，进入back状态 carry状态下，如果最低为是 1，将其改为 0，保持carry状态向右行走，继续对高位进行修改 如果在carry状态下遇到blank，也就是最高位还有进位，那么将blank改为 1 在回退状态下，一般来说只会遇到0，保留 0 不动，继续回退 达到halt之后停止操作，打印字符串 那么，在该图灵机中，我们需要使用到如下几个状态： start，即开始状态 carry，进位状态 back，回退状态 halt，停止状态 有如下几种符号： blank，表示空 0，即二进制符号 0 1，即二进制符号 1 根据设计，图灵机定义二进制加法的计算过程如下： start, blank-\u003eblank, RIGHT, carry carry, 1 -\u003e 0, RIGHT, carry carry, blank-\u003e1, LEFT, back carry, 0-\u003e1, LEFT, back back, 0-\u003e0, LEFT, back back, blank-\u003eblank, halt ","date":"2025-01-12","objectID":"/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%9B%BE%E7%81%B5%E6%9C%BA%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/:1:0","series":null,"tags":["图灵机","计算理论"],"title":"二进制加法图灵机的C语言实现","uri":"/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%9B%BE%E7%81%B5%E6%9C%BA%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/#图灵机设计"},{"categories":["理论计算机"],"content":" 2 C 语言代码实现 c // Turing machines for computations. #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003cstring.h\u003e #define N 4 // the number of states #define M 3 // the number of symbols #define TAPE_SIZE 20 // the size of the tape enum direction { LEFT, RIGHT, STAY }; /** * @brief encoding for binary addtion * 1. 4 states start:0 carry:1 back:2 halt:3 * 2. 3 symbols 0-\u003e0 1-\u003e1 blank-\u003e2 */ enum STATE { START, CARRY, BACK, HALT }; enum SYMBOL { SYMBOL_0, SYMBOL_1, BLANK }; int state_arr [N]; // state_arr[0] as start state, state_arr[N-2] as accept state, state_arr[N-1] as reject state int symbol_arr[M]; // symbol_arr[0] as empty symbol int tape[TAPE_SIZE]; typedef struct head { int location; // the location of the head int state_num; // the state of the head } head_t; typedef struct action { int head_state; int current_symbol; int next_symbol; enum direction dir; int next_state; } action_t; /** * @brief turing machine for binary addition * 1. start, blank-\u003eblank, RIGHT, carry * 2. carry, 1 -\u003e 0, RIGHT, carry * 3. carry, blank-\u003e1, LEFT, back * 4. carry, 0-\u003e1, LEFT, back * 5. back, 0-\u003e0, LEFT, back * 6. back, blank-\u003eblank, halt */ action_t turing_machine(action_t act) { if (act.head_state == state_arr[START] \u0026\u0026 act.current_symbol == symbol_arr[BLANK]) { act.next_symbol = act.current_symbol; act.dir = RIGHT; act.next_state = state_arr[CARRY]; } else if (act.head_state == state_arr[CARRY] \u0026\u0026 act.current_symbol == symbol_arr[SYMBOL_1]) { act.next_symbol = symbol_arr[SYMBOL_0]; act.dir = RIGHT; act.next_state = act.head_state; } else if (act.head_state == state_arr[CARRY] \u0026\u0026 act.current_symbol == symbol_arr[BLANK]) { act.next_symbol = symbol_arr[SYMBOL_1]; act.dir = LEFT; act.next_state = state_arr[BACK]; } else if (act.head_state == state_arr[CARRY] \u0026\u0026 act.current_symbol == symbol_arr[SYMBOL_0]) { act.next_symbol = symbol_arr[SYMBOL_1]; act.dir = LEFT; act.next_state = state_arr[BACK]; } else if (act.head_state == state_arr[BACK] \u0026\u0026 act.current_symbol == symbol_arr[SYMBOL_0]) { act.next_symbol = act.current_symbol; act.dir = LEFT; act.next_state = state_arr[BACK]; } else if (act.head_state == state_arr[BACK] \u0026\u0026 act.current_symbol == symbol_arr[BLANK]) { act.next_symbol = act.current_symbol; act.dir = STAY; act.next_state = state_arr[HALT]; } return act; } void state_transition(char* s, int length) { // initiliaze the state array and symbol array for (int i = 0; i \u003c N; i++) { state_arr[i] = i; } for (int i = 0; i \u003c M; i++) { symbol_arr[i] = i; } // initialize the tape for (int i = 0; i \u003c TAPE_SIZE; i++) { tape[i] = BLANK; // initialize all tape as blank } for (int i = 0; i \u003c length; i++) { tape[i + 1] = s[i] - '0'; } // initialize the head head_t h; h.location = 0; h.state_num = state_arr[START]; // initialie the action action_t a; a.dir = STAY; // define the state transition while (h.state_num != 3) { a.head_state = h.state_num; a.current_symbol = tape[h.location]; a = turing_machine(a); tape[h.location] = a.next_symbol; // update the head if (a.dir == RIGHT) { h.location += 1; } else if (a.dir == LEFT) { h.location -= 1; } h.state_num = a.next_state; } // print the added string for (int i = length; i \u003e= 1; i--) { printf(\"%d\", tape[i]); } } int main(void) { printf(\"Input the binary string: \"); char* s = (char*)malloc(10 * sizeof(char)); scanf(\"%s\", s); // reverse the string, and enter it into turing machine int length = strlen(s); for (int i = 0; i \u003c length / 2; i++) { char temp = s[length - 1 - i]; s[length - 1 - i] = s[i]; s[i] = temp; } state_transition(s, strlen(s)); return 0; } ","date":"2025-01-12","objectID":"/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%9B%BE%E7%81%B5%E6%9C%BA%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/:2:0","series":null,"tags":["图灵机","计算理论"],"title":"二进制加法图灵机的C语言实现","uri":"/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%9B%BE%E7%81%B5%E6%9C%BA%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/#c-语言代码实现"},{"categories":["Linux"],"content":" Warning 此坑还没填完，暂时只添加了安装部分（装完发现 Arch wiki 实在是已经写得很详细了），还有很多的知识还没有完全弄清楚和补充。 等我学习完计算机组成原理，操作系统和计算机网络后会再来填坑。 本文安装过程基本按照 Arch Linux 安装文档，附带了额外的相关知识。其中可能伴有踩坑，但是也是一种经验啦！ 如发现本文某些地方有误，请在评论区评论，我看到的话会改过来哒！ ","date":"2023-10-12","objectID":"/vmware/:0:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#"},{"categories":["Linux"],"content":" 1 写作起因Arch Linux 的安装过程涉及较多的操作系统知识，而不仅仅是像 Ubuntu/Debian 那样提供 GUI 中的几个选项供你选择。此外，Arch Linux 的文档较为详细（Arch wiki 简直是棒极了！）。 因此，本教程不只是演示本人的安装\u0026踩坑过程，还附带许多的相关文档带读、踩坑原因分析等。 ","date":"2023-10-12","objectID":"/vmware/:1:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#写作起因"},{"categories":["Linux"],"content":" 2 本文适合哪些人 热爱倒腾的 不怕踩坑的 想要通过 Arch Linux 安装过程递归学习其他知识的 ","date":"2023-10-12","objectID":"/vmware/:2:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#本文适合哪些人"},{"categories":["Linux"],"content":" 3 对于其他同学若您仅需要高效的安装 Arch Linux，而不希望看相关知识及其他无关的踩坑过程的，可以： 参考其他博主的奶妈式教程 Arch Linux 详细安装教程，萌新再也不怕了！「2023.09」 archlinux 简明指南 包含安装、配置、维护等，帮助新手快速上手 Arch Linux 安装使用教程 - ArchTutorial - Arch Linux Studio Github 教程 1 Github 教程 2 2022 年 12 月最新安装 Archlinux 一次过的教程 2022.5 archlinux 详细安装过程 ArchLinux 安装指南（新手向） Archlinux 安装教程超详细（2021.11.15 Arch Linux 完全安装教程 2023.10 archinstall 工具 用 archinstall 自动化脚本安装 Arch Linux archinstall github 链接 一些图形化界面安装工具 Zen installer archlinuxgui Netboot 网络安装 Github 上提供的脚本（按照里面的命令一个个输入） 其他安装方式 要在一个 Ubuntu 虚拟机上安装 Arch 虚拟机（嵌套虚拟机），请看这里 ","date":"2023-10-12","objectID":"/vmware/:3:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#对于其他同学"},{"categories":["Linux"],"content":" 4 前言在使用 Arch 前看了 UCB System Admin Decal 的 Linux Pre-install and Install 一节，其中的实验是在 Ubuntu 虚拟机上安装 Arch。Arch 的安装涉及到自己进行分区，对系统进行加密和解密等，我觉得非常有趣，对于操作系统本身也是一个探索的过程。因此决定挑战自己跟着官方文档进行安装。 以前每次安装 Linux 虚拟机，包括 Ubuntu 和 Debian，都是跟着一些博主自己写的奶妈式手把手安装教程一步步的装。每次都能安装成功，但是总是感觉少了一些【探索的乐趣】😆。 今天我就要跟着 Arch Linux 的官方文档一步步装，感受一把极致的安装酸爽体验！ 如果你也想体验自己安装 Arch，或者是想成为 Arch 开发者，下面内容可能对你有帮助： Arch Linux 官方安装文档 Issue tracker Mailing List 常见问题及解答 帮助 贡献项目 帮助手册 ","date":"2023-10-12","objectID":"/vmware/:4:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#前言"},{"categories":["Linux"],"content":" 5 过程简介安装过程涉及到的步骤包含： UEFI 模式启动（或 BIOS，但是分区会不一样，需要注意） 设置键盘模式 检查网络连接 更新系统时钟 创建磁盘分区 初始化分区中的文件系统（/文件系统可选是否加密） 挂载文件系统 利用pacstrap安装必要的包：linux 内核，initrd、init system、pacman\\、base等等 利用genfstab生成/etc/fstab（文件系统表） arch-chroot进入/mnt目录 通过修改/etc/hostname修改主机名 boot 启动原理如下： 图源自 UCB System Admin Decal(https://docs.google.com/presentation/d/1oLtsjsEIsvChOI31_5YYFhILfzGlyx7Hk9DsL1Nv-mc/edit?pli=1#slide=id.g9b414dda04_0_158) ","date":"2023-10-12","objectID":"/vmware/:5:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#过程简介"},{"categories":["Linux"],"content":" 6 获取安装镜像（后缀为.iso）看了一下下载界面，最顶部写了当前发行版的信息，下面是对于几种不同用户的安装方式以及校验和，最后是所有的 Arch 镜像源集合。 ","date":"2023-10-12","objectID":"/vmware/:6:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#获取安装镜像后缀为iso"},{"categories":["Linux"],"content":" 6.1 发行版信息当前发布版本: 2023.09.01 内核版本: 6.4.12 ISO 镜像文件大小: 804.3 MB ","date":"2023-10-12","objectID":"/vmware/:6:1","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#发行版信息"},{"categories":["Linux"],"content":" 6.2 几种下载方式 6.2.1 对于已经是 Arch 用户的人 通过命令pacman -Syu更新 通过这里更新镜像源 6.2.2 种子链接下载（官方推荐）对于这种资源，可以使用百度网盘或者迅雷下载（和下载电影相同），下载格式为.torrent，该种子链接需要上传到百度网盘/迅雷，然后将其中的 iso 镜像文件下载到本地目录中。 6.2.3 Netboot安装时需要联网，最新版本会自动推送，可用于在系统启动时即时下载最新的 Arch Linux 版本。 Netboot 使用定制的 iPXE 版本。 实时系统的 Linux 内核、initramfs 和 squashfs 文件是从 Arch Linux 镜像下载的。 所有下载文件的完整性都使用加密签名进行验证。 这其中有几个问题： iPXE是啥？一种开源的网络启动固件 其官方文档中的描述如下： iPXE 是领先的开源网络引导固件。它提供了完整的 PXE 实现，并通过其他功能进行了增强，例如： 通过 HTTP 从 Web 服务器启动 从 iSCSI SAN 引导 通过 FCoE 从光纤通道 SAN 启动 从 AoE SAN 引导 从无线网络引导 从广域网引导 从 Infiniband 网络引导 使用脚本控制引导过程 由此可以看出，iPXE 是一种基于网络进行系统启动的固件。它的启动需要依附于计算机网络的各种协议。在 Arch Linux 文档中也指明，使用 Netboot 安装需要满足以下两点要求： 具有 DHCP 自配置的网络 能够运行系统的足够存储 而它的具体实现是基于PXE协议。 基于递归学习的理念，我又查了查PXE。。。 其基本概念如下： 预启动执行环境（Preboot eXecution Environment，PXE，也被称为预执行环境）提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。 PXE 当初是作为 Intel 的有线管理体系的一部分，Intel 和 Systemsoft 于 1999 年 9 月 20 日公布其规格（版本 2.1）[1]。通过使用像网际协议（IP）、用户数据报协议（UDP）、动态主机设定协定（DHCP）、BOOTP、小型文件传输协议（TFTP）等几种网络协议和全局唯一标识符（GUID）、通用网络驱动接口（UNDI）、通用唯一识别码（UUID）的概念并通过对客户机（通过 PXE 自检的电脑）固件扩展预设的 API 来实现目的。 PXE 客户机（client）这个术语是指机器在 PXE 启动过程中的角色。 其基本的运行机制是： 客户机的固件（如网卡的 PXE 固件）通过 DHCP 协议找到可用的 PXE 启动服务器。在找到可用的 PXE 启动服务器后，固件会向合适的启动服务器询问网络启动程序（NBP，Network Boot Program）的路径，并且通过 TFTP 协议将网络启动程序下载到电脑的内存中，最后执行它[2]。 由PXE机制又衍生出了无盘系统，其利用网络服务器下载启动系统的镜像，而不是本地硬盘。PXE的协议规范在intel 的这篇文档中可以查到。而 PXE 的两个实现，一个为iPXE，另一个则是gPXE。gPXE目前已经停止开发，取而代之的是iPXE。 对于iPXE和gPXE更详细的介绍，可以参考这篇博文 initramfs文件和squashfs文件做什么用？ TODO 为什么Arch Linux在下载过程中需要使用加密签名对镜像完整性进行验证？ TODO 6.2.4 VM imagearchlinux 虚拟机可从这里下载，使用手册在此。 6.2.5 HTTP 下载（最常用） Tip sq命令需要使用scoop进行安装，如果是 windows 用户，会比较麻烦，详细解决办法见后文 从后文中的镜像源中下载镜像。需要注意的是，我们需要保证下载的镜像的校验和，和同一目录sha256sums.txt及b2sums.txt文件中的校验和匹配。 下载签名：sq wkd get pierre@archlinux.org -o release-key.pgp 验证：sq verify --signer-file release-key.pgp --detached archlinux-2023.09.01-x86_64.iso.sig archlinux-2023.09.01-x86_64.iso ","date":"2023-10-12","objectID":"/vmware/:6:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#几种下载方式"},{"categories":["Linux"],"content":" 6.2 几种下载方式 6.2.1 对于已经是 Arch 用户的人 通过命令pacman -Syu更新 通过这里更新镜像源 6.2.2 种子链接下载（官方推荐）对于这种资源，可以使用百度网盘或者迅雷下载（和下载电影相同），下载格式为.torrent，该种子链接需要上传到百度网盘/迅雷，然后将其中的 iso 镜像文件下载到本地目录中。 6.2.3 Netboot安装时需要联网，最新版本会自动推送，可用于在系统启动时即时下载最新的 Arch Linux 版本。 Netboot 使用定制的 iPXE 版本。 实时系统的 Linux 内核、initramfs 和 squashfs 文件是从 Arch Linux 镜像下载的。 所有下载文件的完整性都使用加密签名进行验证。 这其中有几个问题： iPXE是啥？一种开源的网络启动固件 其官方文档中的描述如下： iPXE 是领先的开源网络引导固件。它提供了完整的 PXE 实现，并通过其他功能进行了增强，例如： 通过 HTTP 从 Web 服务器启动 从 iSCSI SAN 引导 通过 FCoE 从光纤通道 SAN 启动 从 AoE SAN 引导 从无线网络引导 从广域网引导 从 Infiniband 网络引导 使用脚本控制引导过程 由此可以看出，iPXE 是一种基于网络进行系统启动的固件。它的启动需要依附于计算机网络的各种协议。在 Arch Linux 文档中也指明，使用 Netboot 安装需要满足以下两点要求： 具有 DHCP 自配置的网络 能够运行系统的足够存储 而它的具体实现是基于PXE协议。 基于递归学习的理念，我又查了查PXE。。。 其基本概念如下： 预启动执行环境（Preboot eXecution Environment，PXE，也被称为预执行环境）提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。 PXE 当初是作为 Intel 的有线管理体系的一部分，Intel 和 Systemsoft 于 1999 年 9 月 20 日公布其规格（版本 2.1）[1]。通过使用像网际协议（IP）、用户数据报协议（UDP）、动态主机设定协定（DHCP）、BOOTP、小型文件传输协议（TFTP）等几种网络协议和全局唯一标识符（GUID）、通用网络驱动接口（UNDI）、通用唯一识别码（UUID）的概念并通过对客户机（通过 PXE 自检的电脑）固件扩展预设的 API 来实现目的。 PXE 客户机（client）这个术语是指机器在 PXE 启动过程中的角色。 其基本的运行机制是： 客户机的固件（如网卡的 PXE 固件）通过 DHCP 协议找到可用的 PXE 启动服务器。在找到可用的 PXE 启动服务器后，固件会向合适的启动服务器询问网络启动程序（NBP，Network Boot Program）的路径，并且通过 TFTP 协议将网络启动程序下载到电脑的内存中，最后执行它[2]。 由PXE机制又衍生出了无盘系统，其利用网络服务器下载启动系统的镜像，而不是本地硬盘。PXE的协议规范在intel 的这篇文档中可以查到。而 PXE 的两个实现，一个为iPXE，另一个则是gPXE。gPXE目前已经停止开发，取而代之的是iPXE。 对于iPXE和gPXE更详细的介绍，可以参考这篇博文 initramfs文件和squashfs文件做什么用？ TODO 为什么Arch Linux在下载过程中需要使用加密签名对镜像完整性进行验证？ TODO 6.2.4 VM imagearchlinux 虚拟机可从这里下载，使用手册在此。 6.2.5 HTTP 下载（最常用） Tip sq命令需要使用scoop进行安装，如果是 windows 用户，会比较麻烦，详细解决办法见后文 从后文中的镜像源中下载镜像。需要注意的是，我们需要保证下载的镜像的校验和，和同一目录sha256sums.txt及b2sums.txt文件中的校验和匹配。 下载签名：sq wkd get pierre@archlinux.org -o release-key.pgp 验证：sq verify --signer-file release-key.pgp --detached archlinux-2023.09.01-x86_64.iso.sig archlinux-2023.09.01-x86_64.iso ","date":"2023-10-12","objectID":"/vmware/:6:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#对于已经是-arch-用户的人"},{"categories":["Linux"],"content":" 6.2 几种下载方式 6.2.1 对于已经是 Arch 用户的人 通过命令pacman -Syu更新 通过这里更新镜像源 6.2.2 种子链接下载（官方推荐）对于这种资源，可以使用百度网盘或者迅雷下载（和下载电影相同），下载格式为.torrent，该种子链接需要上传到百度网盘/迅雷，然后将其中的 iso 镜像文件下载到本地目录中。 6.2.3 Netboot安装时需要联网，最新版本会自动推送，可用于在系统启动时即时下载最新的 Arch Linux 版本。 Netboot 使用定制的 iPXE 版本。 实时系统的 Linux 内核、initramfs 和 squashfs 文件是从 Arch Linux 镜像下载的。 所有下载文件的完整性都使用加密签名进行验证。 这其中有几个问题： iPXE是啥？一种开源的网络启动固件 其官方文档中的描述如下： iPXE 是领先的开源网络引导固件。它提供了完整的 PXE 实现，并通过其他功能进行了增强，例如： 通过 HTTP 从 Web 服务器启动 从 iSCSI SAN 引导 通过 FCoE 从光纤通道 SAN 启动 从 AoE SAN 引导 从无线网络引导 从广域网引导 从 Infiniband 网络引导 使用脚本控制引导过程 由此可以看出，iPXE 是一种基于网络进行系统启动的固件。它的启动需要依附于计算机网络的各种协议。在 Arch Linux 文档中也指明，使用 Netboot 安装需要满足以下两点要求： 具有 DHCP 自配置的网络 能够运行系统的足够存储 而它的具体实现是基于PXE协议。 基于递归学习的理念，我又查了查PXE。。。 其基本概念如下： 预启动执行环境（Preboot eXecution Environment，PXE，也被称为预执行环境）提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。 PXE 当初是作为 Intel 的有线管理体系的一部分，Intel 和 Systemsoft 于 1999 年 9 月 20 日公布其规格（版本 2.1）[1]。通过使用像网际协议（IP）、用户数据报协议（UDP）、动态主机设定协定（DHCP）、BOOTP、小型文件传输协议（TFTP）等几种网络协议和全局唯一标识符（GUID）、通用网络驱动接口（UNDI）、通用唯一识别码（UUID）的概念并通过对客户机（通过 PXE 自检的电脑）固件扩展预设的 API 来实现目的。 PXE 客户机（client）这个术语是指机器在 PXE 启动过程中的角色。 其基本的运行机制是： 客户机的固件（如网卡的 PXE 固件）通过 DHCP 协议找到可用的 PXE 启动服务器。在找到可用的 PXE 启动服务器后，固件会向合适的启动服务器询问网络启动程序（NBP，Network Boot Program）的路径，并且通过 TFTP 协议将网络启动程序下载到电脑的内存中，最后执行它[2]。 由PXE机制又衍生出了无盘系统，其利用网络服务器下载启动系统的镜像，而不是本地硬盘。PXE的协议规范在intel 的这篇文档中可以查到。而 PXE 的两个实现，一个为iPXE，另一个则是gPXE。gPXE目前已经停止开发，取而代之的是iPXE。 对于iPXE和gPXE更详细的介绍，可以参考这篇博文 initramfs文件和squashfs文件做什么用？ TODO 为什么Arch Linux在下载过程中需要使用加密签名对镜像完整性进行验证？ TODO 6.2.4 VM imagearchlinux 虚拟机可从这里下载，使用手册在此。 6.2.5 HTTP 下载（最常用） Tip sq命令需要使用scoop进行安装，如果是 windows 用户，会比较麻烦，详细解决办法见后文 从后文中的镜像源中下载镜像。需要注意的是，我们需要保证下载的镜像的校验和，和同一目录sha256sums.txt及b2sums.txt文件中的校验和匹配。 下载签名：sq wkd get pierre@archlinux.org -o release-key.pgp 验证：sq verify --signer-file release-key.pgp --detached archlinux-2023.09.01-x86_64.iso.sig archlinux-2023.09.01-x86_64.iso ","date":"2023-10-12","objectID":"/vmware/:6:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#种子链接下载官方推荐"},{"categories":["Linux"],"content":" 6.2 几种下载方式 6.2.1 对于已经是 Arch 用户的人 通过命令pacman -Syu更新 通过这里更新镜像源 6.2.2 种子链接下载（官方推荐）对于这种资源，可以使用百度网盘或者迅雷下载（和下载电影相同），下载格式为.torrent，该种子链接需要上传到百度网盘/迅雷，然后将其中的 iso 镜像文件下载到本地目录中。 6.2.3 Netboot安装时需要联网，最新版本会自动推送，可用于在系统启动时即时下载最新的 Arch Linux 版本。 Netboot 使用定制的 iPXE 版本。 实时系统的 Linux 内核、initramfs 和 squashfs 文件是从 Arch Linux 镜像下载的。 所有下载文件的完整性都使用加密签名进行验证。 这其中有几个问题： iPXE是啥？一种开源的网络启动固件 其官方文档中的描述如下： iPXE 是领先的开源网络引导固件。它提供了完整的 PXE 实现，并通过其他功能进行了增强，例如： 通过 HTTP 从 Web 服务器启动 从 iSCSI SAN 引导 通过 FCoE 从光纤通道 SAN 启动 从 AoE SAN 引导 从无线网络引导 从广域网引导 从 Infiniband 网络引导 使用脚本控制引导过程 由此可以看出，iPXE 是一种基于网络进行系统启动的固件。它的启动需要依附于计算机网络的各种协议。在 Arch Linux 文档中也指明，使用 Netboot 安装需要满足以下两点要求： 具有 DHCP 自配置的网络 能够运行系统的足够存储 而它的具体实现是基于PXE协议。 基于递归学习的理念，我又查了查PXE。。。 其基本概念如下： 预启动执行环境（Preboot eXecution Environment，PXE，也被称为预执行环境）提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。 PXE 当初是作为 Intel 的有线管理体系的一部分，Intel 和 Systemsoft 于 1999 年 9 月 20 日公布其规格（版本 2.1）[1]。通过使用像网际协议（IP）、用户数据报协议（UDP）、动态主机设定协定（DHCP）、BOOTP、小型文件传输协议（TFTP）等几种网络协议和全局唯一标识符（GUID）、通用网络驱动接口（UNDI）、通用唯一识别码（UUID）的概念并通过对客户机（通过 PXE 自检的电脑）固件扩展预设的 API 来实现目的。 PXE 客户机（client）这个术语是指机器在 PXE 启动过程中的角色。 其基本的运行机制是： 客户机的固件（如网卡的 PXE 固件）通过 DHCP 协议找到可用的 PXE 启动服务器。在找到可用的 PXE 启动服务器后，固件会向合适的启动服务器询问网络启动程序（NBP，Network Boot Program）的路径，并且通过 TFTP 协议将网络启动程序下载到电脑的内存中，最后执行它[2]。 由PXE机制又衍生出了无盘系统，其利用网络服务器下载启动系统的镜像，而不是本地硬盘。PXE的协议规范在intel 的这篇文档中可以查到。而 PXE 的两个实现，一个为iPXE，另一个则是gPXE。gPXE目前已经停止开发，取而代之的是iPXE。 对于iPXE和gPXE更详细的介绍，可以参考这篇博文 initramfs文件和squashfs文件做什么用？ TODO 为什么Arch Linux在下载过程中需要使用加密签名对镜像完整性进行验证？ TODO 6.2.4 VM imagearchlinux 虚拟机可从这里下载，使用手册在此。 6.2.5 HTTP 下载（最常用） Tip sq命令需要使用scoop进行安装，如果是 windows 用户，会比较麻烦，详细解决办法见后文 从后文中的镜像源中下载镜像。需要注意的是，我们需要保证下载的镜像的校验和，和同一目录sha256sums.txt及b2sums.txt文件中的校验和匹配。 下载签名：sq wkd get pierre@archlinux.org -o release-key.pgp 验证：sq verify --signer-file release-key.pgp --detached archlinux-2023.09.01-x86_64.iso.sig archlinux-2023.09.01-x86_64.iso ","date":"2023-10-12","objectID":"/vmware/:6:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#netboot"},{"categories":["Linux"],"content":" 6.2 几种下载方式 6.2.1 对于已经是 Arch 用户的人 通过命令pacman -Syu更新 通过这里更新镜像源 6.2.2 种子链接下载（官方推荐）对于这种资源，可以使用百度网盘或者迅雷下载（和下载电影相同），下载格式为.torrent，该种子链接需要上传到百度网盘/迅雷，然后将其中的 iso 镜像文件下载到本地目录中。 6.2.3 Netboot安装时需要联网，最新版本会自动推送，可用于在系统启动时即时下载最新的 Arch Linux 版本。 Netboot 使用定制的 iPXE 版本。 实时系统的 Linux 内核、initramfs 和 squashfs 文件是从 Arch Linux 镜像下载的。 所有下载文件的完整性都使用加密签名进行验证。 这其中有几个问题： iPXE是啥？一种开源的网络启动固件 其官方文档中的描述如下： iPXE 是领先的开源网络引导固件。它提供了完整的 PXE 实现，并通过其他功能进行了增强，例如： 通过 HTTP 从 Web 服务器启动 从 iSCSI SAN 引导 通过 FCoE 从光纤通道 SAN 启动 从 AoE SAN 引导 从无线网络引导 从广域网引导 从 Infiniband 网络引导 使用脚本控制引导过程 由此可以看出，iPXE 是一种基于网络进行系统启动的固件。它的启动需要依附于计算机网络的各种协议。在 Arch Linux 文档中也指明，使用 Netboot 安装需要满足以下两点要求： 具有 DHCP 自配置的网络 能够运行系统的足够存储 而它的具体实现是基于PXE协议。 基于递归学习的理念，我又查了查PXE。。。 其基本概念如下： 预启动执行环境（Preboot eXecution Environment，PXE，也被称为预执行环境）提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。 PXE 当初是作为 Intel 的有线管理体系的一部分，Intel 和 Systemsoft 于 1999 年 9 月 20 日公布其规格（版本 2.1）[1]。通过使用像网际协议（IP）、用户数据报协议（UDP）、动态主机设定协定（DHCP）、BOOTP、小型文件传输协议（TFTP）等几种网络协议和全局唯一标识符（GUID）、通用网络驱动接口（UNDI）、通用唯一识别码（UUID）的概念并通过对客户机（通过 PXE 自检的电脑）固件扩展预设的 API 来实现目的。 PXE 客户机（client）这个术语是指机器在 PXE 启动过程中的角色。 其基本的运行机制是： 客户机的固件（如网卡的 PXE 固件）通过 DHCP 协议找到可用的 PXE 启动服务器。在找到可用的 PXE 启动服务器后，固件会向合适的启动服务器询问网络启动程序（NBP，Network Boot Program）的路径，并且通过 TFTP 协议将网络启动程序下载到电脑的内存中，最后执行它[2]。 由PXE机制又衍生出了无盘系统，其利用网络服务器下载启动系统的镜像，而不是本地硬盘。PXE的协议规范在intel 的这篇文档中可以查到。而 PXE 的两个实现，一个为iPXE，另一个则是gPXE。gPXE目前已经停止开发，取而代之的是iPXE。 对于iPXE和gPXE更详细的介绍，可以参考这篇博文 initramfs文件和squashfs文件做什么用？ TODO 为什么Arch Linux在下载过程中需要使用加密签名对镜像完整性进行验证？ TODO 6.2.4 VM imagearchlinux 虚拟机可从这里下载，使用手册在此。 6.2.5 HTTP 下载（最常用） Tip sq命令需要使用scoop进行安装，如果是 windows 用户，会比较麻烦，详细解决办法见后文 从后文中的镜像源中下载镜像。需要注意的是，我们需要保证下载的镜像的校验和，和同一目录sha256sums.txt及b2sums.txt文件中的校验和匹配。 下载签名：sq wkd get pierre@archlinux.org -o release-key.pgp 验证：sq verify --signer-file release-key.pgp --detached archlinux-2023.09.01-x86_64.iso.sig archlinux-2023.09.01-x86_64.iso ","date":"2023-10-12","objectID":"/vmware/:6:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#vm-image"},{"categories":["Linux"],"content":" 6.2 几种下载方式 6.2.1 对于已经是 Arch 用户的人 通过命令pacman -Syu更新 通过这里更新镜像源 6.2.2 种子链接下载（官方推荐）对于这种资源，可以使用百度网盘或者迅雷下载（和下载电影相同），下载格式为.torrent，该种子链接需要上传到百度网盘/迅雷，然后将其中的 iso 镜像文件下载到本地目录中。 6.2.3 Netboot安装时需要联网，最新版本会自动推送，可用于在系统启动时即时下载最新的 Arch Linux 版本。 Netboot 使用定制的 iPXE 版本。 实时系统的 Linux 内核、initramfs 和 squashfs 文件是从 Arch Linux 镜像下载的。 所有下载文件的完整性都使用加密签名进行验证。 这其中有几个问题： iPXE是啥？一种开源的网络启动固件 其官方文档中的描述如下： iPXE 是领先的开源网络引导固件。它提供了完整的 PXE 实现，并通过其他功能进行了增强，例如： 通过 HTTP 从 Web 服务器启动 从 iSCSI SAN 引导 通过 FCoE 从光纤通道 SAN 启动 从 AoE SAN 引导 从无线网络引导 从广域网引导 从 Infiniband 网络引导 使用脚本控制引导过程 由此可以看出，iPXE 是一种基于网络进行系统启动的固件。它的启动需要依附于计算机网络的各种协议。在 Arch Linux 文档中也指明，使用 Netboot 安装需要满足以下两点要求： 具有 DHCP 自配置的网络 能够运行系统的足够存储 而它的具体实现是基于PXE协议。 基于递归学习的理念，我又查了查PXE。。。 其基本概念如下： 预启动执行环境（Preboot eXecution Environment，PXE，也被称为预执行环境）提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。 PXE 当初是作为 Intel 的有线管理体系的一部分，Intel 和 Systemsoft 于 1999 年 9 月 20 日公布其规格（版本 2.1）[1]。通过使用像网际协议（IP）、用户数据报协议（UDP）、动态主机设定协定（DHCP）、BOOTP、小型文件传输协议（TFTP）等几种网络协议和全局唯一标识符（GUID）、通用网络驱动接口（UNDI）、通用唯一识别码（UUID）的概念并通过对客户机（通过 PXE 自检的电脑）固件扩展预设的 API 来实现目的。 PXE 客户机（client）这个术语是指机器在 PXE 启动过程中的角色。 其基本的运行机制是： 客户机的固件（如网卡的 PXE 固件）通过 DHCP 协议找到可用的 PXE 启动服务器。在找到可用的 PXE 启动服务器后，固件会向合适的启动服务器询问网络启动程序（NBP，Network Boot Program）的路径，并且通过 TFTP 协议将网络启动程序下载到电脑的内存中，最后执行它[2]。 由PXE机制又衍生出了无盘系统，其利用网络服务器下载启动系统的镜像，而不是本地硬盘。PXE的协议规范在intel 的这篇文档中可以查到。而 PXE 的两个实现，一个为iPXE，另一个则是gPXE。gPXE目前已经停止开发，取而代之的是iPXE。 对于iPXE和gPXE更详细的介绍，可以参考这篇博文 initramfs文件和squashfs文件做什么用？ TODO 为什么Arch Linux在下载过程中需要使用加密签名对镜像完整性进行验证？ TODO 6.2.4 VM imagearchlinux 虚拟机可从这里下载，使用手册在此。 6.2.5 HTTP 下载（最常用） Tip sq命令需要使用scoop进行安装，如果是 windows 用户，会比较麻烦，详细解决办法见后文 从后文中的镜像源中下载镜像。需要注意的是，我们需要保证下载的镜像的校验和，和同一目录sha256sums.txt及b2sums.txt文件中的校验和匹配。 下载签名：sq wkd get pierre@archlinux.org -o release-key.pgp 验证：sq verify --signer-file release-key.pgp --detached archlinux-2023.09.01-x86_64.iso.sig archlinux-2023.09.01-x86_64.iso ","date":"2023-10-12","objectID":"/vmware/:6:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#http-下载最常用"},{"categories":["Linux"],"content":" 6.3 校验和最新版本的校验和下载详见官网。在镜像源网站上也可以看到sha256sums.txt和b2sums.txt 。下载镜像后我们需要利用它与我们下载到的镜像的校验和进行比对(主要是用于比对，这两个文件可下载也可不下载，在镜像站上也能打开，只要我们下载到的镜像的校验和文件中版本对应的那行的校验和匹配就行了)。 ","date":"2023-10-12","objectID":"/vmware/:6:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#校验和"},{"categories":["Linux"],"content":" 6.4 方法一 Tip 由于这种方式下载过慢，笔者建议使用方法二，即通过开源镜像站进行下载。 在Download 界面选择推荐的 BitTorrent Download: 下载到本地电脑的 Downloads 文件夹中，其后缀名为.torrent 打开百度网盘，在其中上传该文件 上传后双击该文件，点击开始下载到网盘，等待下载完成（有点慢哈！） 下载到网盘后，将iso镜像文件下载到在自选的本地目录中 ","date":"2023-10-12","objectID":"/vmware/:6:4","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#方法一"},{"categories":["Linux"],"content":" 6.5 方法二 在Download 界面下翻，找到中国的镜像站列表: 在其中选择tuna.tsinghua.edu.cn，即清华大学镜像站（我每次都用他们的镜像，速度不错） 选择archlinux-2023.09.01-x86_64.iso下载 将.iso文件保存到我们想要虚拟机保存的目录中 ","date":"2023-10-12","objectID":"/vmware/:6:5","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#方法二"},{"categories":["Linux"],"content":" 7 获取GnuPG签名 GnuPG 是什么？ GnuPG 是完整实现了 RFC4880（即 PGP）所定义的 OpenPGP 标准的自由软件。GnuPG 可以加密和签名你的数据和通讯信息，包含一个通用的密钥管理系统以及用于各种公钥目录的访问模块。GnuPG，简称 GPG，是一个易于与其它程序整合的命令行工具，拥有很多前端程序和函数库。GnuPG 还支持 S/MIME 和 Secure Shell (ssh)。 从上述清华大学镜像站，可获取 iso 版本对应的 PGP 签名` archlinux-2023.09.01-x86_64.iso.sig`` 在本次安装中，我使用的是 Git Bash，其中装有GPG，cmd和powershell中也装有 gpg，可选择一个终端进行后续操作。 ","date":"2023-10-12","objectID":"/vmware/:7:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#获取gnupg签名"},{"categories":["Linux"],"content":" 8 验证签名为避免因 HTTP 连接下载镜像时遭到拦截，获取到恶意镜像，我们需要利用 PGP 签名对镜像进行验证。 通过以下命令验证: bash gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig 其中version替换成你所下载的版本号，如2023.09.01。我的显示结果是： bash legion@DESKTOP-ROOSFVQ MINGW64 /e/VMs/Arch $ gpg --keyserver-options auto-key-retrieve --verify archlinux-2023.09.01-x86_64.iso.sig gpg: assuming signed data in 'archlinux-2023.09.01-x86_64.iso' gpg: Signature made 2023年09月 1日 18:48:49 gpg: using EDDSA key 3E80CA1A8B89F69CBA57D98A76A5EF9054449A5C gpg: issuer \"pierre@archlinux.org\" gpg: Good signature from \"Pierre Schmitz \u003cpierre@archlinux.org\u003e\" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 3E80 CA1A 8B89 F69C BA57 D98A 76A5 EF90 5444 9A5C 若从镜像站下载，则会显示fingerprint，我们需要打开fingerprint 合集,确保我们所获得的镜像的fingerprint和该网站上的 fingerprint 吻合。（确保公钥的指纹等于其中一位签署了 ISO 文件 Arch Linux 开发者的指纹） ","date":"2023-10-12","objectID":"/vmware/:8:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#验证签名"},{"categories":["Linux"],"content":" 9 准备安装介质安装镜像包括：U 盘，光盘，和带有 PXE 的网络安装镜像。此处我是用 VMWare 虚拟机进行安装。 ","date":"2023-10-12","objectID":"/vmware/:9:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#准备安装介质"},{"categories":["Linux"],"content":" 10 VMWare 新建虚拟机依次选择： 自定义（高级） 硬件兼容性 稍后安装操作系统 本内核版本为 6.4.12，因 VMware 中没有 Arch，因此我选择其他 Linux 5.x 内核 64位 选择安装目录（自定） 处理器配置、内存大小分配均选择默认（注意：内存大小选择 2G，768MB 完全不够) 使用网络地址转换（NAT） SCSI 控制器:LSI Logic（L） 虚拟磁盘类型：SCSI（S） 创建新虚拟磁盘 最大磁盘大小默认，将虚拟磁盘拆分成多个文件 磁盘文件名默认 自定义硬件-\u003e新 CD/DVD-\u003e使用 ISO 映像文件-\u003e选择我们下载的 iso 文件-\u003e关闭 完成 你可以自行决定 BIOS 或 UEFI 模式启动（我选择 UEFI，但是应该影响不大） 点击开启此虚拟机 Ready for the journey? Let’s go! ","date":"2023-10-12","objectID":"/vmware/:10:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#vmware-新建虚拟机"},{"categories":["Linux"],"content":" 11 进入安装程序 默认第一项，等待一会儿，随后进入命令行模式 ","date":"2023-10-12","objectID":"/vmware/:11:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#进入安装程序"},{"categories":["Linux"],"content":" 12 一号坑：VMware 默认分配内存 768MB 过小，需要 2G开局遇雷：怎么回事？ 参考了这篇博文虚拟机默认的是 768MB，不够。在设置中修改为 2G,成功启动。 ","date":"2023-10-12","objectID":"/vmware/:12:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#一号坑vmware-默认分配内存-768mb-过小需要-2g"},{"categories":["Linux"],"content":" 13 二号坑：网络出现问题 关了虚拟机，重新开机，成功启动 ","date":"2023-10-12","objectID":"/vmware/:13:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#二号坑网络出现问题"},{"categories":["Linux"],"content":" 14 配置控制台键盘布局和字体系统启动后，控制台键盘布局默认为 us（美式键盘）。如果您需要列出所有可用的键盘布局，可以使用以下命令： bash ls /usr/share/kbd/keymaps/**/*.map.gz 此处我使用us键盘布局，不修改。 ","date":"2023-10-12","objectID":"/vmware/:14:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#配置控制台键盘布局和字体"},{"categories":["Linux"],"content":" 15 检查是否连接到互联网 bash ip link ping archlinux.org ","date":"2023-10-12","objectID":"/vmware/:15:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#检查是否连接到互联网"},{"categories":["Linux"],"content":" 16 更新系统时间 bash timedatectl #查看系统时间 timedatectl list-timezones #查看所有时区 timedatectl set-timezone \"Asia/Shanghai\" # 设置为亚洲上海 要创建磁盘分区了，为保证出问题后还能倒回来，此处拍摄快照 1 ","date":"2023-10-12","objectID":"/vmware/:16:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#更新系统时间"},{"categories":["Linux"],"content":" 17 创建硬盘分区","date":"2023-10-12","objectID":"/vmware/:17:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#创建硬盘分区"},{"categories":["Linux"],"content":" 17.1 指南系统如果识别到计算机的内置硬盘、U 盘或者移动硬盘等类型磁盘，就会将其分配为一个块设备，如 /dev/sda、/dev/nvme0n1 或 /dev/mmcblk0。可以使用 lsblk 或者 fdisk 查看： bash fdisk -l(此处为小写字母l) 结果中以 rom、loop 或者 airoot 结尾的设备可以被忽略。 提示：在分区之前，请您检查 NVMe 驱动器和 Advanced Format 硬盘是否使用了最佳逻辑扇区大小。需要注意的是，更改逻辑扇区大小后，可能会导致在 Windows 系统中出现兼容性问题。 对于一个选定的设备，以下分区是必须要有的： 一个根分区（挂载在 根目录）/； 要在 UEFI 模式中启动，还需要一个 EFI 系统分区。 如果您需要创建多级存储例如 LVM、磁盘加密 或 RAID，请您在这时候完成。 请使用分区工具（fdisk 、parted、cfdisk 等等）修改分区表。例如： bash fdisk /dev/the_disk_to_be_partitioned（要被分区的磁盘） 注意： 如果您想要的磁盘没有显示出来， 确保您的磁盘控制器未处于 RAID 模式。 如果要启动的磁盘已经有一个 EFI 系统分区，就不要再新建 EFI 分区了，而是使用现有的 EFI 分区。 如果文件系统支持，交换空间 可以通过 交换文件 实现。 ","date":"2023-10-12","objectID":"/vmware/:17:1","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#指南"},{"categories":["Linux"],"content":" 17.2 分区方案： ","date":"2023-10-12","objectID":"/vmware/:17:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#分区方案"},{"categories":["Linux"],"content":" 17.3 分区步骤 17.3.1 创建 GPT 分区表 输入fdisk /dev/sda，对/dev/sda磁盘进行分区 输入g，创建一个GUID分区表 17.3.2 创建第一个分区：EFI 分区 输入n，创建第一个分区，输入其编号（默认为 1，即/dev/sda1） 回车，默认其大小 对最后一个扇区，输入+512M 输入t来将这个新分区改为\"EFI System\" 输入L来查看所有分区名，输入q退出，可见EFI System分区别名为 1 输入1，将分区改为EFI System 17.3.3 创建第二个分区：文件系统分区 输入n，创建第二个分区 两次回车，使用默认分区号和扇区大小 输入-512M，为交换分区留出 512MB 大小来 分区默认名为Linux filesystem，因此不需要改 17.3.4 创建第三个分区：交换分区 输入n，创建第三个分区 连按 3 次回车，接受所有默认设置 输入t，将新分区改为Linux Swap,别名为 19 17.3.5 查看分区结果输入p 17.3.6 完成修改输入w ","date":"2023-10-12","objectID":"/vmware/:17:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#分区步骤"},{"categories":["Linux"],"content":" 17.3 分区步骤 17.3.1 创建 GPT 分区表 输入fdisk /dev/sda，对/dev/sda磁盘进行分区 输入g，创建一个GUID分区表 17.3.2 创建第一个分区：EFI 分区 输入n，创建第一个分区，输入其编号（默认为 1，即/dev/sda1） 回车，默认其大小 对最后一个扇区，输入+512M 输入t来将这个新分区改为\"EFI System\" 输入L来查看所有分区名，输入q退出，可见EFI System分区别名为 1 输入1，将分区改为EFI System 17.3.3 创建第二个分区：文件系统分区 输入n，创建第二个分区 两次回车，使用默认分区号和扇区大小 输入-512M，为交换分区留出 512MB 大小来 分区默认名为Linux filesystem，因此不需要改 17.3.4 创建第三个分区：交换分区 输入n，创建第三个分区 连按 3 次回车，接受所有默认设置 输入t，将新分区改为Linux Swap,别名为 19 17.3.5 查看分区结果输入p 17.3.6 完成修改输入w ","date":"2023-10-12","objectID":"/vmware/:17:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#创建-gpt-分区表"},{"categories":["Linux"],"content":" 17.3 分区步骤 17.3.1 创建 GPT 分区表 输入fdisk /dev/sda，对/dev/sda磁盘进行分区 输入g，创建一个GUID分区表 17.3.2 创建第一个分区：EFI 分区 输入n，创建第一个分区，输入其编号（默认为 1，即/dev/sda1） 回车，默认其大小 对最后一个扇区，输入+512M 输入t来将这个新分区改为\"EFI System\" 输入L来查看所有分区名，输入q退出，可见EFI System分区别名为 1 输入1，将分区改为EFI System 17.3.3 创建第二个分区：文件系统分区 输入n，创建第二个分区 两次回车，使用默认分区号和扇区大小 输入-512M，为交换分区留出 512MB 大小来 分区默认名为Linux filesystem，因此不需要改 17.3.4 创建第三个分区：交换分区 输入n，创建第三个分区 连按 3 次回车，接受所有默认设置 输入t，将新分区改为Linux Swap,别名为 19 17.3.5 查看分区结果输入p 17.3.6 完成修改输入w ","date":"2023-10-12","objectID":"/vmware/:17:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#创建第一个分区efi-分区"},{"categories":["Linux"],"content":" 17.3 分区步骤 17.3.1 创建 GPT 分区表 输入fdisk /dev/sda，对/dev/sda磁盘进行分区 输入g，创建一个GUID分区表 17.3.2 创建第一个分区：EFI 分区 输入n，创建第一个分区，输入其编号（默认为 1，即/dev/sda1） 回车，默认其大小 对最后一个扇区，输入+512M 输入t来将这个新分区改为\"EFI System\" 输入L来查看所有分区名，输入q退出，可见EFI System分区别名为 1 输入1，将分区改为EFI System 17.3.3 创建第二个分区：文件系统分区 输入n，创建第二个分区 两次回车，使用默认分区号和扇区大小 输入-512M，为交换分区留出 512MB 大小来 分区默认名为Linux filesystem，因此不需要改 17.3.4 创建第三个分区：交换分区 输入n，创建第三个分区 连按 3 次回车，接受所有默认设置 输入t，将新分区改为Linux Swap,别名为 19 17.3.5 查看分区结果输入p 17.3.6 完成修改输入w ","date":"2023-10-12","objectID":"/vmware/:17:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#创建第二个分区文件系统分区"},{"categories":["Linux"],"content":" 17.3 分区步骤 17.3.1 创建 GPT 分区表 输入fdisk /dev/sda，对/dev/sda磁盘进行分区 输入g，创建一个GUID分区表 17.3.2 创建第一个分区：EFI 分区 输入n，创建第一个分区，输入其编号（默认为 1，即/dev/sda1） 回车，默认其大小 对最后一个扇区，输入+512M 输入t来将这个新分区改为\"EFI System\" 输入L来查看所有分区名，输入q退出，可见EFI System分区别名为 1 输入1，将分区改为EFI System 17.3.3 创建第二个分区：文件系统分区 输入n，创建第二个分区 两次回车，使用默认分区号和扇区大小 输入-512M，为交换分区留出 512MB 大小来 分区默认名为Linux filesystem，因此不需要改 17.3.4 创建第三个分区：交换分区 输入n，创建第三个分区 连按 3 次回车，接受所有默认设置 输入t，将新分区改为Linux Swap,别名为 19 17.3.5 查看分区结果输入p 17.3.6 完成修改输入w ","date":"2023-10-12","objectID":"/vmware/:17:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#创建第三个分区交换分区"},{"categories":["Linux"],"content":" 17.3 分区步骤 17.3.1 创建 GPT 分区表 输入fdisk /dev/sda，对/dev/sda磁盘进行分区 输入g，创建一个GUID分区表 17.3.2 创建第一个分区：EFI 分区 输入n，创建第一个分区，输入其编号（默认为 1，即/dev/sda1） 回车，默认其大小 对最后一个扇区，输入+512M 输入t来将这个新分区改为\"EFI System\" 输入L来查看所有分区名，输入q退出，可见EFI System分区别名为 1 输入1，将分区改为EFI System 17.3.3 创建第二个分区：文件系统分区 输入n，创建第二个分区 两次回车，使用默认分区号和扇区大小 输入-512M，为交换分区留出 512MB 大小来 分区默认名为Linux filesystem，因此不需要改 17.3.4 创建第三个分区：交换分区 输入n，创建第三个分区 连按 3 次回车，接受所有默认设置 输入t，将新分区改为Linux Swap,别名为 19 17.3.5 查看分区结果输入p 17.3.6 完成修改输入w ","date":"2023-10-12","objectID":"/vmware/:17:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#查看分区结果"},{"categories":["Linux"],"content":" 17.3 分区步骤 17.3.1 创建 GPT 分区表 输入fdisk /dev/sda，对/dev/sda磁盘进行分区 输入g，创建一个GUID分区表 17.3.2 创建第一个分区：EFI 分区 输入n，创建第一个分区，输入其编号（默认为 1，即/dev/sda1） 回车，默认其大小 对最后一个扇区，输入+512M 输入t来将这个新分区改为\"EFI System\" 输入L来查看所有分区名，输入q退出，可见EFI System分区别名为 1 输入1，将分区改为EFI System 17.3.3 创建第二个分区：文件系统分区 输入n，创建第二个分区 两次回车，使用默认分区号和扇区大小 输入-512M，为交换分区留出 512MB 大小来 分区默认名为Linux filesystem，因此不需要改 17.3.4 创建第三个分区：交换分区 输入n，创建第三个分区 连按 3 次回车，接受所有默认设置 输入t，将新分区改为Linux Swap,别名为 19 17.3.5 查看分区结果输入p 17.3.6 完成修改输入w ","date":"2023-10-12","objectID":"/vmware/:17:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#完成修改"},{"categories":["Linux"],"content":" 18 格式化分区对于不同的分区，我们使用不同的文件系统： ","date":"2023-10-12","objectID":"/vmware/:18:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#格式化分区"},{"categories":["Linux"],"content":" 18.1 ESP 分区格式化：mkfs.fat格式化 FAT32 文件系统ESP 在/dev/sda1中，运行mkfs.fat -F32 /dev/sda1来挂载 FAT32 文件系统 ","date":"2023-10-12","objectID":"/vmware/:18:1","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#esp-分区格式化mkfsfat格式化-fat32-文件系统"},{"categories":["Linux"],"content":" 19 根分区：通过mkfs.ext4格式化 ext4 文件系统mkfs.ext4 /dev/sad2 ","date":"2023-10-12","objectID":"/vmware/:19:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#根分区通过mkfsext4格式化-ext4-文件系统"},{"categories":["Linux"],"content":" 20 交换分区格式化：mkswapmkswap /dev/sda3 ","date":"2023-10-12","objectID":"/vmware/:20:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#交换分区格式化mkswap"},{"categories":["Linux"],"content":" 21 挂载分区","date":"2023-10-12","objectID":"/vmware/:21:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#挂载分区"},{"categories":["Linux"],"content":" 21.1 挂载根分区将根磁盘卷挂载到/mnt，使用命令：mount /dev/sda2 /mnt ","date":"2023-10-12","objectID":"/vmware/:21:1","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#挂载根分区"},{"categories":["Linux"],"content":" 21.2 挂载 EFI 分区 bash mount --mkdir /dev/sda1 /mnt/boot ","date":"2023-10-12","objectID":"/vmware/:21:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#挂载-efi-分区"},{"categories":["Linux"],"content":" 21.3 挂载 swap 分区swapon /dev/sda3来启用交换分区 稍后 genfstab(8) 将自动检测挂载的文件系统和交换空间。 ","date":"2023-10-12","objectID":"/vmware/:21:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#挂载-swap-分区"},{"categories":["Linux"],"content":" 22 开始安装系统","date":"2023-10-12","objectID":"/vmware/:22:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#开始安装系统"},{"categories":["Linux"],"content":" 22.1 选择镜像站 22.1.1 安装reflector包通常来说系统默认有，如果没有的话使用如下命令安装： sudo pacman -S reflector 22.1.2 更新源 bash sudo reflector --country China --save /etc/pacman.d/mirrorlist.pacnew 确保源准确无误后，将mirrorlist.pacnew复制到mirrorlist ","date":"2023-10-12","objectID":"/vmware/:22:1","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#选择镜像站"},{"categories":["Linux"],"content":" 22.1 选择镜像站 22.1.1 安装reflector包通常来说系统默认有，如果没有的话使用如下命令安装： sudo pacman -S reflector 22.1.2 更新源 bash sudo reflector --country China --save /etc/pacman.d/mirrorlist.pacnew 确保源准确无误后，将mirrorlist.pacnew复制到mirrorlist ","date":"2023-10-12","objectID":"/vmware/:22:1","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#安装reflector包"},{"categories":["Linux"],"content":" 22.1 选择镜像站 22.1.1 安装reflector包通常来说系统默认有，如果没有的话使用如下命令安装： sudo pacman -S reflector 22.1.2 更新源 bash sudo reflector --country China --save /etc/pacman.d/mirrorlist.pacnew 确保源准确无误后，将mirrorlist.pacnew复制到mirrorlist ","date":"2023-10-12","objectID":"/vmware/:22:1","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#更新源"},{"categories":["Linux"],"content":" 22.2 安装必须的软件包使用 pacstrap(8) 脚本，安装 base 包 软件包和 Linux 内核以及常规硬件的固件： bash pacstrap -K /mnt base linux vim man-db man-pages texinfo 这时候可以同时额外安装计算机的 CPU 微码包。如果计算机是 Intel 的 CPU ，使用intel-ucode包，AMD CPU 则使用 amd-ucode包。也可以暂时都不安装，等到进入系统后再安装。 因为我是在虚拟机中安装，因此我不安装固件linux-firmware和微码包intel-ucode。如果你有想补充的软件，请加在pacstrap后面。 是texinfo，不是textinfo，不要看错啦！ ","date":"2023-10-12","objectID":"/vmware/:22:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#安装必须的软件包"},{"categories":["Linux"],"content":" 23 配置系统","date":"2023-10-12","objectID":"/vmware/:23:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#配置系统"},{"categories":["Linux"],"content":" 23.1 生成 fstab 文件通过以下命令生成 fstab 文件 (用 -U 或 -L 选项设置 UUID 或卷标)： bash genfstab -U /mnt \u003e\u003e /mnt/etc/fstab 强烈建议在执行完以上命令后，检查一下生成的/mnt/etc/fstab文件是否正确。 ","date":"2023-10-12","objectID":"/vmware/:23:1","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#生成-fstab-文件"},{"categories":["Linux"],"content":" 23.2 chroot 到新安装的系统 bash arch-chroot /mnt 提示：此处使用的是 arch-chroot 而不是直接使用 chroot，注意不要输错了。在arch-chroot进入/mnt后，提示符应该变为了[root@archiso]样式，如果没有，请检查一下前面的步骤是否都准确完成了。 ","date":"2023-10-12","objectID":"/vmware/:23:2","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#chroot-到新安装的系统"},{"categories":["Linux"],"content":" 23.3 设置时区 bash ln -sf /usr/share/zoneinfo/Region（地区名）/City（城市名） /etc/localtime 地区名填 Asia,城市名填 Shanghai 然后运行 hwclock(8) 以生成 /etc/adjtime： bash hwclock --systohc 这个命令假定已设置硬件时间为 UTC 时间。 ","date":"2023-10-12","objectID":"/vmware/:23:3","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#设置时区"},{"categories":["Linux"],"content":" 23.4 区域和本地化设置 编辑/etc/locale.gen。将en_US.UTF-8或其他你想要的配置，对应那行取消注释。修改后，执行locale-gen，以生成locale信息。 创建/etc/locale.conf，在其中写入： bash LANG=en_US.UTF-8 ","date":"2023-10-12","objectID":"/vmware/:23:4","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#区域和本地化设置"},{"categories":["Linux"],"content":" 23.5 控制台键盘布局和字体设置如果需要修改控制台键盘布局和字体，可编辑 /etc/vconsole.conf 使其长期生效，例如： bash KEYMAP=de-latin1 ","date":"2023-10-12","objectID":"/vmware/:23:5","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#控制台键盘布局和字体设置"},{"categories":["Linux"],"content":" 23.6 网络配置网络配置很重要,否则安装系统后会连不上网（例如VirtualBox桥接模式就需要配置 DHCP） 23.6.1 设置主机名创建/etc/hostname文件，在其中直接填写你所设定的主机名，我填写的主机名是arch 23.6.2 安装网络管理器 pacman -S networkmanager systemctl enable NetworkManager.service设置网络管理器开机自启动 ","date":"2023-10-12","objectID":"/vmware/:23:6","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#网络配置"},{"categories":["Linux"],"content":" 23.6 网络配置网络配置很重要,否则安装系统后会连不上网（例如VirtualBox桥接模式就需要配置 DHCP） 23.6.1 设置主机名创建/etc/hostname文件，在其中直接填写你所设定的主机名，我填写的主机名是arch 23.6.2 安装网络管理器 pacman -S networkmanager systemctl enable NetworkManager.service设置网络管理器开机自启动 ","date":"2023-10-12","objectID":"/vmware/:23:6","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#设置主机名"},{"categories":["Linux"],"content":" 23.6 网络配置网络配置很重要,否则安装系统后会连不上网（例如VirtualBox桥接模式就需要配置 DHCP） 23.6.1 设置主机名创建/etc/hostname文件，在其中直接填写你所设定的主机名，我填写的主机名是arch 23.6.2 安装网络管理器 pacman -S networkmanager systemctl enable NetworkManager.service设置网络管理器开机自启动 ","date":"2023-10-12","objectID":"/vmware/:23:6","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#安装网络管理器"},{"categories":["Linux"],"content":" 23.7 关于 initramfs通常不需要自己创建新的 initramfs，因为在执行 pacstrap 时已经安装 linux 包，这时已经运行过 mkinitcpio 了。 ","date":"2023-10-12","objectID":"/vmware/:23:7","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#关于-initramfs"},{"categories":["Linux"],"content":" 23.8 设置 root 密码输入passwd创建一个root密码 ","date":"2023-10-12","objectID":"/vmware/:23:8","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#设置-root-密码"},{"categories":["Linux"],"content":" 23.9 安装引导程序需要安装 Linux 引导加载程序，才能在安装后启动系统，可以使用的的引导程序已在启动加载器中列出，请选择一个安装并配置它，GRUB 是最常见的选择。 如果有 Intel 或 AMD 的 CPU，请另外启用微码更新。 安装grub和efibootmgr：输入pacman -S grub efibootmgr 输入grub-install --target=x86_64-efi --efi-directory=[esp] --bootloader-id=GRUB 我的esp挂载点是/mnt/boot，因为我已经arch-chroot到/mnt中了，因此esp字段填写/boot即可。如果你安装在了其他挂载点上，请在esp字段填写你自己的挂载点。如果出现问题，检查： 是否已经arch-chroot到了/mnt下？命令提示符为[root@archiso] 前面的配置过程有没有出现问题？ grub-install命令成功时应该出现: 生成主配置文件:grub-mkconfig -o /boot/grub/grub.cfg 配置成功时界面： ","date":"2023-10-12","objectID":"/vmware/:23:9","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#安装引导程序"},{"categories":["Linux"],"content":" 24 重新启动计算机 exit退出chroot环境 umount -R /mnt取消挂载/mnt（也等到可reboot时 systemd 自动卸载） reboot重启系统 ","date":"2023-10-12","objectID":"/vmware/:24:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#重新启动计算机"},{"categories":["Linux"],"content":" 25 安装后的工作参见建议阅读列表及应用程序列表 ","date":"2023-10-12","objectID":"/vmware/:25:0","series":["Arch 探索"],"tags":["Arch","Linux","安装"],"title":"VMWare下的Arch Linux安装过程记录","uri":"/vmware/#安装后的工作"}]