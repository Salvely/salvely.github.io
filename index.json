[{"categories":["算法"],"content":" 1 题目背景国际乒联现在主席沙拉拉自从上任以来就立志于推行一系列改革，以推动乒乓球运动在全球的普及。其中 11 分制改革引起了很大的争议，有一部分球员因为无法适应新规则只能选择退役。华华就是其中一位，他退役之后走上了乒乓球研究工作，意图弄明白 11 分制和 21 分制对选手的不同影响。在开展他的研究之前，他首先需要对他多年比赛的统计数据进行一些分析，所以需要你的帮忙。 ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:1:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#题目背景"},{"categories":["算法"],"content":" 2 题目描述华华通过以下方式进行分析，首先将比赛每个球的胜负列成一张表，然后分别计算在 11 分制和 21 分制下，双方的比赛结果（截至记录末尾）。 比如现在有这么一份记录，（其中 W 表示华华获得一分，L 表示华华对手获得一分）： text WWWWWWWWWWWWWWWWWWWWWWLW 在 11 分制下，此时比赛的结果是华华第一局 11 比 0 获胜，第二局 11 比 0 获胜，正在进行第三局，当前比分 1 比 1。而在 21 分制下，此时比赛结果是华华第一局 21 比 0 获胜，正在进行第二局，比分 2 比 1。如果一局比赛刚开始，则此时比分为 0 比 0。直到分差大于或者等于 2，才一局结束。 注意：当一局比赛结束后，下一局立刻开始。 你的程序就是要对于一系列比赛信息的输入（WL 形式），输出正确的结果。 ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:2:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#题目描述"},{"categories":["算法"],"content":" 3 输入格式每个输入文件包含若干行字符串，字符串由大写的 W 、 L 和 E 组成。其中 E 表示比赛信息结束，程序应该忽略 E 之后的所有内容。 ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:3:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#输入格式"},{"categories":["算法"],"content":" 4 输出格式输出由两部分组成，每部分有若干行，每一行对应一局比赛的比分（按比赛信息输入顺序）。其中第一部分是 11 分制下的结果，第二部分是 21 分制下的结果，两部分之间由一个空行分隔。 ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:4:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#输出格式"},{"categories":["算法"],"content":" 5 输入输出样例输入 text WWWWWWWWWWWWWWWWWWWW WWLWE 输出 text 11:0 11:0 1:1 21:0 2:1 ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:5:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#输入输出样例"},{"categories":["算法"],"content":" 6 说明/提示每行至多 25 个字母，最多有 2500 行。 （注：事实上有一个测试点有 2501 行数据。） 【题目来源】 NOIP 2003 普及组第一题 ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:6:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#说明提示"},{"categories":["算法"],"content":" 7 最开始的思路这是一道模拟题，其主要的思路是模拟两个人比分。我的思路是： 逐个字符读取获取到的字符串，如果遇到\\n就跳过不读，读到E就停止。 将E添加到读取的字符串末尾，用来表征结束。 接下来分别按照11分制和21分制来进行模拟，中间输出比分。如果读到E，或者两位同学分差大于等于2分且至少一位同学达到11/21分，就打印当前比分，并且把两位同学比分置0。如果读到的是W，第一位同学加一分。如果读到的是L，第二位同学加一分。 在两轮模拟中间加一行空行。 ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:7:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#最开始的思路"},{"categories":["算法"],"content":" 8 遇到的问题 在获取输入时，不仅是\\n需要忽略掉，\\r和' '也需要忽略掉。否则会读入多余的字符（这里我大意了，一开始只忽略了\\n，没有考虑其他的多余字符） 可能读到E的时候刚好一局比完，这时候仍然要输出0:0（这个点很坑）。因此读到E和一局比完的情况需要分开考虑。 在进行\u0026\u0026和||判断时需要加上括号，保证优先级。 在第二次模拟开始前，需要将两人的分数重新置0 最后要输出一行空行 ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:8:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#遇到的问题"},{"categories":["算法"],"content":" 9 正确实现 cpp #include \u003ciostream\u003e using namespace std; int main(void) { string game; char ch; while((ch = getchar()) != 'E') { if(ch != 13 \u0026\u0026 ch != ' ' \u0026\u0026 ch != 10) game += ch; } game += 'E'; int Wp = 0; int Lp = 0; for(char ch: game) { if((abs(Wp-Lp) \u003e= 2 \u0026\u0026 (Wp \u003e= 11 || Lp \u003e= 11))) { cout \u003c\u003c Wp \u003c\u003c \":\" \u003c\u003c Lp \u003c\u003c endl; Wp = 0; Lp = 0; } if(ch == 'E') { cout \u003c\u003c Wp \u003c\u003c \":\" \u003c\u003c Lp \u003c\u003c endl; break; } if(ch == 'W') { Wp += 1; } else { Lp += 1; } } cout \u003c\u003c endl; Wp = 0; Lp = 0; for(char ch: game) { if(((abs(Wp-Lp) \u003e= 2) \u0026\u0026 (Wp \u003e= 21 || Lp \u003e= 21))) { cout \u003c\u003c Wp \u003c\u003c \":\" \u003c\u003c Lp \u003c\u003c endl; Wp = 0; Lp = 0; } if(ch == 'E') { cout \u003c\u003c Wp \u003c\u003c \":\" \u003c\u003c Lp \u003c\u003c endl; break; } if(ch == 'W') { Wp += 1; } else { Lp += 1; } } cout \u003c\u003c endl; return 0; } 成功！ ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:9:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#正确实现"},{"categories":["算法"],"content":" 10 总结该题提醒我们： 要谨慎考虑输入的方式和输入的字符串，在输入时要处理掉一切可能的多余字符； 要考虑到所有的corner case，谨慎读题； 在多个判断时最好加上括号，保证优先级； 多次模拟中间变量要置0； 确保输出格式正确，换行和空行的数目正确； ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:10:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#总结"},{"categories":["算法"],"content":" 11 深基参考题解《深基》上给了一个版本的答案，但是我用其中一个测试点跑了，发现这个答案是通不过测试的。所以摆在这里仅供参考。 cpp #include \u003ciostream\u003e #include \u003ccmath\u003e using namespace std; int f[2] = {11,21}; // 将两轮分制 int a[25 * 2500 + 10], n = 0; int main() { char tmp; freopen(\"1.in\",\"r\",stdin); freopen(\"1.out\",\"w\",stdout); while(1) { cin \u003e\u003e tmp; if(tmp == 'E') break; else if(tmp == 'W') a[n++] = 1; else if(tmp == 'L') a[n++] = 0; } for(int k = 0; k \u003c 2; k++) { int w = 0, l = 0; for(int i = 0; i \u003c n; i++) { w += a[i]; l += l - a[i]; if((max(w,l) \u003e= f[k]) \u0026\u0026 abs(w-l) \u003e= 2) { cout \u003c\u003c w \u003c\u003c \":\" \u003c\u003c l \u003c\u003c endl; w = l = 0; } } cout \u003c\u003c w \u003c\u003c \":\" \u003c\u003c l \u003c\u003c endl; cout \u003c\u003c endl; } return 0; } ","date":"2025-03-17","objectID":"/%E4%B9%92%E4%B9%93%E7%90%83/:11:0","series":["算法题解"],"tags":["模拟"],"title":"P1042 [NOIP 2003 普及组] 乒乓球","uri":"/%E4%B9%92%E4%B9%93%E7%90%83/#深基参考题解"},{"categories":["算法"],"content":" 1 题目描述高精度加法，相当于 a+b problem，不用考虑负数。 ","date":"2025-03-17","objectID":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/:1:0","series":["算法题解"],"tags":["高精度"],"title":"P1601 A+B Problem（高精）","uri":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/#题目描述"},{"categories":["算法"],"content":" 2 输入格式分两行输入。a,b≤10500。 ","date":"2025-03-17","objectID":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/:2:0","series":["算法题解"],"tags":["高精度"],"title":"P1601 A+B Problem（高精）","uri":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/#输入格式"},{"categories":["算法"],"content":" 3 输出格式输出只有一行，代表 a+b 的值。 ","date":"2025-03-17","objectID":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/:3:0","series":["算法题解"],"tags":["高精度"],"title":"P1601 A+B Problem（高精）","uri":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/#输出格式"},{"categories":["算法"],"content":" 4 输入输出样例输入 #1 text 1 1 输出 #1 text 2 输入 #2 text 1001 9099 输出 #2 text 10100 ","date":"2025-03-17","objectID":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/:4:0","series":["算法题解"],"tags":["高精度"],"title":"P1601 A+B Problem（高精）","uri":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/#输入输出样例"},{"categories":["算法"],"content":" 5 说明/提示20% 的测试数据，$0≤a,b≤10^{9}$； 40% 的测试数据，$0≤a,b≤10^{18}$。 ","date":"2025-03-17","objectID":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/:5:0","series":["算法题解"],"tags":["高精度"],"title":"P1601 A+B Problem（高精）","uri":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/#说明提示"},{"categories":["算法"],"content":" 6 思路 将两个长数字作为字符串读取，转化为数字后存在数组里 使用i和j记录两个字符串的长度，分3种情况讨论 将结果存在一个大数组里，用s_index追踪最后一位 用变量carry保存每次的进位 分3种情况讨论，从两个数对齐的最后一位开始向前计算。如果某个数字比另一个数字大，则用carry加上那个数字的最后一位，然后依次计算到最高位，总体算法和前面相同。 最后从最高位（s_index所在位开始向前输出），忽略掉前导0。如果结果本身就是0，s_index最后将等于-1，这样可以直接输出0。否则就从高位到低位依次输出。 ","date":"2025-03-17","objectID":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/:6:0","series":["算法题解"],"tags":["高精度"],"title":"P1601 A+B Problem（高精）","uri":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/#思路"},{"categories":["算法"],"content":" 7 Debug记录 sum数组一开始没有设0，下次每次在使用新的数组之前，一定要把数组置0，否则可能会影响后续的读取； 无论各位的和是否大于等于10，其carry都等于s / 10，这个是一定要计算的，否则可能出现上一次carry = 1，这次carry = 0，但是carry忘记了重新计算，导致把1加到了这一位； 最高位可能有进位，无论是否有，都要把该为设置p为carry。如果carry = 0，这个前导0会在后面打印时候忽略。这是一种统一处理的办法。 注意两个数都是0的情况，结果等于0，如果忽略这个0，就什么也打不出来。判断结果是否为0的条件是判断s_index是否递减到-1。 记得从高位往低位输出，顺序不要弄反了。 ","date":"2025-03-17","objectID":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/:7:0","series":["算法题解"],"tags":["高精度"],"title":"P1601 A+B Problem（高精）","uri":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/#debug记录"},{"categories":["算法"],"content":" 8 C++实现 cpp #include \u003ciostream\u003e #include \u003calgorithm\u003e using namespace std; int a1[500],a2[500]; int main(void) { // freopen(\"4.in\",\"r\",stdin); // freopen(\"4.out\",\"w\",stdout); string s1,s2; cin \u003e\u003e s1 \u003e\u003e s2; int i = 0; for(char ch:s1) { a1[i] = ch - '0'; i++; } int j = 0; for(char ch:s2) { a2[j] = ch - '0'; j++; } int sum[1000]; for(int i = 0; i \u003c 1000; i++) sum[i] = 0; int s_index = 0; int carry = 0; if(i == j) { for(int k = j-1; k \u003e= 0; k--) { int s = carry + a1[k] + a2[k]; carry = s / 10; s = s % 10; sum[s_index] = s; s_index ++; } sum[s_index] = carry; } else if(i \u003c j) { for(int k = 1; k \u003c= i; k++) { int a1_index = i - k; int a2_index = j - k; int s = carry + a1[a1_index] + a2[a2_index]; carry = s / 10; s = s % 10; sum[s_index] = s; s_index ++; } for(int k = j-i-1; k \u003e= 0; k--) { int s = carry + a2[k]; carry = s / 10; s = s % 10; sum[s_index] = s; s_index ++; } sum[s_index] = carry; } else { for(int k = 1; k \u003c= j; k++) { int a1_index = i - k; int a2_index = j - k; int s = carry + a1[a1_index] + a2[a2_index]; carry = s / 10; s = s % 10; sum[s_index] = s; s_index ++; } for(int k = i - j1; k \u003e= 0; k--) { int s = carry + a1[k]; carry = s / 10; s = s % 10; sum[s_index] = s; s_index ++; } sum[s_index] = carry; } while(sum[s_index] == 0) { s_index --;} if(s_index \u003c 0) { cout \u003c\u003c 0 \u003c\u003c endl; return 0; } for(int i = s_index; i \u003e= 0; i--) { cout \u003c\u003c sum[i]; } cout \u003c\u003c endl; return 0; } ","date":"2025-03-17","objectID":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/:8:0","series":["算法题解"],"tags":["高精度"],"title":"P1601 A+B Problem（高精）","uri":"/p1601-a-b-problem%E9%AB%98%E7%B2%BE/#c实现"},{"categories":["算法"],"content":" 1 题目描述给定一个集合 $s$（集合元素数量 ≤30），求出此集合所有子集元素之和。 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:1:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#题目描述"},{"categories":["算法"],"content":" 2 输入格式集合中的元素（元素 ≤1000） ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:2:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#输入格式"},{"categories":["算法"],"content":" 3 输出格式$s$ 所有子集元素之和。 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:3:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#输出格式"},{"categories":["算法"],"content":" 4 输入输出样例输入 text 2 3 输出 text 10 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:4:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#输入输出样例"},{"categories":["算法"],"content":" 5 说明/提示","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:5:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#说明提示"},{"categories":["算法"],"content":" 6 题目描述给定一个集合 $s$（集合元素数量 ≤30），求出此集合所有子集元素之和。 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:6:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#题目描述-1"},{"categories":["算法"],"content":" 7 输入格式集合中的元素（元素 ≤1000） ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:7:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#输入格式-1"},{"categories":["算法"],"content":" 8 输出格式$s$ 所有子集元素之和。 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:8:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#输出格式-1"},{"categories":["算法"],"content":" 9 输入输出样例输入 text 2 3 输出 text 10 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:9:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#输入输出样例-1"},{"categories":["算法"],"content":" 10 说明/提示【样例解释】 text 子集为：∅,{2},{3},{2,3}，和为 2+3+2+3=10。 【数据范围】 对于 100% 的数据，$1 \\le \\vert s∣\\le 30$，$1≤s_{i}​≤1000$，s 所有子集元素之和 ≤$10^{18}$。 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:10:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#说明提示-1"},{"categories":["算法"],"content":" 11 最开始的思路我一开始想到的是，使用递归实现。以前在做幂集相关题目的时候，首要的方法是考虑这个元素在集合内，或者不在集合内，进行两种递归，然后返回最终的幂集。但是问题是，当时我们返回的是一个子集的集合，然而现在我们需要返回所有子集中的元素的和。我们当然可以分2种情况，但是我们并不知道在没有加入当前元素时，集合中有多少子集，因此也就无法对每个子集分加入该元素和不加该元素进行讨论。如果要这么做的话，我们需要一个变长的多维度的数组，而且在这种前提下还只能求出幂集。对于幂集内的所有元素求和，还需要进一步的对多维数组进行操作。如果使用C++的话，这样显然是过于繁杂了。虽然说使用Python的话，我们可以很容易的构造这样的多层list，然后用for in语句进行递归。但是现在使用的是C++，所以用多维数组先求幂集再求和这条路，行不通。在满腹疑惑之下，我看了题解，恍然大悟。 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:11:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#最开始的思路"},{"categories":["算法"],"content":" 12 题解的算法首先我们考虑子集的构造过程。每个元素在或不在这个子集中，我们有$n$个元素，因此有$2^n$个子集。那么每个元素会出现在一半数目的子集中（因为出现和不出现的概率是均等的），因此对于每个元素，它会出现在$2^{n-1}$个子集当中。 若输入元素为$a_{i}$，那么$a_{i}$出现在$2^{n-1}$个子集当中。而现在有$n$个元素，它们每个都出现在$2^{n-1}$个子集中，因此子集的元素之和就等于所有元素之和乘上$2^{n-1}$。妙哉！ ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:12:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#题解的算法"},{"categories":["算法"],"content":" 13 C++语言初步实现有了思路，我们现在开始使用C++实现这个算法。实现如下： cpp #include \u003ciostream\u003e #include \u003csstream\u003e #include \u003ccmath\u003e using namespace std; int main(void) { int a[30]; for(int i = 0; i \u003c 30; i++) { a[i] = 0; } string line; getline(cin,line); istringstream is(line); string num; int count = 0; int sum = 0; while(is \u003e\u003e num) { a[count] = stoi(num); sum += a[count]; count++; } cout \u003c\u003c sum * pow(2,count-1) \u003c\u003c endl; return 0; } 可是测试出来是2个WA和3个AC，欸，为什么？ ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:13:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#c语言初步实现"},{"categories":["算法"],"content":" 14 警惕！我们发现两个可疑点： 我们使用int类型来存储sum，范围会不会超？ sum * pow(2,count-1)直接打出来的是科学输入法的值，而我们需要一个确切的整数值。 因此可以做如下修改： 将int类型修改为long long 添加sum *= pow(2,count-1)，然后再使用cout打印sum ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:14:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#警惕"},{"categories":["算法"],"content":" 15 正确实现 cpp #include \u003ciostream\u003e #include \u003csstream\u003e #include \u003ccmath\u003e using namespace std; int main(void) { int a[30]; for(int i = 0; i \u003c 30; i++) { a[i] = 0; } string line; getline(cin,line); istringstream is(line); string num; int count = 0; long long sum = 0; while(is \u003e\u003e num) { a[count] = stoi(num); sum += a[count]; count++; } sum *= pow(2,count-1); cout \u003c\u003c sum \u003c\u003c endl; return 0; } 成功！ ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:15:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#正确实现"},{"categories":["算法"],"content":" 16 总结该题提醒我们： 在递归时要想清楚这个递归到底返回的是什么东西，递归的格式和base case要搞清楚 存储大数要使用long long cout如果直接输出大数，会打出科学输入法的值，因此要先用变量存储，再打印出来就可以啦！ 【样例解释】 text 子集为：∅,{2},{3},{2,3}，和为 2+3+2+3=10。 【数据范围】 对于 100% 的数据，$1 \\le \\vert s∣\\le 30$，$1≤s_{i}​≤1000$，s 所有子集元素之和 ≤$10^{18}$。 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:16:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#总结"},{"categories":["算法"],"content":" 17 最开始的思路我一开始想到的是，使用递归实现。以前在做幂集相关题目的时候，首要的方法是考虑这个元素在集合内，或者不在集合内，进行两种递归，然后返回最终的幂集。但是问题是，当时我们返回的是一个子集的集合，然而现在我们需要返回所有子集中的元素的和。我们当然可以分2种情况，但是我们并不知道在没有加入当前元素时，集合中有多少子集，因此也就无法对每个子集分加入该元素和不加该元素进行讨论。如果要这么做的话，我们需要一个变长的多维度的数组，而且在这种前提下还只能求出幂集。对于幂集内的所有元素求和，还需要进一步的对多维数组进行操作。如果使用C++的话，这样显然是过于繁杂了。虽然说使用Python的话，我们可以很容易的构造这样的多层list，然后用for in语句进行递归。但是现在使用的是C++，所以用多维数组先求幂集再求和这条路，行不通。在满腹疑惑之下，我看了题解，恍然大悟。 ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:17:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#最开始的思路-1"},{"categories":["算法"],"content":" 18 题解的算法首先我们考虑子集的构造过程。每个元素在或不在这个子集中，我们有$n$个元素，因此有$2^n$个子集。那么每个元素会出现在一半数目的子集中（因为出现和不出现的概率是均等的），因此对于每个元素，它会出现在$2^{n-1}$个子集当中。 若输入元素为$a_{i}$，那么$a_{i}$出现在$2^{n-1}$个子集当中。而现在有$n$个元素，它们每个都出现在$2^{n-1}$个子集中，因此子集的元素之和就等于所有元素之和乘上$2^{n-1}$。妙哉！ ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:18:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#题解的算法-1"},{"categories":["算法"],"content":" 19 C++语言初步实现有了思路，我们现在开始使用C++实现这个算法。实现如下： cpp #include \u003ciostream\u003e #include \u003csstream\u003e #include \u003ccmath\u003e using namespace std; int main(void) { int a[30]; for(int i = 0; i \u003c 30; i++) { a[i] = 0; } string line; getline(cin,line); istringstream is(line); string num; int count = 0; int sum = 0; while(is \u003e\u003e num) { a[count] = stoi(num); sum += a[count]; count++; } cout \u003c\u003c sum * pow(2,count-1) \u003c\u003c endl; return 0; } 可是测试出来是2个WA和3个AC，欸，为什么？ ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:19:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#c语言初步实现-1"},{"categories":["算法"],"content":" 20 警惕！我们发现两个可疑点： 我们使用int类型来存储sum，范围会不会超？ sum * pow(2,count-1)直接打出来的是科学输入法的值，而我们需要一个确切的整数值。 因此可以做如下修改： 将int类型修改为long long 添加sum *= pow(2,count-1)，然后再使用cout打印sum ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:20:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#警惕-1"},{"categories":["算法"],"content":" 21 正确实现 cpp #include \u003ciostream\u003e #include \u003csstream\u003e #include \u003ccmath\u003e using namespace std; int main(void) { int a[30]; for(int i = 0; i \u003c 30; i++) { a[i] = 0; } string line; getline(cin,line); istringstream is(line); string num; int count = 0; long long sum = 0; while(is \u003e\u003e num) { a[count] = stoi(num); sum += a[count]; count++; } sum *= pow(2,count-1); cout \u003c\u003c sum \u003c\u003c endl; return 0; } 成功！ ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:21:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#正确实现-1"},{"categories":["算法"],"content":" 22 总结该题提醒我们： 在递归时要想清楚这个递归到底返回的是什么东西，递归的格式和base case要搞清楚 存储大数要使用long long cout如果直接输出大数，会打出科学输入法的值，因此要先用变量存储，再打印出来就可以啦！ ","date":"2025-03-17","objectID":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/:22:0","series":["算法题解"],"tags":["递归"],"title":"P2415：集合求和","uri":"/%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C/#总结-1"},{"categories":null,"content":"记录本人2025年3月第四周的一些任务、心情、总结","date":"2025-03-17","objectID":"/2025%E5%B9%B43%E6%9C%88%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%AE%B0%E5%BD%95/","series":["记录"],"tags":null,"title":"2025年3月第四周记录","uri":"/2025%E5%B9%B43%E6%9C%88%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":" 1 2025-03-17 在过去几年内，我深受消化不良的困扰。每次吃完了饭，肚子都涨的叫人呼吸喘不来气。因为肥胖，每每运动都累的不行，最后减肥收效甚微。因为长期不消化， 学习和生活都受到了干扰。整个人长期无力，维生素D都被脂肪吸收了个干净。我一定要击败你！消！化！不！良！ 实在是喘不上气，必须得运动运动了。唉，怎么减个肥这么难啊。我一个黄花大闺女，怎么跟金胖子一个肚子啊。阿西吧。 T25一套做完 ✅ 2025-03-17 感觉消化一些了，可能确实像我妈妈所说的，我心理素质太差了，很多消化不良都是情绪问题，只要解决了情绪问题，什么都好说了。 感觉可能自己需要调整一下心态，不应该把工作学习任务当成负担，而是应该当作自己成长的阶梯。不管是不是有考核，都应该全力以赴去准备，无问西东。加油吧！如果把任务全部完成，我会变得更好，加油！ 我好感谢，我有徐明睿、有罗天笑、有诗诗微微、有爸爸妈妈、有小卉姐姐、有张俊老师。我爱他们。他们是我最好的朋友和家人。我一辈子都喜欢他们。 今天尽可能多的完成任务，早干完早轻松。 今天晚上10点照常睡觉，明天早上6点起床继续完成任务。 我发现我每天中午午饭后容易困倦，那么我应该中午睡一觉，然后完成健身任务，下午再继续完成任务，效率会更高。（发现自己的精力规律啦） 中午睡一觉以后，真的精神不错，而且只睡了一个小时，今天起来就没有头晕，继续保持！ ","date":"2025-03-17","objectID":"/2025%E5%B9%B43%E6%9C%88%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%AE%B0%E5%BD%95/:1:0","series":["记录"],"tags":null,"title":"2025年3月第四周记录","uri":"/2025%E5%B9%B43%E6%9C%88%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%AE%B0%E5%BD%95/#2025-03-17"},{"categories":null,"content":" 2 2025-03-18 有了博客以后，更喜欢写东西了，可以一直分享，很开心。 经过了一个上午的运转，现在是休息晒太阳时刻！去户外晒个太阳吧！ 吃午饭 ✅ 2025-03-18 下楼散步2圈 ✅ 2025-03-18 然后1点钟的时候上来睡一觉 ✅ 2025-03-18 起来完成T25健身操一套 ✅ 2025-03-18 洗个澡，换个衣服，喝点水 ✅ 2025-03-18 cmake这东西好像一段时间不用，就忘记怎么写了，见鬼，之前花了那么多时间掌握它 倒腾出新的博客界面（带任务列表、CS学习进度、周记等界面） 倒腾出博客的周记 ✅ 2025-03-18 成功编译ModernCppStarter模板 在ModernCppStarter模板中实现List和list的两个实现 记录ModernCppStarter的折腾过程 ","date":"2025-03-17","objectID":"/2025%E5%B9%B43%E6%9C%88%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%AE%B0%E5%BD%95/:2:0","series":["记录"],"tags":null,"title":"2025年3月第四周记录","uri":"/2025%E5%B9%B43%E6%9C%88%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%AE%B0%E5%BD%95/#2025-03-18"},{"categories":null,"content":"本人过去二十年抽象行为集锦","date":"2025-01-24","objectID":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/","series":["记录"],"tags":["抽象"],"title":"我的抽象人生","uri":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/"},{"categories":null,"content":"今天在和超理群友聊天之时，发现自己过往抽象行为众多。下面进行一个汇总，以供娱乐。 ","date":"2025-01-24","objectID":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/:0:0","series":["记录"],"tags":["抽象"],"title":"我的抽象人生","uri":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/#"},{"categories":null,"content":" 1 幼儿园时期 幼儿园胖老师让小朋友们准备一条毛巾去学校。因为不知道毛巾带多大的，我带了一条浴巾，并且骄傲的向老师展示，喜提一通骂。 上学迟到了，没有做早操，于是老实的站在教室中间等待老师回来，并且大声向老师报告自己没有做早操，喜提一通骂。 因为认为妈妈给我穿的紧身外裤不算裤子，于是崩溃大哭，并且在别人问我为什么哭的时候，告诉别人是因为我没有穿裤子，遭遇他人的疑惑眼神。 幼儿园胖老师让小朋友们带一只中性笔去学校，以便上课研究。我带了笔，并且为了向老师展示我对笔的研究颇有兴趣，当着老师的面把那支笔给拆了。喜提一通骂，并且老师要求我当场把笔装回去。因为不知道弹簧装在哪里，当场急哭。 因为惧怕幼儿园胖老师，经常不敢去上厕所，导致拉屎拉在裤子里。 在画画时将近处的人物画的小，将远处的人物画的大。近处的人物站在地上，远处的人物飞在天上。但是没画地平线，画出来的效果喜人。遭到小朋友们嘲笑，但是有一位温柔贴心的大姐姐老师让其他小朋友不要笑话我，并且为我补上了地平线。 ","date":"2025-01-24","objectID":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/:1:0","series":["记录"],"tags":["抽象"],"title":"我的抽象人生","uri":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/#幼儿园时期"},{"categories":null,"content":" 2 小学时期 一年级时期不知道买东西吃是要花钱的。有一次看到同学在一个小卖部门口跟小卖部老板说了什么，老板就给了他吃的。于是我也跑过去，老板问我要什么，我说我要跟他一样的。老板让我给钱，我说我没有钱。老板说没钱你来干什么。 一年级上英语课时，老师考察单词的含义，我在老师提问时，把书打开向老师展示单词在书的这里，喜提一通骂。 二年级时期因为沉迷偷菜，拿着妈妈的号把列表偷了个遍。因为羡慕大家都有尊贵的红土地，我只有普通土地，因此我经常使用一键偷菜金手套进行作业，并且在一键偷菜后使用一键放虫，对他人菜地进行偷袭（我已经严肃的悔过了我的问题，对他人的菜地进行放虫行为是不对的）有天晚上班主任找上我，使用审讯一般的语气，严肃的问我是不是打了游戏。我大为惊讶，我偷菜的事情竟然被她知道了。班主任而后又问我是不是在游戏里花了钱，我想起来确实是在游戏里花钱买了看门狗和狗粮，于是本着诚实的原则，我告诉她确实花了钱。班主任认定我是个网瘾少女，花了一个多小时对我进行严肃的思想教育，并且让我保证再也不打游戏。第二天语文课被她点起来读《竹里馆》，因为把\"明月来相照\"读成了\"明月来照相\"，班主任勃然大怒，告诉大家要是当网瘾少女就会变成我这个样子。 二年级学习拉丁舞，结果因为肢体不柔美，被人吐槽跳舞像僵尸，从此拒绝舞蹈节目。 二年级看同学们都上了奥数班，我也跟着报了奥数班。但是课后作业一题也做不出来，并且不能理解牛为什么一定要一边吃草一边拉，水池为什么要一边抽水一边排。期末考试拼尽全力才59分，同学悠然自得97，遂对数学产生了蜜汁恐惧。 二年级因为不会盲打，在信息课和同学进行金山打字生死时速竞赛时屡屡被人捉拿。母亲遂教我盲打，习得盲打技能后，回校在信息课上到处找人打生死时速，练的一手好手速。四年级被老师选中参加盲打比赛，被田忌赛马虐成狗。 四年级在母亲的带领下逃了期中考试，去了海南旅游七天，回学校后喜提课上罚站。 四年级因为使用电脑以及玩暴力摩托，再次被班主任当成网瘾少女，称我屡教不改。开团体大会称禁止在打暴力游戏，禁止在游戏里充钱。 因为经常在校门口偷吃路边摊，被班干部举报，因此被班主任捉拿。因为班主任多次让我们\"犯事\"的同学做相关的小报，但是美术水平堪忧，发现用word中的文本框做起来非常省事。于是习得了用word做小报的好本领，半个小时能用word做出一张小报。 四年级班主任对我的评语就是会打游戏，爱找人说话，人较为诚实。 五年级时特别喜欢找人聊天，但是他们每次和我聊天以后就告发我，说我到处找人说话，因此本人非常郁闷。 ","date":"2025-01-24","objectID":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/:2:0","series":["记录"],"tags":["抽象"],"title":"我的抽象人生","uri":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/#小学时期"},{"categories":null,"content":" 3 中学时期 在电视上看到播放张国荣恐怖片片段，里面有一个女生在叫，我非常害怕，于是为了避免恐惧，我就叫的比那个女生声音还大，惊扰了我正在浴室快乐洗浴的老娘，老娘骂骂咧咧的出来给我换了台，遂停止尖叫。 喜欢在观看恐怖片段时播放费玉清的《一剪梅》作为配乐，来减少恐惧。 因和同学在语文课上讨论呼伦贝尔大草原的虫子，老师认为我俩的关系过于亲密，因此把我俩调开了。 因为看了《破冰行动》，觉得任达华演的外线很帅，妈妈说我净喜欢老男人，教导我以后找对象，别给她找个老头回来。看了《头号玩家》，觉得头号玩家的男主帅，结果好朋友说头号玩家的男主是他见过最丑的男主。我觉得帅的无一例外都被说长得丑。 ","date":"2025-01-24","objectID":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/:3:0","series":["记录"],"tags":["抽象"],"title":"我的抽象人生","uri":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/#中学时期"},{"categories":null,"content":" 4 大学时期 因为个性较为独立，走路速度较快，拒绝参加奇葩集体活动。班干部们在大会上严肃的讨论了我的问题，称我走路速度过快，同学们都追不上我，因此难以和我亲近。 因为拒绝班干部提出的站着早读英语，于是带了一本同济大学《高等数学》大声朗读。 因为本科不让带电脑，经常偷偷背着巨大的背包到图书馆找犄角旮瘩的地方学计算机，在同学问起包为什么鼓起这么大时，只能说用功读书。 在英语课编排小品时准备预设一个送孩子上学的妈妈，但是对话写的是我需要问别人孩子学校在哪，遭到了英语老师无情的嘲笑。 在照片都没看过的情况下，网恋一个重庆大学学长一年，结果被人突然拉黑，在连续的邮件追问下，学长绷不住了，告知我他有个几年的女朋友，我成了小丑了。 因为时常在背着电脑在教学楼找空教室自习，被同学当成背着电脑包在教学楼随机游走的怪人。室友经常好奇我会找什么样的男朋友，要求我如果找了男朋友，一定要给她看看。 ","date":"2025-01-24","objectID":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/:4:0","series":["记录"],"tags":["抽象"],"title":"我的抽象人生","uri":"/%E6%88%91%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%BA%E7%94%9F/#大学时期"},{"categories":["数学"],"content":"记录我从数学分析开始的刷书记录","date":"2025-01-23","objectID":"/math-journey/","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/"},{"categories":["数学"],"content":" 于是余有叹焉。古人之观于天地、山川、草木、虫鱼、鸟兽，往往有得，以其求思之深而无不在也。夫夷以近，则游者众；险以远，则至者少。而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。有志矣，不随以止也，然力不足者，亦不能至也。有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也。然力足以至焉，于人为可讥，而在己为有悔；尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？此余之所得也！—— （宋）王安石《游褒禅山记》 ","date":"2025-01-23","objectID":"/math-journey/:0:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#"},{"categories":["数学"],"content":" 1 数学分析 Book of proof ✅ 2025-01-23 《陶哲轩实分析》 普林斯顿数学分析读本 Rudin 数学分析原理 哈代纯数学教程 菲赫金哥尔茨《微积分学教程》 吉米多维奇习题集 卓里奇《数学分析》 裴里文《数学分析中的典型问题与方法》 apostol Calculus apostol《数学分析》 龚昇《简明微积分》 小平邦彦《微积分入门》 高木贞治《数学分析概论》 张筑生《数学分析新讲》 辛钦《数学分析八讲》 辛钦《数学分析简明教程》 A Course of Pure Mathematics by G. H. Hardy 科朗《微积分和数学分析引论》 P.D.Lax 的《微积分及其应用》和《多元微积分及其应用》 Spivak 微积分 Calculus: One-variable calculus, with an introduction to linear algebra（apostol卷1） Calculus: Multi-variable calculus and linear algebra, with applications to differential equations and probability（apostol卷2）（学完以后线代、常微分方程和概率论都过了一遍了） Loomis 高等微积分 Understanding Real Analysis Abbott Elementary Analysis: The Theory of Calculus (Undergraduate Texts in Mathematics): Ross, Kenneth A.: 9781441928115: Amazon.com: Books Multidimensional Real Analysis I (豆瓣) (douban.com) Princeton Lectures in Analysis (douban.com) Problems in Mathematical Analysis (Pure and Applied Mathematics) 数学分析基础浅导 (豆瓣) (douban.com) A Course of Modern Analysis (Cambridge Mathematical Library) (豆瓣) (douban.com) A Course in Mathematical Analysis Volume 2 (豆瓣) (douban.com) Mathematical Analysis Apostol 《Mathematical Analysis》 Spivak 数学分析 《数学分析教程》常庚哲史济怀 卓里奇《数学分析》 数学分析中的问题与反例 汪林 《数学分析概论（岩波定本） (豆瓣) (douban.com)）》高木贞治 高等微积分（第 3 版修订版） (豆瓣) (douban.com) 微分学 (豆瓣) (douban.com) Analysis I (豆瓣) (douban.com) Analysis II (豆瓣) (douban.com) Analysis III (豆瓣) (douban.com) [Mathematical Analysis (豆瓣) (douban.com)](https://book.douban.com/subject/1459633/ 法国 Dieudonne 现代分析基础 清华实验班于品分析讲义 Roger Godement 分析 I Roger Godement 分析 II 阿黑波夫《数学分析讲义》 James R. Munkres 《Analysis on Manifolds (豆瓣) (douban.com)》 Spivak 《流形上的微积分》 Manfredo Do Carmo 《曲线与曲面上的微分几何》 Б. А. 杜布洛文 / С. П. 诺维可夫 / А. Т. 福明柯 《现代几何学：方法与应用（第三卷） (豆瓣) (douban.com)》 微分几何基础 (豆瓣) (douban.com) 现代几何学方法和应用 (豆瓣) (douban.com) 高等微积分 (豆瓣) (douban.com) 陈天权《数学分析讲义》 华罗庚《高等数学引论》 Elementary Real Analysis -Brain B. Thomson, Judith B. Bruckner, Andrew M. Bruckner Elementary Analysis 2nd (豆瓣) (douban.com) Real Analysis (豆瓣) (douban.com) Mathematical Analysis - Andrew Browder Second Year Calculus (豆瓣) (douban.com) Foundations of Analysis (豆瓣) (douban.com) 实分析 (豆瓣) (douban.com) Stein 分析 serge lang 的 undergraduate analysis 胡适耕\u003c数学分析原理与方法\u003e Patrick Fitzpatrick advanced calculus Basic Analysis 1-5 by James Peterson Introduction to Analysis (豆瓣) (douban.com) 谢慧民周民强徐森林 习题集 Introduction to Analysis (豆瓣) (douban.com) Tom M. Apostol—Mathematical Analysis 2e Wilfred Kaplan—Advanced Calculus Michael Spivak—Calculus, 4e Dieudonne《无穷小计算》 Dieudonne《现代分析基础》 Real Analysis Jay Cummings Problems and Theorems in Analysis II (豆瓣) (douban.com) Elementary Analysis 2nd (豆瓣) (douban.com) 曲线与曲面的微分几何 (豆瓣) (douban.com) 实分析 (豆瓣) (douban.com) Real Mathematical Analysis (豆瓣) (douban.com) The Way of Analysis (豆瓣) (douban.com) 《数学分析基础浅导》 Yet Another Introduction to Analysis - Bryant (1990) William R. Wade - Introduction to Analysis (2004) Robert G. Bartle - The Elements of Real Analysis, Second Edition (1976) Real Mathematical Analysis by Charles Chapman Pugh (2002) 齐民友《重温微积分》 梅加强《数学分析》 刘玉琏、傅沛仁《数学分析讲义》 伍胜健数学分析 简明数学分析 (豆瓣) (douban.com) 徐森林《数学分析》 崔尚斌《数学分析》 裴礼文《数学分析中的典型问题与方法》刷完 林源渠《数学分析习题集》 周民强《数学分析习题集》 徐森林《数学分析习题精解》 姚正安《数学分析方法论》 波利亚《数学分析中的问题和定理》 伯克利数学问题集（第 3 版） (豆瓣) (douban.com) Problems and Theorems in Analysis II (豆瓣) (douban.com) 谢慧民习题集 ","date":"2025-01-23","objectID":"/math-journey/:1:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#数学分析"},{"categories":["数学"],"content":" 2 常微分方程","date":"2025-01-23","objectID":"/math-journey/:2:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#常微分方程"},{"categories":["数学"],"content":" 3 概率论与数理统计 MIT 《概率导论》 卯诗松《概率论与数理统计》+习题完成 陈希孺《概率论与数理统计》 Statistical inference ","date":"2025-01-23","objectID":"/math-journey/:3:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#概率论与数理统计"},{"categories":["数学"],"content":" 4 线性代数","date":"2025-01-23","objectID":"/math-journey/:4:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#线性代数"},{"categories":["数学"],"content":" 5 高等代数 丘维生《高等代数》+习题指导 蓝以中《高等代数简明教程》 Linear Algebra done right Linear algebra done wrong ","date":"2025-01-23","objectID":"/math-journey/:5:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#高等代数"},{"categories":["数学"],"content":" 6 抽象代数 dummit abstract algebra ","date":"2025-01-23","objectID":"/math-journey/:6:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#抽象代数"},{"categories":["数学"],"content":" 7 代数学 Artin《代数》 科斯特利金《代数学引论》 ","date":"2025-01-23","objectID":"/math-journey/:7:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#代数学"},{"categories":["数学"],"content":" 8 数理逻辑","date":"2025-01-23","objectID":"/math-journey/:8:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#数理逻辑"},{"categories":["数学"],"content":" 9 拓扑学 Murkes 拓扑学 ","date":"2025-01-23","objectID":"/math-journey/:9:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#拓扑学"},{"categories":["数学"],"content":" 10 组合数学","date":"2025-01-23","objectID":"/math-journey/:10:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#组合数学"},{"categories":["数学"],"content":" 11 图论","date":"2025-01-23","objectID":"/math-journey/:11:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#图论"},{"categories":["数学"],"content":" 12 初等数论","date":"2025-01-23","objectID":"/math-journey/:12:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#初等数论"},{"categories":["数学"],"content":" 13 离散数学","date":"2025-01-23","objectID":"/math-journey/:13:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#离散数学"},{"categories":["数学"],"content":" 14 算法入门","date":"2025-01-23","objectID":"/math-journey/:14:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#算法入门"},{"categories":["数学"],"content":" 15 数据结构与算法分析","date":"2025-01-23","objectID":"/math-journey/:15:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#数据结构与算法分析"},{"categories":["数学"],"content":" 16 算法设计与分析","date":"2025-01-23","objectID":"/math-journey/:16:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#算法设计与分析"},{"categories":["数学"],"content":" 17 计算理论","date":"2025-01-23","objectID":"/math-journey/:17:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#计算理论"},{"categories":["数学"],"content":" 18 计算复杂性理论","date":"2025-01-23","objectID":"/math-journey/:18:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#计算复杂性理论"},{"categories":["数学"],"content":" 19 信息论与编码","date":"2025-01-23","objectID":"/math-journey/:19:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#信息论与编码"},{"categories":["数学"],"content":" 20 理论计算机导论","date":"2025-01-23","objectID":"/math-journey/:20:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#理论计算机导论"},{"categories":["数学"],"content":" 21 计算几何","date":"2025-01-23","objectID":"/math-journey/:21:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#计算几何"},{"categories":["数学"],"content":" 22 密码学","date":"2025-01-23","objectID":"/math-journey/:22:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#密码学"},{"categories":["数学"],"content":" 23 最优化方法","date":"2025-01-23","objectID":"/math-journey/:23:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#最优化方法"},{"categories":["数学"],"content":" 24 解析几何","date":"2025-01-23","objectID":"/math-journey/:24:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#解析几何"},{"categories":["数学"],"content":" 25 数值分析","date":"2025-01-23","objectID":"/math-journey/:25:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#数值分析"},{"categories":["数学"],"content":" 26 矩阵计算","date":"2025-01-23","objectID":"/math-journey/:26:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#矩阵计算"},{"categories":["数学"],"content":" 27 矩阵论 学到这里以后可以学习计算机，计算机内容学习完成后再来继续后面的纯数学习路径。 ","date":"2025-01-23","objectID":"/math-journey/:27:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#矩阵论"},{"categories":["数学"],"content":" 28 纯数学习路径","date":"2025-01-23","objectID":"/math-journey/:28:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#纯数学习路径"},{"categories":["数学"],"content":" 29 USTC数学修课指南第三版","date":"2025-01-23","objectID":"/math-journey/:29:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#ustc数学修课指南第三版"},{"categories":["数学"],"content":" 30 常用教科書列表與簡評 | 臺大數學系 (ntu.edu.tw)","date":"2025-01-23","objectID":"/math-journey/:30:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#常用教科書列表與簡評--臺大數學系-ntuedutw"},{"categories":["数学"],"content":" 31 MIT 数学学习路径","date":"2025-01-23","objectID":"/math-journey/:31:0","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#mit-数学学习路径"},{"categories":["数学"],"content":" 31.1 MIT 计算机数学 18.02 Multivariable Calculus 18.06 Linear Algebra 18.03 x Differential Equations 18.03 SC 18.034 Honor Differential Equations 18.065 Matrix Methods in Data Analysis, Signal Processing, and Machine Learning Signal Processing \u0026 Electronics 6.01 Intro to EECS I 6.00 Introduction to Computer Science and Programming 6.100 A Introduction to Computer Science Programming in Python 6.0002 Introduction to Computational Thinking and data Science 6.02 Intro to EECS II UCB EE 16 A UCB EE 16 B 6.002 Circuits and Electronics 6.003 Signals and Systems UCB EE 120 Signals and Systems mitmath/18065: 18.065/18.0651: Matrix Methods in Data Analysis, Signal Processing, and Machine Learning (github.com) 现代版 Notes 阅读 mitmath/18065: 18.065/18.0651: Matrix Methods in Data Analysis, Signal Processing, and Machine Learning (github.com) Problem Sets 完成 UCB Data 8 UCB Data 100 Harvard CS 109 A 18.05 Introduction to Probability and Statistics 6.3700 Introduction to Probability 6.3800 Introduction to Inference 18.05 Introduction to Probability and Statistics 18.600 Probability and Random Variables 18.650 Fundamentals of Statistics 6.042 J Mathematics for Computer Science Intro to Mathematical Reasoning Principles of discrete Applied mathematics 18.510 Introduction to Mathematical Logic and Set Theory 18.504 Seminar in Logic 18.515 Mathematical Logic 18.700 Advanced Linear Algebra 18.700 Course page (mit.edu) 现代版 Reading 完成并总结，总结见此 18.700 Course page (mit.edu) 现代版 Problem Sets 完成并总结，总结见此 Math 115A (ucla.edu) 陶哲轩亲授：linear-algebra-notes.pdf (wordpress.com) 18.303 Linear Partial Differential Equations: Analysis and Numerics 18.330 Introduction to Numerical Analysis 18.04 Complex Variables with applications 18.100A Real Analysis 18.100B Real Analysis 18.100P Real Analysis 18.100Q Real Analysis 18.S190 Introduction To Metric Spaces 或 18.S190, IAP 2023 (mit.edu) 18. S191 index — Interactive Computational Thinking — MIT 18.701 Algebra I 18.335[J] Introduction to Numerical Methods 6.7300[J] Introduction to Modeling and Simulation 16.920[J] Numerical Methods for Partial Differential Equations 18.085 Computational Science and Engineering I 18.336[J] Fast Methods for Partial Differential and Integral Equation 18. C 06 Linear Algebra and Optimization Linear Algebra and Optimization for Machine Learning 阅读 cis515-13-sl1-a.pdf (upenn.edu) Introduction to Applied Linear Algebra – Vectors, Matrices, and Least Squares (stanford.edu) 18.204 Undergraduate Seminar in Discrete Mathematics 18.211 Combinatorial Analysis 6.120A Discrete Mathematics and Proof for Computer Science 6.1210 Introduction to Algorithms 6.045 J Automata, Computability, and Complexity 18.400[J] Computability and Complexity Theory 18.404 Theory of Computation 18.410[J] Design and Analysis of Algorithms 18.424 Seminar in Information Theory 18.434 Seminar in Theoretical Computer Science 18.453 Combinatorial Optimization 18.337[J] Parallel Computing and Scientific Machine Learning 18.338 Eigenvalues of Random Matrices 18.367 Waves and Imaging University Physics 《University Physics》阅读并做笔记，笔记见此 Yale Fundamentals of physics I 学习 Yale Fundamentals of physics II 学习 Classical Mechanics 学习 Physics II: Electricity and Magnetism 学习 Relativity 学习 Physics III: Vibrations and Waves 18.415[J] Advanced Algorithms 18.416[J] Randomized Algorithms 18.425[J] Foundations of Cryptography 8.01 Physics I 8.02 Physics II 8.03 Physics III 8.04 Quantum Physics I 8.041 Quantum Physics I 8.05 Quantum Physics II 18.435[J] Quantum Computation 18.437[J] Distributed Algorithms 18.455 Advanced Combinatorial Optimization 18.702 Algebra II 18.703 Modern Algebra 18.783 Elliptic Curves 18.102 Introduction to Functional Analysis 18.112 Functions of a Complex Variable 18.303 Linear Partial Differential Equations 18.642 Topics in Mathematics with Applications in Finance 18.125 Measure Theory and Analysis 18.675 Theory of Probability 18.676 Stochastic Calculus 18.615 Introduction to Stochastic Processes 18.657 Topics in Statistics 18.9","date":"2025-01-23","objectID":"/math-journey/:31:1","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#mit-计算机数学"},{"categories":["数学"],"content":" 31.2 MIT 纯数部分 31.2.1 代数 18.704 Seminar in algebra 18.782 Introduction to Arithmetic Geometry 18.706 Noncommutative algebra 18.755 Lie Groups and Lie Algebras II 18.755 Lie Groups and Lie Algebras II 31.2.2 分析与几何 18.101 Analysis and Manifolds 18.102 Introduction to Functional Analysis 18.103 Fourier Analysis: Theory and Applications 18.104 Seminar in Analysis 18.112 Functions of a Complex variable 18.152 Introduction to Partial Differential Equations 18.950 Differential Geometry 18.994 Seminar in Geometry 18.125 Measure Theory and Analysis 18.155 Differential Analysis I 18.156 Differential Analysis II 18.952 Theory of Differential Forms 18.965 Geometry of Manifolds I 18.966 Geometry of Manifolds II 31.2.3 数论 18.781 Theory of numbers 18.784 Seminar in Number Theory 18.785 Number Theory I 31.2.4 概率与统计 18.677 Topics in Stochastic Processes 18.655 Mathematical Statistics 31.2.5 拓扑与几何 18.904 Seminar in Topology 18.116 Riemann Surfaces 18.905 Algebraic Topology I 18.906 Algebraic Topology II ","date":"2025-01-23","objectID":"/math-journey/:31:2","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#mit-纯数部分"},{"categories":["数学"],"content":" 31.2 MIT 纯数部分 31.2.1 代数 18.704 Seminar in algebra 18.782 Introduction to Arithmetic Geometry 18.706 Noncommutative algebra 18.755 Lie Groups and Lie Algebras II 18.755 Lie Groups and Lie Algebras II 31.2.2 分析与几何 18.101 Analysis and Manifolds 18.102 Introduction to Functional Analysis 18.103 Fourier Analysis: Theory and Applications 18.104 Seminar in Analysis 18.112 Functions of a Complex variable 18.152 Introduction to Partial Differential Equations 18.950 Differential Geometry 18.994 Seminar in Geometry 18.125 Measure Theory and Analysis 18.155 Differential Analysis I 18.156 Differential Analysis II 18.952 Theory of Differential Forms 18.965 Geometry of Manifolds I 18.966 Geometry of Manifolds II 31.2.3 数论 18.781 Theory of numbers 18.784 Seminar in Number Theory 18.785 Number Theory I 31.2.4 概率与统计 18.677 Topics in Stochastic Processes 18.655 Mathematical Statistics 31.2.5 拓扑与几何 18.904 Seminar in Topology 18.116 Riemann Surfaces 18.905 Algebraic Topology I 18.906 Algebraic Topology II ","date":"2025-01-23","objectID":"/math-journey/:31:2","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#代数"},{"categories":["数学"],"content":" 31.2 MIT 纯数部分 31.2.1 代数 18.704 Seminar in algebra 18.782 Introduction to Arithmetic Geometry 18.706 Noncommutative algebra 18.755 Lie Groups and Lie Algebras II 18.755 Lie Groups and Lie Algebras II 31.2.2 分析与几何 18.101 Analysis and Manifolds 18.102 Introduction to Functional Analysis 18.103 Fourier Analysis: Theory and Applications 18.104 Seminar in Analysis 18.112 Functions of a Complex variable 18.152 Introduction to Partial Differential Equations 18.950 Differential Geometry 18.994 Seminar in Geometry 18.125 Measure Theory and Analysis 18.155 Differential Analysis I 18.156 Differential Analysis II 18.952 Theory of Differential Forms 18.965 Geometry of Manifolds I 18.966 Geometry of Manifolds II 31.2.3 数论 18.781 Theory of numbers 18.784 Seminar in Number Theory 18.785 Number Theory I 31.2.4 概率与统计 18.677 Topics in Stochastic Processes 18.655 Mathematical Statistics 31.2.5 拓扑与几何 18.904 Seminar in Topology 18.116 Riemann Surfaces 18.905 Algebraic Topology I 18.906 Algebraic Topology II ","date":"2025-01-23","objectID":"/math-journey/:31:2","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#分析与几何"},{"categories":["数学"],"content":" 31.2 MIT 纯数部分 31.2.1 代数 18.704 Seminar in algebra 18.782 Introduction to Arithmetic Geometry 18.706 Noncommutative algebra 18.755 Lie Groups and Lie Algebras II 18.755 Lie Groups and Lie Algebras II 31.2.2 分析与几何 18.101 Analysis and Manifolds 18.102 Introduction to Functional Analysis 18.103 Fourier Analysis: Theory and Applications 18.104 Seminar in Analysis 18.112 Functions of a Complex variable 18.152 Introduction to Partial Differential Equations 18.950 Differential Geometry 18.994 Seminar in Geometry 18.125 Measure Theory and Analysis 18.155 Differential Analysis I 18.156 Differential Analysis II 18.952 Theory of Differential Forms 18.965 Geometry of Manifolds I 18.966 Geometry of Manifolds II 31.2.3 数论 18.781 Theory of numbers 18.784 Seminar in Number Theory 18.785 Number Theory I 31.2.4 概率与统计 18.677 Topics in Stochastic Processes 18.655 Mathematical Statistics 31.2.5 拓扑与几何 18.904 Seminar in Topology 18.116 Riemann Surfaces 18.905 Algebraic Topology I 18.906 Algebraic Topology II ","date":"2025-01-23","objectID":"/math-journey/:31:2","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#数论"},{"categories":["数学"],"content":" 31.2 MIT 纯数部分 31.2.1 代数 18.704 Seminar in algebra 18.782 Introduction to Arithmetic Geometry 18.706 Noncommutative algebra 18.755 Lie Groups and Lie Algebras II 18.755 Lie Groups and Lie Algebras II 31.2.2 分析与几何 18.101 Analysis and Manifolds 18.102 Introduction to Functional Analysis 18.103 Fourier Analysis: Theory and Applications 18.104 Seminar in Analysis 18.112 Functions of a Complex variable 18.152 Introduction to Partial Differential Equations 18.950 Differential Geometry 18.994 Seminar in Geometry 18.125 Measure Theory and Analysis 18.155 Differential Analysis I 18.156 Differential Analysis II 18.952 Theory of Differential Forms 18.965 Geometry of Manifolds I 18.966 Geometry of Manifolds II 31.2.3 数论 18.781 Theory of numbers 18.784 Seminar in Number Theory 18.785 Number Theory I 31.2.4 概率与统计 18.677 Topics in Stochastic Processes 18.655 Mathematical Statistics 31.2.5 拓扑与几何 18.904 Seminar in Topology 18.116 Riemann Surfaces 18.905 Algebraic Topology I 18.906 Algebraic Topology II ","date":"2025-01-23","objectID":"/math-journey/:31:2","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#概率与统计"},{"categories":["数学"],"content":" 31.2 MIT 纯数部分 31.2.1 代数 18.704 Seminar in algebra 18.782 Introduction to Arithmetic Geometry 18.706 Noncommutative algebra 18.755 Lie Groups and Lie Algebras II 18.755 Lie Groups and Lie Algebras II 31.2.2 分析与几何 18.101 Analysis and Manifolds 18.102 Introduction to Functional Analysis 18.103 Fourier Analysis: Theory and Applications 18.104 Seminar in Analysis 18.112 Functions of a Complex variable 18.152 Introduction to Partial Differential Equations 18.950 Differential Geometry 18.994 Seminar in Geometry 18.125 Measure Theory and Analysis 18.155 Differential Analysis I 18.156 Differential Analysis II 18.952 Theory of Differential Forms 18.965 Geometry of Manifolds I 18.966 Geometry of Manifolds II 31.2.3 数论 18.781 Theory of numbers 18.784 Seminar in Number Theory 18.785 Number Theory I 31.2.4 概率与统计 18.677 Topics in Stochastic Processes 18.655 Mathematical Statistics 31.2.5 拓扑与几何 18.904 Seminar in Topology 18.116 Riemann Surfaces 18.905 Algebraic Topology I 18.906 Algebraic Topology II ","date":"2025-01-23","objectID":"/math-journey/:31:2","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#拓扑与几何"},{"categories":["数学"],"content":" 31.3 MIT 其他方向应用数学 31.3.1 物理数学 18.300 Principles of Continuum Applied mathematics 18.352[J] Nonlinear Dynamics: The Natural Environment 18.353[J] Nonlinear Dynamics: Chaos 18.354[J] Nonlinear Dynamics: Continuum Systems 18.384 Undergraduate Seminar in Physical mathematics 18.417 Introduction to Computational Molecular Biology 18.305 Advanced Analytic Methods in Science and Engineering 18.306 Advanced Partial Differential Equations with Applications 2.25 Fluid Mechanics 12.800 Fluid Dynamics of the Atmosphere and Ocean 18.355 Fluid Mechanics 18.357 Interfacial Phenomena 18.367 Waves and Imaging 8.07 Electromagnetism II 18.369[J] Mathematical Methods in Nanophotonics 2.003[J] Dynamics and Control I 18.075 Methods for Scientists and Engineers 18.376[J] Wave Propagation 18.377[J] Nonlinear Dynamics and Waves ","date":"2025-01-23","objectID":"/math-journey/:31:3","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#mit-其他方向应用数学"},{"categories":["数学"],"content":" 31.3 MIT 其他方向应用数学 31.3.1 物理数学 18.300 Principles of Continuum Applied mathematics 18.352[J] Nonlinear Dynamics: The Natural Environment 18.353[J] Nonlinear Dynamics: Chaos 18.354[J] Nonlinear Dynamics: Continuum Systems 18.384 Undergraduate Seminar in Physical mathematics 18.417 Introduction to Computational Molecular Biology 18.305 Advanced Analytic Methods in Science and Engineering 18.306 Advanced Partial Differential Equations with Applications 2.25 Fluid Mechanics 12.800 Fluid Dynamics of the Atmosphere and Ocean 18.355 Fluid Mechanics 18.357 Interfacial Phenomena 18.367 Waves and Imaging 8.07 Electromagnetism II 18.369[J] Mathematical Methods in Nanophotonics 2.003[J] Dynamics and Control I 18.075 Methods for Scientists and Engineers 18.376[J] Wave Propagation 18.377[J] Nonlinear Dynamics and Waves ","date":"2025-01-23","objectID":"/math-journey/:31:3","series":null,"tags":["学习记录","数学"],"title":"我的数学之旅","uri":"/math-journey/#物理数学"},{"categories":["理论计算机"],"content":" 1 图灵机设计对二进制加法过程进行分析，我们可以得出如下过程： 使用小端法在纸带上存储输入的二进制串，即低位放在最左边 第一格是blank，也就是空，最后我们会回退到这个状态，来进入halt状态 最初是start状态，经过blank后改为carry状态 carry状态下，如果最低为是 0，那么直接将其加 1，然后返回（向左行走）即可，进入back状态 carry状态下，如果最低为是 1，将其改为 0，保持carry状态向右行走，继续对高位进行修改 如果在carry状态下遇到blank，也就是最高位还有进位，那么将blank改为 1 在回退状态下，一般来说只会遇到0，保留 0 不动，继续回退 达到halt之后停止操作，打印字符串 那么，在该图灵机中，我们需要使用到如下几个状态： start，即开始状态 carry，进位状态 back，回退状态 halt，停止状态 有如下几种符号： blank，表示空 0，即二进制符号 0 1，即二进制符号 1 根据设计，图灵机定义二进制加法的计算过程如下： start, blank-\u003eblank, RIGHT, carry carry, 1 -\u003e 0, RIGHT, carry carry, blank-\u003e1, LEFT, back carry, 0-\u003e1, LEFT, back back, 0-\u003e0, LEFT, back back, blank-\u003eblank, halt ","date":"2025-01-12","objectID":"/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%9B%BE%E7%81%B5%E6%9C%BA%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/:1:0","series":null,"tags":["图灵机","计算理论"],"title":"二进制加法图灵机的C语言实现","uri":"/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%9B%BE%E7%81%B5%E6%9C%BA%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/#图灵机设计"},{"categories":["理论计算机"],"content":" 2 C 语言代码实现 c // Turing machines for computations. #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003cstring.h\u003e #define N 4 // the number of states #define M 3 // the number of symbols #define TAPE_SIZE 20 // the size of the tape enum direction { LEFT, RIGHT, STAY }; /** * @brief encoding for binary addtion * 1. 4 states start:0 carry:1 back:2 halt:3 * 2. 3 symbols 0-\u003e0 1-\u003e1 blank-\u003e2 */ enum STATE { START, CARRY, BACK, HALT }; enum SYMBOL { SYMBOL_0, SYMBOL_1, BLANK }; int state_arr [N]; // state_arr[0] as start state, state_arr[N-2] as accept state, state_arr[N-1] as reject state int symbol_arr[M]; // symbol_arr[0] as empty symbol int tape[TAPE_SIZE]; typedef struct head { int location; // the location of the head int state_num; // the state of the head } head_t; typedef struct action { int head_state; int current_symbol; int next_symbol; enum direction dir; int next_state; } action_t; /** * @brief turing machine for binary addition * 1. start, blank-\u003eblank, RIGHT, carry * 2. carry, 1 -\u003e 0, RIGHT, carry * 3. carry, blank-\u003e1, LEFT, back * 4. carry, 0-\u003e1, LEFT, back * 5. back, 0-\u003e0, LEFT, back * 6. back, blank-\u003eblank, halt */ action_t turing_machine(action_t act) { if (act.head_state == state_arr[START] \u0026\u0026 act.current_symbol == symbol_arr[BLANK]) { act.next_symbol = act.current_symbol; act.dir = RIGHT; act.next_state = state_arr[CARRY]; } else if (act.head_state == state_arr[CARRY] \u0026\u0026 act.current_symbol == symbol_arr[SYMBOL_1]) { act.next_symbol = symbol_arr[SYMBOL_0]; act.dir = RIGHT; act.next_state = act.head_state; } else if (act.head_state == state_arr[CARRY] \u0026\u0026 act.current_symbol == symbol_arr[BLANK]) { act.next_symbol = symbol_arr[SYMBOL_1]; act.dir = LEFT; act.next_state = state_arr[BACK]; } else if (act.head_state == state_arr[CARRY] \u0026\u0026 act.current_symbol == symbol_arr[SYMBOL_0]) { act.next_symbol = symbol_arr[SYMBOL_1]; act.dir = LEFT; act.next_state = state_arr[BACK]; } else if (act.head_state == state_arr[BACK] \u0026\u0026 act.current_symbol == symbol_arr[SYMBOL_0]) { act.next_symbol = act.current_symbol; act.dir = LEFT; act.next_state = state_arr[BACK]; } else if (act.head_state == state_arr[BACK] \u0026\u0026 act.current_symbol == symbol_arr[BLANK]) { act.next_symbol = act.current_symbol; act.dir = STAY; act.next_state = state_arr[HALT]; } return act; } void state_transition(char* s, int length) { // initiliaze the state array and symbol array for (int i = 0; i \u003c N; i++) { state_arr[i] = i; } for (int i = 0; i \u003c M; i++) { symbol_arr[i] = i; } // initialize the tape for (int i = 0; i \u003c TAPE_SIZE; i++) { tape[i] = BLANK; // initialize all tape as blank } for (int i = 0; i \u003c length; i++) { tape[i + 1] = s[i] - '0'; } // initialize the head head_t h; h.location = 0; h.state_num = state_arr[START]; // initialie the action action_t a; a.dir = STAY; // define the state transition while (h.state_num != 3) { a.head_state = h.state_num; a.current_symbol = tape[h.location]; a = turing_machine(a); tape[h.location] = a.next_symbol; // update the head if (a.dir == RIGHT) { h.location += 1; } else if (a.dir == LEFT) { h.location -= 1; } h.state_num = a.next_state; } // print the added string for (int i = length; i \u003e= 1; i--) { printf(\"%d\", tape[i]); } } int main(void) { printf(\"Input the binary string: \"); char* s = (char*)malloc(10 * sizeof(char)); scanf(\"%s\", s); // reverse the string, and enter it into turing machine int length = strlen(s); for (int i = 0; i \u003c length / 2; i++) { char temp = s[length - 1 - i]; s[length - 1 - i] = s[i]; s[i] = temp; } state_transition(s, strlen(s)); return 0; } ","date":"2025-01-12","objectID":"/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%9B%BE%E7%81%B5%E6%9C%BA%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/:2:0","series":null,"tags":["图灵机","计算理论"],"title":"二进制加法图灵机的C语言实现","uri":"/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%9B%BE%E7%81%B5%E6%9C%BA%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/#c-语言代码实现"},{"categories":null,"content":"对自己过去二十多年的错误的一个总结，主要是心理上的和行动力上的，为后面的人生打通道路","date":"2024-11-13","objectID":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/","series":["记录"],"tags":null,"title":"年终错误总结报告","uri":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/"},{"categories":null,"content":"我过去二十来年过的比较失败，现在我要对过去二十来年的失败经历原因进行一个总结，来为我后面的人生开辟新的道路。人一定要不停的反思自己，才能继续成长。 ","date":"2024-11-13","objectID":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/:0:0","series":["记录"],"tags":null,"title":"年终错误总结报告","uri":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/#"},{"categories":null,"content":" 1 小学阶段 对学习没概念，没方法，学不好 没刷过题，不知道怎么刷题 不了解考试升学，就知道玩 不知道和人打交道，像个闷葫芦 没有多样的兴趣爱好，玩也不会玩 对很多事情没兴趣，也不知道该干什么 自信心缺失，外带受到学校老师的打击，更是没有自信，到后期沉默寡言 ","date":"2024-11-13","objectID":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/:1:0","series":["记录"],"tags":null,"title":"年终错误总结报告","uri":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/#小学阶段"},{"categories":null,"content":" 2 中学阶段 会了一点学习，但是依然对升学考试没啥概念，只知道学校里的月考 不知道要自己额外努力来获取知识，不知道自己买辅导书刷，就知道一个课本一个重难点 学习没有章法，也缺乏优秀老师的指引 后期想通过刷题进步，但是知识也不知道怎么总结，对知识本身没有深刻的了解 整天就是幻想自己变得很厉害，而且表面上做了大量的工作，但是实际上没有深入的思考知识的本源，导致效果很不好 自信心依然不多，虽然开朗了一些 不会探索其他的兴趣爱好，不会玩，不知道很多新奇事物的存在 整天用电脑就是打游戏，不知道编程是什么，家里也没有人教 不了解一些升学考试政策，只知道闷头学习 ","date":"2024-11-13","objectID":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/:2:0","series":["记录"],"tags":null,"title":"年终错误总结报告","uri":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/#中学阶段"},{"categories":null,"content":" 3 大学阶段 因为外貌条件不好，依然对自己不太有自信，找不到对象，学长也不喜欢我 努力学习过，但是因为有信息差，所以在很长一段时间内没有找到学习的目标，没有正确的学习资料、学习路径、学习方法 出于对保研的渴望打了一些比赛，也获取了一些成绩 没有实质上的能力强化，只是有一些成绩的加持，实际上能力不强 因为了解自己的水平，对自己的能力也没有什么自信 保研失败后开始彻底摆烂，没有抓紧时间，虚度光阴，浑浑噩噩的过 没有努力考研，没有找工作 行动力差，总是放纵自己，对自己很宽容，一搞就休息休息 对别人太好，像个老好人，所以总是受人欺负 不知道通过努力去抓住机会，不知道自己去争取机会 保研失败后，没有目标，没有努力的动力，整天就是浑浑噩噩，对待考研也是随随便便，最后自然是没有考上 行动力差，执行力差，专注力差，精神内耗严重，最后导致大失败 ","date":"2024-11-13","objectID":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/:3:0","series":["记录"],"tags":null,"title":"年终错误总结报告","uri":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/#大学阶段"},{"categories":null,"content":" 4 大学毕业后阶段 固执己见，固步自封， 整天想着学习学习，而没有与外面人交流，没有去抓住机会找工作 想要考研改变命运，但是在考研阶段陷入了完美主义，想要把所有课程都学完后再来进行考研复习工作，结果为时已晚 目标感不强，没有为了考研一心努力，而是花费了很多时间去做一些额外的准备工作 依然是行动力不强，执行力不强，专注力不强，没有面对当下，而是整天幻想，最终陷入大失败 精神内耗严重，总是为了一些不该思考的事情耗费大量的精力 总是忍不住把自己和别人比较，觉得自己跟别人比好失败，最终陷入严重的精神内耗，拖延了大量的时间 觉得自己很失败，对于未来有迷茫和恐惧，所以不敢向前，也不敢迈出去 本质上还是不相信自己能够通过努力改变命运，陷入了习得性无助 对于时间没有把握，太过放纵自己，经常感觉时间很多，对于自己有盲目的自信，所以一直悠哉游哉 但是在最终考研deadline到来的时候，又发现时间其实很紧张，一下子又变得很焦虑 对于挑战没有挑战过的事情没有信心（比如雅思和留学申请），对于生活和未来没有信心 生活自理能力不强，总是要依赖家里照顾，一直泡在舒适区里 身体不好，没有旺盛的精力，经常郁郁寡欢 总是在自信和焦虑之间反复横跳，每次一焦虑就试图通过放纵享乐来放松自己，然后再回来后重新陷入焦虑 没有一个强大的内心，没有一个好的精神状态，一遇到什么事情就焦躁的停不下来，一搞就失眠，让妈妈也为我担心 总是让父母为了我担心，为了我操劳 不敢和人打交道，脸皮太薄，总是有畏惧感，总的来说还是对自己没有自信 对于外貌依然是没有什么讲究，还是我行我素，家里多次提意见让我打理打理，我就是没有听从，减肥也是断断续续，没有坚持，最终也没有找到对象 没有钱 ","date":"2024-11-13","objectID":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/:4:0","series":["记录"],"tags":null,"title":"年终错误总结报告","uri":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/#大学毕业后阶段"},{"categories":null,"content":" 5 需要改进的点 多搜集知乎上的学习攻略、学习资料、学习路径和学习意见。对于特定的考试，要有专门的备考方案，不可自己瞎琢磨瞎搞。 对于考试，要多多刷题，在刷题过程中深入的思考，进行总结 在学习过程中要抓紧时间，同时要合理安排时间，不要透支身体去做事 需要上网通过各种渠道多了解考试政策，而不是固步自封， 固执己见，闭门造车 要对自己的人生有极强的方向感和目标感，为了目标去奋进，而不是活在幻想里和真空里 不能放纵自己，只有努力才有美好的明天 要多多上网或者在生活中和人打交道，不可做一个闷葫芦，这样对社会生存没有好处 在有了经济基础后，可以多多培养兴趣爱好 对人生要有方向，有目标感 培养个人自信，通过努力运动健身改进外貌开始 要多多和人打交道，不要害怕受伤，脸皮要厚 对升学考试、社会考试和其他一些政策要有概念，不是说到了点才去准备它，不是说到了时候了才去学习它，提前就要知道这些东西 对于特定的考试，要自己买辅导书来刷，不要自己闭门造车（这是很大的问题！），参考网上其他人的学习路径和学习方法来进行 学习之前要规划好学习的路径 多去和优秀的人打交道，从他们身上获取方法 对知识要有深刻的了解，一味的刷题而不反思是没有用的 拒绝幻想，脚踏实地去做事情，去准备，来求得一个好的结果 多提升个人能力，多和人打交道，来提升自信心 学会探索多样的兴趣爱好，充实自己的生活 多接触一些事物，多努力，多争取机会 不能只埋头学习，还要看路 提升外貌，这是必要的工作！不能穿的像个乞丐！ 多上网了解学习路径、学习资料、学习方法 要多多上网，不要有信息差 强化个人能力是关键 抓紧时间，不要虚度光阴 考研就努力考研，找工作就努力找工作 不要放纵自己，不要总是休息，行动力要强，才能有好的出路 要努力找工作，虽然我的情况不是很好，但是也要努力争取更好的机会 不能像个老好人一样，对什么人都好，有的人不值得我对他们好 目标感要强，对每个目标都付出200%的努力 不能总是光刷一些简单的课程来获取心理安慰，要挑战自己，要相信自己 行动力要强，执行力要强，专注力要强 拒绝和他人比较，拒绝无谓的精神内耗，用行动来换取更好的未来和心里的踏实 不能固执己见，性格执拗，一条路走到黑 不能整天想着学习，要多同外面的人交流，抓住机会找到工作 不可陷入大而全的完美主义误区 要达到某个目标，就为了这个目标一心努力，不要有二心 活在当下，不能整天幻想 拒绝精神内耗，用执行来拒绝焦虑 不要和他人比较， 这点最为要命 不要去思考不可能发生的事情，不要为了这些事情而担忧 拒绝习得性无助，任何人的人生都可能逆境翻盘，没有永恒的顺境，也没有永恒的逆境。只要努力，总会有逆风翻盘的一天。 战胜自己对不确定性的迷茫和恐惧，坚定的走出去，迈进人生里 对于时间要有正确的认识。如果不抓紧，再多的时间也会流走。只要抓紧时间，一切皆有可能。 不能放纵自己，不要对自己有盲目的自信，正确认识自己，全面认识自己 要养成一颗大心脏，像樊振东那样，提升能力，拒绝焦虑 要勇于挑战舒适区，勇敢的迈出那一步 提高生活自理能力 健身，强化身体素质 应该通过行动提升能力，来拒绝焦虑，而不是通过放松享乐 要养成强大的内心，旺盛的生命力，和坚强的精神状态（参考《飘》的女主斯嘉丽），别让父母为我担心 脸皮厚一些，勇敢一些，坚强的出击，去和人打交道 自己搞一笔钱，努力改善外貌 坚持减肥，提高身材，遇到喜欢的男孩子要主动出击 学习直面恐惧 不要在意他人的看法和一些评价 ","date":"2024-11-13","objectID":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/:5:0","series":["记录"],"tags":null,"title":"年终错误总结报告","uri":"/%E5%B9%B4%E7%BB%88%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/#需要改进的点"},{"categories":["科研"],"content":" 信息来源于ccf-deadlines中的以往顶级会议截稿日期。 ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:0:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#"},{"categories":["科研"],"content":" 1 计算机体系结构/并行与分布式系统/存储系统 SC 4-3/4-7/4-2 MICRO 4-19/4-29/4-22/4-17 HPCA 8-3/8-5/8-2/7-31 PPoPP 8-17/8-5/8-18/8-14/8-14 FAST 9-18/9-22/9-23/9-24/9-25 EuroSys 10-23/10-20/10-19/10-10/10-10 ASPLOS 10-19/12-1/10-21/8-7/8-22 ISCA 11-15/11-22/11-22/11-24 DAC 11-21/11-21/11-22/11-23 USENIX ATC 1-15/1-13/1-17/1-14/1-13 HotOS 2-2 ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:1:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#计算机体系结构并行与分布式系统存储系统"},{"categories":["科研"],"content":" 2 计算机网络 INFOCOM 8-1/8-1/8-2/8-1/8-16 NSDI 9-20/9-22/9-21/9-16 MobiCom 9-6/8-26/3-18/8-26 SIGCOMM 2-1/2-3/2-16/2-3/1-28 ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:2:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#计算机网络"},{"categories":["科研"],"content":" 3 软件工程/系统软件/程序设计语言 OOPSLA 2-4/4-6/8-19/8-16 SOSP 4-20/4-18/5-8 ASE 6-8/5-6/5-7 FM 7-2/5-7 POPL 7-12/7-12/7-8/7-9 ICSE 8-3/8-2/9-2/9-4 ESEC/FSE 9-13/9-29/2-3/5-18 PLDI 11-15/11-17/11-11/11-20/11-21 OSDI 12-11/12-8/12-14/12-15 ISSTA 11-1/4-13/2-17 ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:3:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#软件工程系统软件程序设计语言"},{"categories":["科研"],"content":" 4 数据库 ICDE 8-3/12-4/10-9/11-18/10-2 SIGKDD 8-2/2-9/2-11/2-9 VLDB 每月一次提交 SIGMOD 10-18/10-16/10-16/9-16/9-23 ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:4:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#数据库"},{"categories":["科研"],"content":" 5 计算机科学理论 FOCS 4-5 SODA 7-6 STOC 11-5/11-7 LICS 1-24 CAV 1-22 ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:5:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#计算机科学理论"},{"categories":["科研"],"content":" 6 计算机图形学与多媒体 SIGGRAPH 1-24/5-20(ASIA)/1-25/5-24(ASIA)/1-26 ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:6:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#计算机图形学与多媒体"},{"categories":["科研"],"content":" 7 人工智能 ICCV 5-9/5-18 NeurlPS 5-23/5-18/5-20/5-29 AAAI 8-16/8-16/8-16/9-9 CVPR 11-15/11-18/11-12/11-17 IJCAI 1-24/1-19/1-15 ICML 1-31/2-2/1-27/1-28 ACL 2-16/2-16/1-21/11-16 ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:7:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#人工智能"},{"categories":["科研"],"content":" 8 数学 数学年刊 Annuals of Mathematics 数学新进展 inventiones mathematicae acta mathematica 美国数学会杂志 ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:8:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#数学"},{"categories":["科研"],"content":" 9 主要关注会议 PPoPP FAST EuroSys ASPLOS USENIX ATC HotOS OOPSLA SOSP POPL PLDI OSDI VLDB SIGMOD FOCS STOC ","date":"2024-11-09","objectID":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/:9:0","series":null,"tags":["deadline"],"title":"CCF 重要顶会及截止时间概览","uri":"/ccf-a%E7%B1%BB%E4%BC%9A%E8%AE%AE%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E6%A6%82%E8%A7%88/#主要关注会议"},{"categories":null,"content":" 循此苦旅，以达天际 这是本人的学习周报记录，参考的是Skr-Learning学习周报。这里定期记录一些学习的内容与进度。在人生的攀登过程中，最重要的是保持身体健康和积极的心态，保持快乐。不可玩物丧志，不可在莫名其妙的对未来的忧虑中度日，人的一生要过的丰满充沛，要过的绚烂，没有时间可以耗费。唯有不断地向目标前进，才能抵达最后的彼岸。努力不一定有好结果，但是不努力一定不会有好结果。我刻苦努力，我接受一切结果。 ","date":"2024-10-26","objectID":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/:0:0","series":["记录"],"tags":null,"title":"任务列表和目标规划","uri":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/#"},{"categories":null,"content":" 1 第一阶段任务 3 月完成。 vim使用学习，使用vimtutor掌握基础即可，通过后期的实践进行强化 ✅ 2024-11-12 根据选校梯度 - Open CS Application 和 Global CS 选校 ✅ 2024-11-12 购买代理 ✅ 2025-01-05 大力有氧运动健身,强身健体 ✅ 2025-03-11 骑行5km ✅ 2025-03-11 爬山徒步 ✅ 2025-03-11 骑行5km ✅ 2025-03-11 计算机学习路径全部完成，学习各门课程，大量尝试各种内容，发掘自己的爱好所在（不要通过想象力去脑补，要通过真实的体验去感受），掌握计算机技术。并且通过研读论文，准备进行进一步的科学研究 Pre部分完成，巩固数学基础并配置编程环境 刷课部分完成，把刷课笔记放在博客上 算法刷题准备，把刷题笔记放在博客上 面试准备，把面试准备过程放在博客上 课程源码研究，把课程项目研究过程放在博客上 造轮子，把造轮子过程写在博客上 经典开源项目研究，把研究过程写在博客上 将一个大的系统啃透 进入Linux核心贡献者 进入qemu核心贡献者 进入cpython核心贡献者 进入postgreSQL核心贡献者 进入mysql核心贡献者 进入LLVM核心贡献者 顶会论文阅读 \u0026 复现，把阅读笔记写在博客上 自我提升书籍阅读 个人项目开发 算法 理论计算机 系统 安全 AI 方向 Web 和安卓开发 游戏开发 找到工作并赚到钱（字节跳动等大厂） 确定自己的爱好方向（重要！不是所有的方向都值得我去研究！），一定要找到让自己感兴趣的那个 要能做到对实现任何东西都毫不费力 做好一切进行计算机方向科研的准备，并开始进行计算机科研工作，努力发表顶会论文 终极目标达成 成为计算机巨佬，在github上达到1k followers 抓紧刷算法题，准备进入大厂，把leetcode上的习题基本都刷完，然后持续投递简历，并且面试（积极投递，多多面试，不要害怕，勇敢面对，加油，一切都会好的） 一些OJ书籍学习 算法竞赛三大本学习完成 各种OJ平台刷题完成 Leetcode Codeforces AtCoder 残酷刷题群加入，每天大量刷题 国内计算机岗位投递+面试完成，找到工作 整理公司名称 对工作单位做背景调查 投递简历+面试 对所有计算机课程资料笔记进行总结，用自己的语言进行复述，建立Open CS University（重要！），让中国的计算机教育和计算机技术发展不再受制于人 完善博客中的个人简介，让更多人认识我 物理基础和电子信息基础打牢 普通物理学学习，掌握基本的物理知识 基础电子电路和信号与系统学习，掌握基本的电子电路知识 模拟电子电路 信号与系统 制作一些电子电路的东西 把计算机一站式指导手册肝出来 工作简历制作完成并投递 英语能力终极强化，要能做到和外国人交流无障碍，阅读、写作、听力无障碍，对国外文化有深入了解 词汇量终极进化 知乎搜集词汇量增大的方法 🆔 3spscf 疯狂记单词，努力增加词汇量 ⛔ 3spscf 阅读能力：海量阅读英文原版书籍（如哈利波特） 🆔 9mnmii 知乎搜索阅读能力提升的方法 知乎搜索写的好的英文原版书籍，并下载下来，或者在家里读 哈利波特阅读完成 福尔摩斯探案集阅读完成 简爱阅读完成 至少阅读100本世界名著 其他书籍 ⛔ 9mnmii 写作能力：进行海量阅读和写作训练 知乎搜索英文写作提升方法 🆔 tkt987 知乎搜索好的英文原版刊物，每天至少阅读100篇 努力学习好的英文原版刊物的写作方法，积累下来 ⛔ tkt987 听力训练：进行大量强力听力训练 知乎搜索英语听力提升方法 🆔 hhko8z 知乎搜索好的听力材料 对着听力材料进行大量听力训练，至少100篇听力材料 ⛔ hhko8z 口语训练：美式口音学习，进行大量口语训练 知乎搜索口语提升方法 去口语软件上找外国人聊天，提升口语 每天对着电视节目大声朗读，提升口语能力 准备一星期，三大英语考试全部高分通过 🆔 sjkepr 雅思 8+ 知乎搜索雅思复习方法 🆔 m1hc8t 知乎搜索雅思书籍 攒钱购买雅思书籍 疯狂进行雅思刷题训练，并总结错题和题型 ⛔ m1hc8t 搜索雅思考试的注意事项 参加雅思考试 托福 110+ 知乎搜索托福复习方法 🆔 58tbv5 知乎搜索托福书籍 攒钱购买托福书籍 疯狂进行托福训练，并总结错题和题型 ⛔ 58tbv5 搜索托福考试的注意事项 参加托福考试 GRE 330+ 知乎搜索GRE复习方法 🆔 52yuz1 知乎搜索GRE书籍 攒钱购买GRE书籍 疯狂进行GRE训练，并总结错题和题型⛔ 52yuz1 搜索GRE考试的注意事项 参加GRE考试 成为英语巨佬 开发出英语训练Web平台和软件 开发一个可以帮助中国人和外国人学习中文和英文的口语搭档网站 在指导手册中加入英语学习和国外英语考试备考模块 数学学习完成，像法国人那样掌握深厚的数学功底，能够做到对数学本身、以及计算机科学中的数学有游刃有余的使用能力，并且能够利用数学进行新的科研工作，对理论计算机、算法、数理逻辑，尤其是组合数学进行研究 基础数学四大课程学习完成 彻底根除数分顽疾 高代（线代） 常微分方程 概率论与数理统计 数学题刷爆 3 轮，保证模拟水平稳定 140+，也为计算机课程的学习做好铺垫 张天德数学竞赛习题完成 汤家凤1800刷1遍 李范全书+李永乐讲义3遍 张宇1000题3遍 数学真题刷3遍并总结题型 知乎搜索数学优秀模拟题 🆔 ckoiwv 赚到足够多的钱，去购买数学模拟题 模拟题购买并刷爆3遍 ⛔ ckoiwv 后续数学基础速通路线学习完成，为计算机课程的学习做好铺垫 抽象代数 代数学 数理逻辑 拓扑学 组合数学 图论 初等数论 离散数学 计算机数学一直学习到计算复杂性 -\u003e 为计算机课程的学习做好铺垫 算法入门 数据结构与算法分析 算法设计与分析 计算理论 计算复杂性理论 信息论与编码 理论计算机导论 计算几何 密码学 最优化方法 解析几何 数值分析 矩阵计算 矩阵论 数学物理方法 其他数学训练完成，成为数学巨佬。大力学习，找到自己十分感兴趣的方向，进行深入探索，数学相关的任务全部完成，要把数学基础打磨的超级厉害 纯数学习路径完成 USTC 数学学习路径完成 常用教科書列表與簡評 | 臺大數學系 (ntu.edu.tw)阅读完成 MIT 数学学习路径完成 重点进行代数、数论、组合、数理逻辑、密码学、概率论、优化理论、矩阵论方面的研究 彻底战胜对数学的恐惧！成功驾驭数学！ 在指导手册中加入数学学习模块 阅读海量系统，AI，理论计算机相关论文，复现大量论文，广泛学习科研成果，争取在硕士入学前就发表自己的系统顶会论文 知乎搜集所有的系统、体系结构方向、图形学方向顶会论文 实现一个AI工具，整理出经典论文及其发展历史，在知乎及小红书上宣传自己的项目 着重阅读MIT、斯坦福、伯克利、CMU的论文研讨会上突出的文章，并且复现，比如CMU的15-721这种经典论文研讨课，必须要反复研究 对每篇论文进行研读，必要的时候进行复现，争取复现的越多越好 复现时候的疑点可以邮件联系老师 准备工作比较成熟时，邮件联系老师开始着手进行科研工作 争取在研究生入学之前拿下2篇系统论文，在研究生阶段以每年发表2篇顶会论文的进度，敲开MIT PDos Lab的大门 顶会不一定要是在系统领域，AI领域和图形学领域一样需要做出突出的科研 在系统移植方面也要做出突出的成就，要在计算机行业成为rising star，让自己的论文和Jeff Dean还有Hinton那些人一样成为历史上的经典论文 要成为计算机行业的佼佼者，不要落入失业的风险中🛫 再找到工作前完成基础课程学习和论文研读和复现的部分，并且需要确定好自己的研究方向和idea，工作后开始利用大厂环境进行科研工作（要充分利用大厂环境，不要浪费这个绝好的机会，利用这个环境搞出文章来，而且需要多折腾，多社交，多和其他科研者进行交流，多参加活动，不要闭门造车） 计算机水平能够达到无压力的进行系统方向科研，可以开始系统方向研究 基础知识完全掌握 科研论文阅读完成 前沿论文和方向完全了解 科研流程完全熟悉 已经形成自己的idea 完成系统构建和benchmark测试 咬紧一个子方向进行深入探索 发表文章 在指导手册中加入科研入门模块 通过各种手段赚到学校申请费和学费，并且缴纳医保，买学习资料，还有我想要的各种东西 学习网络安全和系统安全，学习漏洞挖掘 CTF 靶场训练 CTF 打比赛赚钱 Security Bug Bounty，成为 hackerone 排行榜榜首 TopCoder接外包赚钱 游戏开发，发布到Steam赚钱 ⛔ 2yp7zd 外包接单赚钱 App 开发赚钱 算法竞赛奖金 阿里天池、Kaggle 及其他数据科学竞赛奖金 教留学生写作业赚钱 英语家教 ⛔ sjkepr 雅思家教 托福家教 GRE 家教 量化交易系统开发赚钱 考研科目家教 ⛔ 5ymekt 数学家教 政治家教 英语家教 专业课家教 找到计算机实习，赚工资 找到计算机工作，赚工资 接政府项目外包赚钱 接英语翻译等外包赚钱 学习文章写作，写文章投稿赚钱 一定要攒够足量的钱，为其他活动做准备。 实现吃牛肉自由 积累100万起步 在指导手册中加入搞钱模块 把手机上记录的那些创业idea统统实现，搞到1000w（不要害怕，直面对未知的恐惧） 在指导手册中加入APP开发模块 把家里的书都看完 在指导手册中加入人文素养培养模块 物理学学习完成，保证深厚的物理基础 在指导手册中加入其他学科学","date":"2024-10-26","objectID":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/:1:0","series":["记录"],"tags":null,"title":"任务列表和目标规划","uri":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/#第一阶段任务"},{"categories":null,"content":" 2 第二阶段任务 4月 - 7月完成（科研工作），11月申请US phD。 组织几个人爬一次华山 MSRA 实习找到，开始进行科研实习 联系MSRA老师，附上自己的简历 自己想出科研选题，同MSRA老师进行合作科研 一定要在硕士入学前至少保证一篇论文的产出，在硕士入学后保证2篇论文的产出 参加量化公司的实习/工作，给量化公司做AI产品和基础架构 研究生入学后大力social，争取MSRA等的远程实习，量化公司的实习，以及其他的论文合作机会 结识音乐方面人脉，寻找小提琴演出机会 进入读研学校的交响乐团，参与交响乐团排练 发表数学四大论文 搜集数学四大论文，看看都是哪个方向的 仔细研读四大论文 学习丘成桐的过往经验 深入进行数学方向的研究，主要是数论和组合方向，必要时向其他数学研究者发邮件请求帮助 努力研究，争取能够发表数学四大论文，这样我也能多一条出路 找到很好的男朋友（相信自己的感觉，跟随自己的心，真心对男朋友好，两个人要有志同道合的理想和追求） 继续循环进行上述步骤，无限变强，包括 继续搞钱,以1000w为单位继续搞钱 健身，身体素质拉的越强越好 厨艺精进,做饭越来越好吃 进行外貌打理，卷外貌 创业，开源贡献及赚钱，成为雷军那样的大佬 个人技术水平无限提升，成为Jeff Dean那样的大佬 个人数学能力无限提升，成为丘成桐那样的大佬（不是说人品） 科研水平无限提升，成为海波老师那样的系统方向大佬 积攒更多人脉 努力提升我国的计算机整体水平 成为小提琴大师，成为海菲兹那样的大佬 羽毛球技术精进，成为林丹那样的大佬 找到好的感情，过上好的生活 再也不用和那些狗屎烂人打交道啦，哈哈哈哈哈哈哈，哈哈哈哈哈哈哈哈哈 做系统方向科研,积累3篇系统方向顶级会议论文，申请四大的CS PhD 去四大读PhD，发表5篇系统顶级会议论文毕业，期间去大厂做research scientiset实习 后面的再说 ","date":"2024-10-26","objectID":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/:2:0","series":["记录"],"tags":null,"title":"任务列表和目标规划","uri":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/#第二阶段任务"},{"categories":null,"content":" 3 其他 最喜欢的事情 数学 计算机 物理 健身 下厨，找好的参观探索 音乐 羽毛球 乒乓球 攀岩 游戏 小提琴 旅游 我赚钱的路子 计算机教育项目 数学教育项目 英语教育项目 考研复习教育 Security Bounty 系统 bug TopCoder 游戏开发 App 开发 外包接单，包括政府项目接单 算法比赛奖金 数据科学竞赛奖金 教留学生写作业赚钱 英语家教 量化交易系统 考研科目家教 英语翻译 写文章投稿 雅思、托福、GRE 培训 下厨UP主 拉琴UP主 唱歌UP主 出国攻略 减肥出书 考研攻略 CPA攻略 小提琴演奏 电吉他演奏 作曲接单 编曲接单 国际象棋比赛 实现手机上的那些创业idea 成为大厂的头头，大厂挣钱 ","date":"2024-10-26","objectID":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/:3:0","series":["记录"],"tags":null,"title":"任务列表和目标规划","uri":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/#其他"},{"categories":null,"content":" 4 如何脱离控制欲强的父母 尽量少呆在家里，少和他们呆在一起 节假日别回家 经济完全独立 不要天天跟他们打电话，不要事事和他们报备 有强大的个人能力，不畏惧未知的事物 外地工作，不要本地工作 不要为他们说的话而感到愧疚，不要自责 把跟他们的空间拉开 正确识别并拒绝精神PUA，当心苦肉计 有自己的个人生活，有自己的朋友圈 有能力独立生活，享受自己的生活 意识到父母是改变不了的，不要试图去跟他们讲道理，放弃改变他们与同他们沟通的念头 多想想让人高兴的事情，多和好朋友交流，保持心情愉快，拒绝精神内耗 多做让自己高兴的事情，不要因为父母影响到自己的心情 ","date":"2024-10-26","objectID":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/:4:0","series":["记录"],"tags":null,"title":"任务列表和目标规划","uri":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/#如何脱离控制欲强的父母"},{"categories":null,"content":" 5 24岁前的奋斗目标 全方位能力提升 找到工作 香港地区硕士申请完成 赚到人生的第一桶金 脱离父母对我人生的控制 底层知识全部扎实掌握，阅读大量顶会论文，发表3篇顶会论文（各个方向都要学习，AI+系统方向），不要把路子走窄了，以后是有用处的（科研） 成功申请到国外名校的硕士或者考上上海交大的硕士（学历） 在大厂干到高层，学习优秀的项目管理经验和人力资源管理经验（工作经验） 找到真心相爱的男朋友，共同奋斗（生活） 实现自己的所有创业idea，顺利攒到1000万，为我的未来作保障（钱） 在这些都做完后，好好的谈个恋爱，享受一下美好的生活（所以说啊，越快实现，享受就来的越快，否则后面拖久了，没时间享受了喔，所以要抓紧努力）（生活） 数学和物理水平达到彪悍的级别 羽毛球、乒乓球水平达到高级 小提琴水平达到高级 参加量化公司的工作、大厂基础架构的工作 学习投资理财管理，金融风险管理，财务管理，企业管理，创新创业管理，为未来缔造新的互联网巨头公司和商业公司做准备 积累大厂和量化企业的实习经验，方便在后期做更多工作，多参与企业工作 和MSRA这样的科研机构进行科研合作 自己开发出有创造力的科技科研产品，改变人类未来 努力科研，为申请MIT PDOS Lab做准备 成为人生赢家！ ","date":"2024-10-26","objectID":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/:5:0","series":["记录"],"tags":null,"title":"任务列表和目标规划","uri":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/#24岁前的奋斗目标"},{"categories":null,"content":" 6 几个重要的人生节点 1月20号之前把所有学习任务搞定，投递简历 报名2月5号的雅思考试 ✅ 2025-01-17 1月25号前完成所有任务，并且定下工作，雅思刷题 过年期间：1. 刷雅思题目 2. 阅读海量论文 3. 搞钱 2月份确保进入大厂工作（如字节跳动） 2月5号考雅思，5号之前反复刷雅思真题，并且把申请材料全部准备完成 2月6号直接参加工作 2月10号拿到雅思成绩后完成所有申请工作 5月份之前把大厂产品研究工作完成，所有系统顶级会议论文研读和复现任务完成 5-6月份确定科研idea，并且开始着手做实验和写论文（利用大厂的资源） 6月底联系MSRA老师，争取7-8月份加入MSRA做科研实习，在这期间开始准备GRE和托福考试 9月-2026年2月间和MSRA老师合力完成科研任务，发表系统顶级会议论文，争取发表第一篇自己的系统顶级会议论文 2026年2月-2026年6月间参加幻方量化的实习 2026年5月研究生毕业后继续回到字节跳动工作，继续做科研，争取发表系统顶级会议论文 2026年5月-2026年11月间发表自己的第二，三篇论文，11月份申请MIT PDOS Lab的phD 2026年11月-2027年8月发表自己的第四篇系统顶级会议论文，入学MIT PDOS Lab 基础知识和技能全部学习完成，外貌改造计划完成 📅 2025-1-16 搞到一笔基础启动资金 📅 2025-1-16 申请到香港/新加坡大学硕士 📅 2025-1-19 大厂工作经验快速积累 量化企业工作经验快速积累 MSRA科研实习经历快速积累 通过技术、工作和学习实现大量的人脉拓展 通过多种方法搞到足够多的钱 努力科研，做出顶尖的科研成果和论文 努力写代码，积累创新的、对计算机行业有重大影响的、改变人类未来的计算机科技项目 申请MIT PDOS Lab的phD 在phD期间去Google、Amazon等地方做Researcher internship工作，保证和工业界的connection phD期间努力科研，发表多篇顶尖论文 phD毕业后加入Google、Amazon等大厂做research scientist 努力利用大厂资源科研，向田渊栋那样的老师学习，成为科研巨佬和技术巨佬，坐到Jeff Dean等同的位置 做到CEO的位置，也可以自己创业 做出改变人类历史发展、改变人类未来生活的突出科技成果，成为乔布斯、苏妈那样伟大的CEO 要保持健身习惯，羽毛球可以平时打一打，小提琴技术要磨练到顶尖水平 加油！ ","date":"2024-10-26","objectID":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/:6:0","series":["记录"],"tags":null,"title":"任务列表和目标规划","uri":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/#几个重要的人生节点"},{"categories":null,"content":" 7 5年内的终极目标 成为卡马克和法布里斯贝拉那样改变世界的程序员，在开源社区拥有杰出声望 发表多篇系统顶级会议论文，成为系统科研巨佬 拿到帕格尼尼小提琴比赛冠军 申请到MIT PDos Lab的phD 赚到3000w 在上海有一套房 家庭后备风险预防：赚到尽可能多的钱，提高社会地位和社会影响力，提升人脉关系 ","date":"2024-10-26","objectID":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/:7:0","series":["记录"],"tags":null,"title":"任务列表和目标规划","uri":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/#5年内的终极目标"},{"categories":null,"content":" 8 人生目标 在组合数学方面做出突出成就，解决组合数学的难题 做出领衔世界的系统科研、让AI造福人类生活、让更多好的游戏给人们带来欢乐、让科技改变世界。倡导世界开源共享共建，而不是搞封闭主义。做出法布里斯贝拉贝拉、卡马克那样的突出成就。做一个对社会、对世界科技有贡献，但是低调的人。 要成为比尔盖茨那样的成功的企业家，要做有良心的企业家，要用自己的技术报答社会 在小提琴方面达到顶尖水平，推广音乐素质教育 在羽毛球、乒乓球、游泳等方面达到较高水平，推广全民运动 让父母能过上好生活，也能让更多人能够吃到科技进步的福利。 用人工智能方法解决阿尔兹海默症的问题 帮助非洲国家走出贫穷和疾病，让他们有饭吃 解决中国计算机科学技术教育的问题 让中国成为世界科技巨头 成为像Jeff Dean那样对社会有帮助的计算机科学家 ","date":"2024-10-26","objectID":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/:8:0","series":["记录"],"tags":null,"title":"任务列表和目标规划","uri":"/task/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8/#人生目标"},{"categories":null,"content":"其实我不喜欢写日记，但是最近发生的一些事情，让人脑子里弯弯绕绕的想法结在一起。于是想到使用日记的方式来整理一下思绪，顺带思考一下未来的人生方向。 ","date":"2024-10-26","objectID":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/:0:0","series":["记录"],"tags":null,"title":"群体众生相和一些反思","uri":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/#"},{"categories":null,"content":" 1 新闻快递最近几个月里，行业内发生了一些事情： 诺贝尔物理学奖颁发给了研究深度学习的Hinton和一位物理学家 Linus和他的部下将来自俄罗斯的Maintainers从邮件列表中移除 此外，最近一些日子，我看到： 知乎为我推送许多关于大模型相关的信息，包括某某大模型击败了某某大模型，登顶某某榜单，但是我对深度学习这种底层并不清晰的技术并不那么感兴趣，大模型亦如是 图形学会议siggraph和操作系统会议osdi已经接受了很多深度学习相关的文章，包括深度学习生成某某某、深度学习系统之类的 此外，其他的一些信息包括： 华为的朋友说工作非常累 字节的朋友说字节没有人情味 腾讯的朋友说在腾讯工作，把身体干出问题了 ","date":"2024-10-26","objectID":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/:1:0","series":["记录"],"tags":null,"title":"群体众生相和一些反思","uri":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/#新闻快递"},{"categories":null,"content":" 2 AI Good or Bad？对于诺贝尔物理学奖颁发给Hinton和另一位物理学家，数理群里的纯数和物理同学认为真难以理解，并且使用了丘成桐笑话来嘲讽。另一边CS群内的群友对于人工智能渗透了其他的领域而沾沾自喜。知乎上的统计物理人觉得自己的选择非常英明，对于脱离了理论物理的群体而感到非常庆幸。知乎上的ai同学为人工智能渗透了其他行业而感到骄傲，有的言论非常嚣张和离奇，包括但不限于： 颁给深度学习，这是因为传统物理没有任何做出突出成就的人； 我曾经因为数学差而感到自卑，但是在我发现炼丹的结果不需要使用那么多的数学来解释的时候，我觉得非常自豪，我认为数学差也无所谓，理论基础不重要； 深度学习的数学基础搞不出来，是因为那些搞数学的人水平太差； 只要Hinton一声令下，我们全体ai小将都听从hinton祖师爷的命令，hinton指哪我们就打哪； AI的发展带来了自动化的写作和办公，当然是有益处的。但是我更喜欢原理清晰的科学，解释性强的科学，不太喜欢玄学和炼丹。 我相信，在最初提出人工智能的时候，人们的期许应当是\"ai替代人去做重复的工作，而人去做创造性强的工作\"。而现在搞出来的效果就是，ai在画画，ai在拉琴，ai在聊天，ai在下棋，而很多人还在工厂操作自动机器，在流水线上，在日复一日的干苦力。ai无法陪伴我老年痴呆的外婆，京东上搜索出来的都是陪伴机器人都是会念诗的宝宝早教机。ai带来了绘画的版权问题，而它自己画出来的东西也时常诡异。有的论文中实现ai拉小提琴，但是出来的效果也像是锯木头一般。 此外，对 ai 的训练，也只有大企业能够负担的起。我以前的一个重庆大学的学长告诉我说，他认为以后 ai 科研的效果会受实验室硬件资源的限制。那个时候还没有GPT-4，现在看来此话不假。 更让我头疼的一点是，一些知乎营销号和问题，经常提出xxx模型击败了xxx模型，你怎么看之类的问题。我并不那么关心ai方向的发展，我也不太关心谁击败了谁。但是我经常在知乎刷到大模型相关的问题，你击败我，我击败你。知乎的屏蔽词的设置需要花钱开会员，因此这问题我还被天天推送，很烦啊。 ","date":"2024-10-26","objectID":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/:2:0","series":["记录"],"tags":null,"title":"群体众生相和一些反思","uri":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/#ai-good-or-bad"},{"categories":null,"content":" 3 开源精神存在吗？俄罗斯人的数学和计算机功底强劲，这是大家有目共睹的。当然他们也为Linux贡献了不少代码，也为计算机行业的发展做出了许多突出的贡献。但是Greg K-H在毫无预兆的情况下移除了他们的代码，并不是因为他们注入了什么安全漏洞，而是因为抽象的战争原因。此外，他们并没有因为战争原因将以色列人从Maintainers中移除掉，只是移除了俄罗斯人。这不免让人思考是否有一些额外的政治隐情。 当然，如果只是Greg的行为令人不满，大家还在猜测是否有美国方面的原因。Linus本人的回复，更是让人难以接受。其称非常支持这种行为，并且称俄罗斯和芬兰曾经发生战争，因此他当然非常乐意移除俄罗斯人。 俄乌战争在几年前就打起来了，他们一直在接受俄罗斯人的贡献和维护。但现在接受了别人的维护，但是突然将其从Maintainers中清理掉，并且表示他压根就不喜欢俄罗斯人。移除别人的时候，也并没有走正经的程序。我个人认为这种行为破坏了开源的精神，并且非常无耻。 此外，有的群友的态度更是让我吃惊，其认为Linus的历史理由有点扯淡，但是这么做完全合理，是因为没有破坏协议内容。其认为开源的意思就是开放源代码，没有别的意思，你可以做贡献，你可以fork，但是他爱移除你就移除你，这是他的自由，这是他的权力，开源项目独裁管理是完全合理的。 我和他的争论引发了群友们关于开源精神的激烈讨论。有的群友认为，除了RMS以外，根本就没人表示过开源精神，压根没人弄清楚过开源精神，开源精神是不存在的。Linus本人也从未认同过开源精神。也有很多人认为，只要在协议的范围内办事，那么他爱怎么干怎么干。有着这样想法的人，我发现很多都是使用开源项目，必要的时候贡献开源项目，但是对开源项目和开源社区并没有那么大的热忱。当然，也有很多学计算机的群友，同我一样是出于开源精神的自由、平等、共建，而去参与开源社区，努力的想让软件生态变得更好。我的想法是，如果大家靠的是冰冷的协议来维系，可能根本就不会有那么多人去参与开源项目的建设。政治原因的插手更是直接破坏了开源精神。但是貌似很多朋友，更多的是看协议的内容，研究软件著作权到底归谁，这个项目的代码到底开放不开放，对他们有没有益处。他们认为允许你fork仓库，就是很大的自由了。说实话这种想法让我非常吃惊，虽然我也不知道自己是什么时候了解了开源精神，参与到了开源项目，并且自发的投入到社区的建设当中去。但是我一直以来接受的开源思想，就是自由、共建、共享、共惠。有的人说这个精神是老白左的天真想法。不知道该如何回应。 ","date":"2024-10-26","objectID":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/:3:0","series":["记录"],"tags":null,"title":"群体众生相和一些反思","uri":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/#开源精神存在吗"},{"categories":null,"content":" 4 他人即地狱？在与人进行网络交流的过程中，我多次发现很多人并不非常友善。 一些人在群内经常使用如下言论对他人进行攻击： 我看你倒像是个新来的。 兄弟我说你是不是不认字啊？ 我看你是睡觉把脑子睡糊涂了。 你是不是脑子有问题？ xxx魅力时刻。 不会真的有人以为xxxx吧？ 蠢。 这都不会。 不知道你是真脑子缺根弦还是故意演成一个傻子。脑子符合ID。这脑子就别出墙了。 xxxx难道没学过吗？ 我在知乎，提出《哈利波特与魔法石》很好看，但是周一时候看的人不多，便有人评论： 这种又老又过时的片子本来就没人看。 我一向认为，不管是现实中，还是网络上，对于别人都应该有着基本的礼貌和尊重，尽量不要说让人不愉快或者泼冷水的话。非常好奇这些人是否受过基本的家庭教育，有着基本的教养，在外是否对自己的朋友、师兄弟、学长学妹、老师都这么说话。还是说就是仗着网络上面，别人打不到他，遂如此猖獗。此类人我极其反感，破坏正常的网络社交秩序，破坏别人一整天的好心情。 ","date":"2024-10-26","objectID":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/:4:0","series":["记录"],"tags":null,"title":"群体众生相和一些反思","uri":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/#他人即地狱"},{"categories":null,"content":" 5 造神与塌房？计算机行业许多人有偶像，也喜欢拜神，就我听到过的同学所拜的神包括但不限于如下： Kaiming He 贾扬清 Hinton Linus Jeff Dean Ilya Sutskever 当然我自己也有一些很崇拜的偶像，包括： 法布里斯贝拉 约翰卡马克 雷军 scihub的创始人（可爱的俄罗斯大妹子！）Sci-Hub: Alexandra Elbakyan 以上几位一直是我的偶像，我也在努力的通过学习，向他们靠拢。尤其是雷军和卡马克的创业神话，更是让我心潮澎湃。卡马克在做探索的时候，会废寝忘食，甚至一次实现多个游戏引擎。他允许玩家修改游戏，创建自己的mod，他是开源精神的超级忠实者。我也想成为他那样厉害的人。 但是我发现我的一部分同学，在拜神的同时，下意识地认为自己一辈子都无法达到他们的成就，甚至超越他们。我认为偶像应该是要努力的靠近，甚至超越。虽然现阶段这么说可能会显得有些自恋，但是我认为self-fulfilling prophecy是完全正确的。如果你在心里就默认自己无法达到他们的成就，那么大概率你一辈子确实无法达到了。人生很长，应该先着手出发，我们看不到很远的地方，但是我们可以逐步的递进，一步步走到更高处。可能走着走着，我们就已经超越了他们，而不是局限于他们为我们创造的世界。 再谈造神和神的塌房。Linus这人就不说了，早年开发出了Linux的时候，用一纸邮件呼吁全世界的开发者来帮他。后来就是fuck这个，fuck那个。现在打着战争的旗号，直接将贡献颇多的俄罗斯程序员从Maintainers中移除，并且还使用着别人的代码。顺带在回信中展示了一把自己的\"政治露阴癖\"。 此外，我搜索过Greg K-H，包括很多一些其他的开发者的访谈。给人的感觉就好像努力的在表现一种设定，我喜欢使用什么什么工具，我在编码的时候喜欢听什么什么音乐，我有什么什么癖好，我喜欢穿什么什么衣服。他们通常表示自己非常友好，非常乐于亲近新手，非常乐于和人交流。 但是实际上表现出来的，是高人一等的姿态，是计算机行业精英和大牛阶层的自我高潮。好像他们亲近新手不是因为他们真的像父亲带一个宝宝一样，热烈期盼着新手的成长，而是因为他们觉得表现出和新手亲近的姿态会比较体面。 包括 Greg 让新手从小处着手开始贡献。但是他的访谈里有几段话让我印象深刻，表示\"你不知道哪天会遇到以前只在邮件里跟你互动的人\"。他曾经多次在邮件上拒绝一个开发者贡献的代码提交，在几次更新迭代后才接受提交。结果后来有一次在攀岩馆遇见他。于是觉得\"在邮件上还是转变态度的好，不然你不知道哪天会遇见并有求于人\"。并且表示\"另一件很棒的就是所有与你共事的伙伴几乎都在不断的换工作，但无论他们为哪家公司供职，你们都始终在同一个项目中合作，你的合作者可能会来自世界上不同的地方\"。这几段话让我觉得非常不舒服，包括但不限于： 在对新手提意见时表示\"可以从小处着手贡献\"，结果是\"多次拒绝他的提交\"； 邮件上对人苛刻，在现实中遇到后，立马转变态度，表示\"不知道哪天会遇见并且有求于人\"； 表示\"认为和世界上不同地区的人在一起工作是很有趣的事\"，现实中打着政治的口号，一把踹掉了来自俄罗斯的Maintainers； 就好像Jeff Dean说自己在谷歌工作了多少年，他的工作时长超过了谷歌百分之99.9%人。谷歌的副总裁在软件上同他互动。实际上他们不会关心其他的谷歌的其他软件工程师做了什么，谷歌的副总裁也不会在社交软件上和普通的谷歌软件开发者进行互动。顶尖的软件工程师和创业者会激情互动，一起开会，一起参加活动。而普通的软件行业从业者只能远远的看着，就好像安徒生《卖火柴的小女孩》中，卖火柴的姑娘看着温暖的屋子里的人合家团聚，而期盼的能有人在软件行业的寒冬能够来买一根自己的小火柴，而幻想着自己也可以在温暖的房间里，和家人在一起。 我看过知乎上许多人提的Jeff Dean相关的梗，比如：那些关于Jeff Dean的事（jo）实（ke） - 知乎。包括他说自己用过多少种语言，回答网友一些好奇的问题等等。这算是比较友好的大牛了。当然你要问程序员们想不想也成为Jeff Dean这样的大牛，受到人追捧，那自然是想的。不然也不会有那么一些人组建一些相关方向的群聊和组织，自己做群主，他们的群友也基本都是自己的信徒。也不会有一些人，时不时的在网络上发表一些惊人言论，于是便会吸引一些人来看，自己也跟着红起来（有时候黑红也是红嘛~）当然也有一些人依靠强悍的编码能力，吸引一波教徒。也有人依靠强悍的网络安全能力，吸引一波教徒。他们纷纷为自己起不同的花名，于是教徒便亲切的以花名称呼他们，他们也以花名混迹互联网江湖。 我不太喜欢起花名，享受别人追捧的人。我也不太喜欢AI方向那些造神的行为，虽然其中很多的人做出的成就确实厉害。我更不会追捧某人。人总是会因为追捧某人，而美化他的形象，合理化他的行为，可能还会在各种场合用他的梗图，在各种时候提到他的名字。当然在他做出不合理行为的时候，有的人会祛魅，而有的人会继续大力支持，哪怕他干的事情很抽象。这说白了和偶像饭圈没有什么差别。当然 Linus 这个事情，也算是给人提了个醒。在华为发布鸿蒙的时候搞这么一出，更是有趣。最重要的是，造神和拜神会让自己在心里默认，自己一辈子都超越不了他们，定死了自己的上限。 ","date":"2024-10-26","objectID":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/:5:0","series":["记录"],"tags":null,"title":"群体众生相和一些反思","uri":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/#造神与塌房"},{"categories":null,"content":" 6 计算机行业人应该如何才能 Survive？之前知乎上有个问题，问到底是读系统的phD还是ai的phD，哈哈哈。如果你问我，那我自然是读系统方向。人生苦短，为什么不选择自己喜欢做的事情呢？当然了，经济压力会非常大。那就努力吧~ 现在计算机行业的人实在是多。尤其是ai方向，大批非计算机专业的都涌了进去，这行情只会越来越难。资本家当然也更加猖獗，毕竟他们不缺人。当然了，对顶层那些大佬应该是没什么影响的。我觉得，人不能因为现阶段看不到未来，看不到意义，就不去努力了，努力总是能带给人新的惊喜的。加油！ ","date":"2024-10-26","objectID":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/:6:0","series":["记录"],"tags":null,"title":"群体众生相和一些反思","uri":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/#计算机行业人应该如何才能-survive"},{"categories":null,"content":" 7 个人反思总是在社交网络中内耗，我觉得还是应该更多专注于自己的事业。这样也不会去看到那些垃圾信息，还有那些无关的垃圾人。有时候看社交媒体不是为了凑热闹，而是因为担心自己缺乏和外界的交流，害怕自己和时代脱轨，害怕自己在固执中走向岔路。但是又屡屡在同人交流的过程中受伤。 人总是想要在有限的人生中达到自己人生价值的最大化，但是时间不允许我们回到过去，通过动态规划储存多个人生状态，从而找到人生的最优解。因此人生的每一步都是贪心算法。我们总是在衡量贪心算法每一步的效率，从而造成了人生的踟蹰不前。有的人问为什么自己的执行力不够强，那是因为看不到未来。如果告诉你，你这么努力，你在5年后就会成为世界软件巨头的老板，你还会踌躇不前吗？你不会。因此很多时候犹豫和摆烂不是因为懒，是因为迷茫。 但是我们知道，只要努力，就可以创造一些未知的，令人惊艳的东西，只要努力。所以努力前进吧！ ","date":"2024-10-26","objectID":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/:7:0","series":["记录"],"tags":null,"title":"群体众生相和一些反思","uri":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/#个人反思"},{"categories":null,"content":" 8 我的期许 中国的计算机教育可以走向一个更高的水准 中国也可以有优秀、干净、开放、自由的开源平台和软件市场 开源项目是所有人共同贡献的成果，不再是独裁者随意拉屎拉尿的茅厕 计算机新手和巨佬也能平等的交流，不再有任何的辱骂、歧视，也没有畸形的巨佬崇拜 人人皆能对他人有礼貌和尊重 ai 能够真正帮助人类，人类可以去从事一些更加有创造力的活动 资本家不再把人当作纯纯的牛马糟践 ","date":"2024-10-26","objectID":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/:8:0","series":["记录"],"tags":null,"title":"群体众生相和一些反思","uri":"/%E7%BE%A4%E4%BD%93%E4%BC%97%E7%94%9F%E7%9B%B8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/#我的期许"},{"categories":null,"content":" 我有过多次这样的奇遇， 从天堂到地狱只在瞬息之间； 每一朵可爱、温柔的浪花， 都成了突然崛起、随即倾倒的高山。 每一滴海水都变脸变色， 刚刚还是那样美丽、蔚蓝； 旋涡纠缠着旋涡， 我被抛向高空又投进深渊…… 当时我甚至想到过轻生， 眼前一片苦海无边； 放弃了希望就象放弃了舵柄， 在暴力之下只能沉默和哀叹。 今天我才有资格嘲笑昨天的自己， 为昨天落叶似的惶恐感到羞惭； 虚度了多少年华， 船身多次被礁石撞穿…… 千万次在大洋里撒网， 才捕获到一点点生活的经验， 才恍然大悟， 啊！道理原是如此浅显： 你要航行吗？ 必然会有千妖百怪出来阻拦； 暴虐的欺凌是它们的游戏， 制造灭亡是它们唯一的才干。 命中注定我要常常和它们相逢， 因为我的名字叫做船； 面对强大于自身千万倍的对手， 能援救自己的只有清醒和勇敢。 恐惧只能使自己盲目， 盲目只能夸大魔鬼的狰狞嘴脸； 也许我的样子比它们更可怕， 当我以生命相拼，一往无前！ 只要我还有一根完整的龙骨， 绝不驶进避风的港湾； 把生命放在征途上， 让勇敢来决定道路的宽窄、长短。 我完完全全的自由了， 船头成为埋葬它们的铁铲； 我在波浪中有节奏地跳跃， 就象荡着一个巨大的秋千。 即使它们终于把我撕碎， 变成一些残破的木片； 我不会沉沦，决不！ 我还会在浪尖上飞旋。 后来者还会在残片上认出我， 未来的诗人会喟然长叹： “这里有一个幸福的灵魂， 它曾经是一艘前进着的航船……” —— 白桦《船》1980年11月 ","date":"2024-10-26","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于 Wen Gao","uri":"/about/#"},{"categories":null,"content":" 1 关于我","date":"2024-10-26","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于 Wen Gao","uri":"/about/#关于我"},{"categories":null,"content":" 2 我的技术","date":"2024-10-26","objectID":"/about/:2:0","series":null,"tags":null,"title":"关于 Wen Gao","uri":"/about/#我的技术"},{"categories":null,"content":" 3 我的生活","date":"2024-10-26","objectID":"/about/:3:0","series":null,"tags":null,"title":"关于 Wen Gao","uri":"/about/#我的生活"},{"categories":null,"content":" 4 我的信仰","date":"2024-10-26","objectID":"/about/:4:0","series":null,"tags":null,"title":"关于 Wen Gao","uri":"/about/#我的信仰"},{"categories":["rust"],"content":" Warning 在使用rustlings之前，我们需要学习一些基础的rust语法，并且写一些小程序，否则会因为练习的难度过大而被劝退。 ","date":"2024-10-20","objectID":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/:0:0","series":["rust 学习"],"tags":["rust","rustlings","学习记录","编程语言"],"title":"rustlings 通关记录","uri":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/#"},{"categories":["rust"],"content":" 1 环境配置","date":"2024-10-20","objectID":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/:1:0","series":["rust 学习"],"tags":["rust","rustlings","学习记录","编程语言"],"title":"rustlings 通关记录","uri":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/#环境配置"},{"categories":["rust"],"content":" 1.1 Rust环境配置 新建一个仓库，我的叫rustlings-exercises Warning 错误的做法是进入rust-lang/rustlings: 🦀 Small exercises to get you used to reading and writing Rust code!，然后点击fork，得到自己的仓库。对于清华操作系统训练仓库的rustlings练习可以这么干，但是对于rustlings官方的不行。原因是清华的可能修改了rustlings构建的路径。 点击绿色的Code，选择Codespaces，点击create new codespaces on main，创建一个codespaces（不想配置Ubuntu环境的话，可以采取这种懒人做法，也可以采用README中的环境配置方法） 进入codespaces，等待初始化结束。下面我们参考Rust 开发环境配置 - ArceOS Tutorial Book来配置rust开发环境。 首先安装 Rust 版本管理器 rustup 和 Rust 包管理器 cargo，这里我们用官方的安装脚本来安装： bash curl https://sh.rustup.rs -sSf | sh 安装时选择default选项即可。 安装完成后，我们可以重新打开一个终端来让之前设置的环境变量生效。我们也可以手动将环境变量设置应用到当前终端，只需要输入以下命令： bash source $HOME/.cargo/env 接下来验证rustc的版本 bash rustc --version 输出如下： bash @Salvely ➜ /workspaces/rustlings (main) $ rustc --version rustc 1.82.0 (f6e511eec 2024-10-15) 接下来我们配置cargo软件包的源镜像地址，在~/.cargo/config.toml文件中进行如下配置： yaml [source.crates-io] registry = \"https://github.com/rust-lang/crates.io-index\" replace-with = 'ustc' [source.ustc] registry = \"git://mirrors.ustc.edu.cn/crates.io-index\" 接下来安装一些Rust相关的软件包： bash rustup target add riscv64gc-unknown-none-elf rustup component add llvm-tools-preview rustup component add rust-src ","date":"2024-10-20","objectID":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/:1:1","series":["rust 学习"],"tags":["rust","rustlings","学习记录","编程语言"],"title":"rustlings 通关记录","uri":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/#rust环境配置"},{"categories":["rust"],"content":" 1.2 Rustlings环境配置首先我们需要安装rustlings，使用如下命令： bash cargo install rustlings 然后使用如下命令初始化rustlings文件夹： bash rustlings init 输入cd rustlings，来进入rustlings文件夹，并且运行rustlings来启动rustlings： bash cd rustlings rustlings 出现提示语： bash Is this your first time? Don't worry, Rustlings is made for beginners! We are going to teach you a lot of things about Rust, but before we can get started, here are some notes about how Rustlings operates: 1. The central concept behind Rustlings is that you solve exercises. These exercises usually contain some compiler or logic errors which cause the exercise to fail compilation or testing. It's your job to find all errors and fix them! 2. Make sure to have your editor open in the `rustlings/` directory. Rustlings will show you the path of the current exercise under the progress bar. Open the exercise file in your editor, fix errors and save the file. Rustlings will automatically detect the file change and rerun the exercise. If all errors are fixed, Rustlings will ask you to move on to the next exercise. 3. If you're stuck on an exercise, enter `h` to show a hint. 4. If an exercise doesn't make sense to you, feel free to open an issue on GitHub! (https://github.com/rust-lang/rustlings). We look at every issue, and sometimes, other learners do too so you can help each other out! Press ENTER to continue 环境配置成功！ ","date":"2024-10-20","objectID":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/:1:2","series":["rust 学习"],"tags":["rust","rustlings","学习记录","编程语言"],"title":"rustlings 通关记录","uri":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/#rustlings环境配置"},{"categories":["rust"],"content":" 2 Rustlings 漫游首先，rustlings 可以和以下两本书配套使用： The Rust Programming Language - The Rust Programming Language Introduction - Rust By Example 接下来我们熟悉一下Rustlings的一些命令，以便后面更好的做题： bash # 查看rustlings 做题状况 rustlings watch # 查看rustlings 做题状况，只查看一次 rustlings verify # 只验证某个练习 rustlings run [exercise-name] # 运行下一个未解决的问题 rustlings run next # 获取练习提示 rustlings hint [exercise-name] # 获得下一个未解决问题的提示 rustlings hint next # 检查进度 rustlings list # 启用rust-analyzer rustlings lsp # 卸载rustlings（通过删除rustlings文件夹） rm -rf rustlings # 或者通过cargo卸载 cargo uninstall rustlings ","date":"2024-10-20","objectID":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/:2:0","series":["rust 学习"],"tags":["rust","rustlings","学习记录","编程语言"],"title":"rustlings 通关记录","uri":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/#rustlings-漫游"},{"categories":["rust"],"content":" 3 Rustlings 题解","date":"2024-10-20","objectID":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/:3:0","series":["rust 学习"],"tags":["rust","rustlings","学习记录","编程语言"],"title":"rustlings 通关记录","uri":"/rustlings-%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95.md/#rustlings-题解"},{"categories":null,"content":" 选择路线，踏上征程，承担后果 我的计算机学习之路。 学习路线： 刷课 课程源码研究+其他教材阅读 自己造轮子 学习好的开源项目，试着参与开源贡献，成为核心开发者 复现顶会论文 个人项目开发 目标：成为法布里斯贝拉，卡玛克，Jeff Dean 那样做出杰出贡献的计算机科学家。 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:0:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#"},{"categories":null,"content":" 1 Pre Tip cmake部分：使用cmake-examples仓库学习，完整的配置过程参考这里：cmake 配置 数学基础学习部分：见 math-Journey CMake 基础使用学习 cmake 基础学习 dllist 简易实现 cmake 子项目配置 代码静态检查 clang-tidy clang-format cpplint cppcheck valgrind LeakSanitizer 单元测试 boost catch2(这个现在不常用了，因此不一定要学) googletest 文档撰写 doxygen学习 cpack打包 安装 boost测试框架使用学习(使用reverse测试) googletest测试框架使用学习(使用reverse测试) README.md 模板学习, 试着写出一个好的README.md文档，完善项目中的README.md github actions 快速入门课程学习 C++ 项目的 github actions 配置学习 C++ 简单项目模板实现 优化我的 C++ 模板 发布 C++ 模板 熟悉一个成熟的 C++ 项目模板 doctest 学习 为dllist项目添加doctest测试 使用成熟的 C++ 模板来配置dllist项目并成功运行 《DOOM 启世录》阅读 博客文章模板配置 Rustlings 环境配置 数学基础知识学习完成 微积分基础 常微分方程基础 线性代数基础 概率论与数理统计基础 离散与具体数学 格里马尔迪《离散与组合数学》阅读 Ubuntu 开发环境配置 \u0026 学习 《鸟叔的Linux私房菜》读完 vim 和 emacs 安装，把安装过程记录在博客上 vim 学习，用 vim 刷算法题，把刷题过程记录在博客上 emacs 学习，把学习笔记记录在博客上 emacs 插件学习（尤其是 org-mode），把学习过程记录在博客上 其他环境配置完成，把配置过程记录在博客上 《Vim实用技巧》读完 学习Linux，以及如何为Linux操作系统开发软件工具 AI方向学习，学习如何利用AI，开发出AI工具 为Vim开发ai帮助工具 《编码》读完 王爽《汇编语言》读完 《第一行代码》读完（安卓开发书籍） 《软件工程》读完 《Visual C++游戏编程基础》读完 《Can’t hurt me》阅读 ✅ 2025-01-17 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:1:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#pre"},{"categories":null,"content":" 2 刷课记录 Tip 本阶段完成所有的公开课程学习，熟练掌握数学算法+底层系统+图形编程+AI 编程+Web 前后端+软件开发+安全。 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#刷课记录"},{"categories":null,"content":" 2.1 数据结构与算法分析 《深入浅出程序设计竞赛》阅读并完成所有习题 《数据结构与算法分析——C++语言版》阅读并完成所有习题 普林斯顿《算法》第四版阅读并完成所有习题 邓俊辉《数据结构与算法》 阅读并完成所有课后习题 用C++实现所有数据结构与算法 OJ刷完 数据结构课程刷完 CS 61 B sp 18 课程学完 CS 61 B Lab 5 完成 CS 61 B Lab 6 完成 CS 61 B Project 2 需求学习，进行需求分析，制定设计方案 随机迷宫算法学习并使用 Prim 算法实现一个随机迷宫，这个讲得好：C++实现迷宫生成（基于算法：随机 prim)_c++随机生成迷宫-CSDN 博客 CS 61 B Project 2 Phase 1 完成 在 Lab 6 中设置画布大小，并设置双缓冲 熟悉 TERerengine 的画布结构和两个 initialize 方法 CS 61 B Project 2 菜单栏绘制实现 CS 61 B Project 2 游戏界面绘制实现 CS 62 B Project 2 HUD 界面绘制实现 CS 61 B Project 2 用户输入感应实现 CS 61 B Project 2 鼠标悬停位置感应实现 鼠标检测实现 游戏的重新加载实现 CS 61 B Project 2 Phase 2 完成 Week 7-15 内容学习，并完成对应的 HW 和 Project Week 7 Week 8 Week 9 Week 10 Week 11 Week 12 Week 13 Week 14 Week 15 CS 61 B sp 21 课程学完 所有的 Lab Project 0 2048 Project 2 Gitlet HW 2 完成 HW 3 完成 其他 Project 把 18 的搬过去就行 其他资料复习一遍 C++实现各个数据结构 STL中的数据结构实现学习 小型Git实现 CS61B 其他年份的数据结构项目实现 算法课程刷完 《挑战程序设计竞赛》阅读完成并完成所有习题 《算法导论》阅读并完成所有习题 书籍阅读完成 所有公式推导完成 课后习题全部完成 其上的数据结构与算法全部实现（带googletest测试） 《程序设计竞赛入门经典》阅读并完成所有习题 《程序设计竞赛训练指南》阅读并完成所有习题 《程序设计竞赛进阶指南》阅读并完成李煜东《算法竞赛进阶指南》题单 - 题单 - 洛谷 | 计算机科学教育新生态 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:1","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#数据结构与算法分析"},{"categories":null,"content":" 2.2 算法能力强化 OJ 刷题 kuangbin带你飞 题单刷完 Leetcode Medium \u0026 Hard 刷完 USACO 刷完 Codeforces 比赛 AtCoder 比赛 打算法比赛搞钱 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:2","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#算法能力强化"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#系统--系统安全方向"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#计算机体系结构"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#编译原理--编程语言"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#系统构建"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#操作系统"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#计算机网络"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#数据库系统"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#并行与分布式系统"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#系统安全"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#图形化处理与gpu优化"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#高性能计算"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#大数据经典架构"},{"categories":null,"content":" 2.3 系统 \u0026 系统安全方向 2.3.1 计算机体系结构 数字电路 Logisim 模拟软件上的数字电路实现 Verilog 语言学习，使用Verilog语言实现各个基础数字电路 用Verilog 实现一个大的数字电路系统，具体参考各个学校的Project 计算机组成原理 Logisim实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 Verilog 实现 实现单周期的RISC-V/MIPS处理器 实现多周期的RISC-V/MIPS处理器 实现流水线的RISC-V/MIPS处理器 计算机体系结构 实现双发射的高效处理器，能够运行Linux操作系统 香山/南湖架构处理器研究，并提开源贡献 造轮子 南大PA完成 一生一芯项目完成 NEMU代码研究，并进行开源贡献，优化NEMU的开源效率 QEMU代码研究，并进行开源贡献，优化QEMU的运行效率 实现一个简单的RISC-V CPU模拟器 强化RISC-V CPU模拟器，使其能够运行Linux操作系统 添加ARM指令集模拟器 强化ARM指令集模拟器，使其能够运行Linux操作系统 添加MIPS指令集模拟器 强化MIIPS指令集模拟器，使其能够运行Linux操作系统 实现三个指令集架构的三合一选择，使其能够运行Linux操作系统 计算机体系结构论文研读并复现 2.3.2 编译原理 \u0026 编程语言 Nand2Tetris SICP 阅读 Scheme版本书籍阅读并完成课后习题 用Scheme实现Scheme解释器，把实现过程记录在博客上 SICP 学习总结完成 Javascript 版本阅读并完成所有习题 Web 前后端开发技能学习 用Javascript实现Web版本的Scheme解释器，把实现过程记录在博客上 SICP Javascript 版本阅读总结完成 SICP 学习经历总结在博客上 Essential of programming languages 阅读 书籍阅读并完成所有习题 用Scheme实现一个解释器 几种汇编语言学习并实现其汇编器 RISC-V 语言学习 RISC-V 汇编器实现 ARM 语言学习 ARM 汇编器实现 MIPS 语言学习 MIPS 汇编器实现 链接工作学习，并实现链接器 《程序员的自我修养》阅读 CSAPP 编译一章阅读 链接器实现 Parsing Techniques 阅读 编译原理课程全部刷完 Stanford CS143 MIT 6.035 各类函数式语言编译器 \u0026 解释器实现 LISP语言学习 LISP解释器实现 Scheme 语言学习 Scheme 语言解释器实现 Common Lisp 语言学习 Common Lisp 解释器实现 ML 语言学习 ML 编译器实现（虎书） Python 解释器实现 OCmal 语言学习 OCmal 解释器实现 Racket 学习 Racket 解释器实现 Haskell 学习 Haskell 解释器实现 面向对象语言编译器研究 \u0026 实现 Stanford Cool语言编译器源码研究 JVM 源码研究 简单的Java虚拟机实现 侯捷《STL源码剖析》阅读 自己实现小型的STL C++子集的编译器实现（cppgm） Rust 语言学习 Rust 语言编译器研究 动态类型语言编译器实现 Javascript 编译器实现 逻辑语言解释器实现 Paradigms of Artificial Intelligence Programming Prolog 语言解释器实现，学习NLP和CV，在其中加入AI功能和数学模型推理功能 人工智能基础学习 NLP 学习 CV 学习 在Prolog语言中加入数据结构、逻辑推理、认知推理、数学推理功能 学习AI底层架构的性能优化，和人工智能模型的优化，以及人工智能编译器的优化 设计AI推理编译器 深度学习编译器 人工智能学习 深度学习学习 计算机图形学学习 图形编译库实现 做出QT那样的图形库 编程语言设计学习 《程序语言之路》 《Essence of compiler》 类型系统学习 JAVA垃圾回收机制学习 底层编译优化学习 多语言编译选择实现 编译器项目源码研究，并进行开源贡献（优化） CPython gcc ANTLR4 Yacc Lex Flex Bison 找到编译器工作 实现JetBrains全家桶那样的编译器 编译原理相关论文研读并复现 Coq 推理学习 2.3.3 系统构建 《深入理解计算机系统》阅读完成 课程刷完 CIS 2400 (upenn.edu) ✅ 2024-12-28 CSAPP MIT CSE SJTU CSE 系统原理 造轮子 Shell 实现 Malloc 实现 小型文件系统实现 虚拟内存管理实现 网络编程库实现（如moduo学习），实现自己的Socket套接字 进程通信协议学习实现 2.3.4 操作系统 基础理论学习 \u0026 刷课完成 《操作系统概念》阅读完成 《操作系统设计与实现》阅读完成 THU UCore 实验完成 UCore 源码研究 自己用C语言搓一个小型操作系统，运行在我自己的CPU模拟器上 Rust 资源收集 Rust 基础学习 Rustlings 完成 RCore 实验完成 自己用Rust实现一个小型的操作系统，运行QEMU上 MIT 6.081课程学习 XV6 Lab完成 XV6 源码研究 优化我自己的C语言操作系统 用Rust重写XV6，运行在QEMU上 优化我自己的Rust操作系统 PintOS Lab完成 PintOS 源码研究 优化我自己的C语言操作系统 PintOS 使用Rust重写，运行在QEMU上 计算机网络学习 为操作系统添加网络协议栈，实现其联网 《Linux内核源码剖析》阅读 Linux Kernel 0.11 源码研究 Linux内核研究，提交开源贡献 开发出带shell和GUI的操作系统，可以在其上打游戏 操作系统顶级会议论文研读并复现 2.3.5 计算机网络 计算机网络课程刷完 用C语言实现一个小型的TCP/IP协议栈 给我自己的操作系统添加一个协议栈，使其联网 对照RFC文档，实现Socket套接字 计算机网络顶级会议论文研读并复现 2.3.6 数据库系统 《数据库系统概念》阅读 《数据库系统实现》阅读 数据库课程刷完 造轮子 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 分布式系统学习 为数据库添加实现分布式协议 实现 Web 版本数据库 找到数据库工作 实现支持KV-Store/NoSQL/mysql协议/分布式协议/Web连接/OLTP/OLAP的数据库 2.3.7 并行与分布式系统 MIT 6.824 课程学习完成 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 为数据库添加分布式协议 Tikv talent-plan 学习 Tikv 源码研究，并提一些优化 TIDB talent-plan 学习 TIDB 源码研究，并提一些优化 找到数据库工作 为我自己的数据库加入分布式机制 2.3.8 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 研究操作系统内核安全机制 给系统提安全漏洞补丁 称为计算机系统黑客！ 为我自己的系统（操作系统、硬件、数据库）加安全机制 研究新的安全机制 硬件安全 2.3.9 图形化处理与GPU优化 2.3.10 高性能计算 2.3.11 大数据经典架构 2.3.12 AI推理引擎架构","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#ai推理引擎架构"},{"categories":null,"content":" 2.4 Web 前后端开发 \u0026 移动软件开发 软件工程思想 单元测试 test-driven development behavior-driven development CI/CD工具学习（为devops开发流程学习做准备） github actions学习 Jenkins学习 Docker学习 完善modern-Cpp-template中的docker Kubernetes学习 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:4","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#web-前后端开发--移动软件开发"},{"categories":null,"content":" 2.5 密码学，网络安全，软件安全和嵌入式安全 密码学学习 网络安全学习 二进制方向学习 逆向工程学习 软件安全学习 嵌入式软硬件安全学习 CTF 学习 漏洞挖掘学习 Security Bounty 漏洞扫描软件开发 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:5","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#密码学网络安全软件安全和嵌入式安全"},{"categories":null,"content":" 2.6 AI 方向 利用AI进行一些股票预测、量化交易、赛马预测搞钱 用AI训练国际象棋，自己玩 实现逻辑推理AI 利用AI打数据科学竞赛赚钱 用AI帮助进行动物迁徙预测，进行动物保护活动 用AI进行阿尔兹海默症的靶点寻找和疾病预测，帮助防治阿尔兹海默症 用AI进行全球环境预测，帮助拯救全球变暖 用AI帮助非洲同志获得更好的生活 AI 应用软件开发 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:6","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#ai-方向"},{"categories":null,"content":" 2.7 电子信息，数字信号处理和通信相关学习 物理基础 数字电路 数字电路绘制软件 模拟电路 信号与系统 通信原理 信息论与编码 数字音频处理 数字图像处理 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:7","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#电子信息数字信号处理和通信相关学习"},{"categories":null,"content":" 2.8 嵌入式系统，物联网和FPGA 2.8.1 面包板 2.8.2 单片机 研究全屋互联系统 2.8.3 Auduino探索 2.8.4 树莓派 2.8.5 FPGA 购买 PYNQ-Z1来玩玩 给Surface笔记本安装Arch Linux操作系统 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:8","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#嵌入式系统物联网和fpga"},{"categories":null,"content":" 2.8 嵌入式系统，物联网和FPGA 2.8.1 面包板 2.8.2 单片机 研究全屋互联系统 2.8.3 Auduino探索 2.8.4 树莓派 2.8.5 FPGA 购买 PYNQ-Z1来玩玩 给Surface笔记本安装Arch Linux操作系统 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:8","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#面包板"},{"categories":null,"content":" 2.8 嵌入式系统，物联网和FPGA 2.8.1 面包板 2.8.2 单片机 研究全屋互联系统 2.8.3 Auduino探索 2.8.4 树莓派 2.8.5 FPGA 购买 PYNQ-Z1来玩玩 给Surface笔记本安装Arch Linux操作系统 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:8","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#单片机"},{"categories":null,"content":" 2.8 嵌入式系统，物联网和FPGA 2.8.1 面包板 2.8.2 单片机 研究全屋互联系统 2.8.3 Auduino探索 2.8.4 树莓派 2.8.5 FPGA 购买 PYNQ-Z1来玩玩 给Surface笔记本安装Arch Linux操作系统 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:8","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#auduino探索"},{"categories":null,"content":" 2.8 嵌入式系统，物联网和FPGA 2.8.1 面包板 2.8.2 单片机 研究全屋互联系统 2.8.3 Auduino探索 2.8.4 树莓派 2.8.5 FPGA 购买 PYNQ-Z1来玩玩 给Surface笔记本安装Arch Linux操作系统 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:8","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#树莓派"},{"categories":null,"content":" 2.8 嵌入式系统，物联网和FPGA 2.8.1 面包板 2.8.2 单片机 研究全屋互联系统 2.8.3 Auduino探索 2.8.4 树莓派 2.8.5 FPGA 购买 PYNQ-Z1来玩玩 给Surface笔记本安装Arch Linux操作系统 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:8","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#fpga"},{"categories":null,"content":" 2.9 计算机图形学 研究显存，GPU和GUI实现 GPU优化学习 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:9","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#计算机图形学"},{"categories":null,"content":" 2.10 理论计算机 数学学习任务全部完成，要从计算机的思维模式中走出来，去适应抽象的思维模式，这需要大量的强化训练达到，没有谁是天生的 算法设计与分析 MIT 算法设计分析课程学习并完成所有Problem Sets 和 Exam 斯坦福大学算法设计与分析学习 UCB CS70 UCB CS170 UCB Leetcode Decal Stanford Programming Contest 课程 计算理论 油管Introduction to Theory of Computation系列教程学习 ✅ 2025-01-14 中途参考了以下视频 CS 3350: Automata, Computability, and Formal Languages (Fall 2020) 这门课的Notes写的极好，尤其是Turing machine部分 Theory of Computation ( TOC ) or Formal Languages and Automata Theory ( FLAT ) - YouTube 这个playlist 讲习题讲的特别好，不会的题目就看他的 pumping lemma 理解：Lecture 11/65: Pumping Lemma (For Regular Languages) ✅ 2025-01-07 Simplification of CFG || Reduction of CFG || Minimization of CFG || Theory of Computation || TOC CFG简化学习 ✅ 2025-01-07 Greibach Normal Form || Converting CFG to GNF || TOC || FLAT || Theory of Computation || Example 3 ✅ 2025-01-08 Lecture 19/65: The Pumping Lemma for CFLs ✅ 2025-01-08 Pumping Lemma for Context-Free Languages: Four Examples ✅ 2025-01-08 这个视频讲的相当好！ 【麻省理工公开课】理论计算——下推自动机、CFG到PDA的转换和反向转换_哔哩哔哩_bilibili ✅ 2025-01-09 Lecture 20/65: PDAs: Pushdown Automata ✅ 2025-01-09 CFG to PDA Conversion || Construction of PDA from CFG || Equivalence of CFG and PDA || TOC || FLAT ✅ 2025-01-10 CFGtoPDA.pdf ✅ 2025-01-10 这个写的超级清楚 PDAtoCFG.pdf ✅ 2025-01-10 这个也写的很清楚 Lecture 21/65: Equivalence of CFGs and PDAs (part 1) ✅ 2025-01-11 Lecture 22/65: Equivalence of CFGs and PDAs (part 2) ✅ 2025-01-11 系列教程的剩下部分学完（PCP的undecidability部分讲的不是很好，需要参考其他视频，但是总体来说图灵机部分讲的不错，很简明清晰，但是后面的Reduce和P还有NP问题部分没有讲解，有点遗憾了） ✅ 2025-01-14 Theory of Computation - YouTube 这个playlist剩下的图灵机部分学完 ✅ 2025-01-14 图灵机往后的部分当真让人看不下去，老师在一些东西上讲的不是很清楚，而且有一些口吃的问题 《计算理论导引》阅读完成 Example 3: From DFA, to GNFA, to Regular Expression课本上DFA到GNFA的简化过程讲解的不是很详细，比较复杂的例子可以参考这个题目 GNFA and Qrip part1 课本例题讲解 GNFA and Qrip part2 1.12 1.13 1.23 1.58 1.59 题目不会做 1.56 automata - Show a set of numbers, binary representation of which is a regular language, but the ternary representation is not. - Mathematics Stack Exchange 这个题目的证明比较难 Theory of Computer Science: Automata, Languages and Computation 阅读并完成所有习题 《形式语言与自动机理论》林兹阅读并完成所有习题 《自动机理论、语言和计算导论》阅读完成并完成所有习题 《Elements of theory of computation》阅读 《Swiching and Finite Automata Theory》阅读完成并完成所有习题 计算复杂性理论 阿罗拉《计算复杂性理论》阅读 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:2:10","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#理论计算机"},{"categories":null,"content":" 3 算法刷题准备 USACO 训练完成 Project Euler 刷完 Codeforces 达到红名, 拿到 Legendary Grandmaster 称号 Atcoder rating 达到 2800 Leetcode Medium 和 hard 习题刷完 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:3:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#算法刷题准备"},{"categories":null,"content":" 4 面试准备 系统方向八股搜集 系统方向八股准备完成 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:4:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#面试准备"},{"categories":null,"content":" 5 课程源码研究 Tip 本阶段研究前面部分经典公开课程的课程源码，必须研究透彻，巩固基本知识。 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:5:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#课程源码研究"},{"categories":null,"content":" 6 造轮子 Tip 本阶段实现一些经典轮子的再造，在造轮子的过程中需要思考如何更好地设计。 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#造轮子"},{"categories":null,"content":" 6.1 环境配置 Linux 系统管理和配置学习 配置 Arch Linux ，作为后期主力环境 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:1","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#环境配置"},{"categories":null,"content":" 6.2 数据结构 gitlet TinySTL ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:2","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#数据结构"},{"categories":null,"content":" 6.3 编译原理 cpp-python mini-C javascript interpreter Scheme interpreter Scala compiler ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:3","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#编译原理"},{"categories":null,"content":" 6.4 计算机体系结构 CPU 模拟器，可运行 Linux ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:4","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#计算机体系结构-1"},{"categories":null,"content":" 6.5 系统构建 一些小的操作系统构件，如 FAT32 文件系统 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:5","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#系统构建-1"},{"categories":null,"content":" 6.6 操作系统 一个小型操作系统，可以运行在 ARM/RISCV32/RISCV64 机器上 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:6","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#操作系统-1"},{"categories":null,"content":" 6.7 计算机网络 小型 TCP/IP 协议栈，让操作系统联网 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:7","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#计算机网络-1"},{"categories":null,"content":" 6.8 数据库系统 小型关系型数据库 KV-Store 数据库 NoSQL 数据库 实现 mysql 协议，支持 mysql 连接 为数据库添加实现分布式协议 实现 Web 版本数据库 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:8","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#数据库系统-1"},{"categories":null,"content":" 6.9 并行与分布式系统 C++实现 raftcore 分布式算法 C++实现 Paxos 分布式算法 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:9","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#并行与分布式系统-1"},{"categories":null,"content":" 6.10 系统安全 成为逆向工程和 binary hacking/binary exploition, pwn 的大佬 给系统提安全漏洞补丁 称为计算机系统黑客！ ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:10","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#系统安全-1"},{"categories":null,"content":" 6.11 计算机图形学 制作 FPS 射击游戏，并且将其移植到支持 RISC-V 指令集架构的操作系统上 在 RISC-V 操作系统中实现 GPU 优化，优化游戏体验 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:11","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#计算机图形学-1"},{"categories":null,"content":" 6.12 AI 方向 \u0026 经济学方向 实现高频量化交易系统 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:6:12","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#ai-方向--经济学方向"},{"categories":null,"content":" 7 经典开源项目研究 Tip 本阶段根据前面造轮子时期遇到的问题，研究一些经典的开源项目，提出 Patch 和优化甚至研究方法，努力成为 core developer！ 编译原理 C/C++ compiler JAVA 源码 CPython Scheme Javascript Typescript Haskell Prolog Rust LLVM ANLTR 计算机体系结构 南京大学 nemu Qemu Scala 香山处理器架构 OS ucore rcore xv6 pintOS Nachos Chcore Linux DB levelDB MySQL PostgreSQL MariaDB TiDB RocksDB TiKV 分布式协议 paxos raft 图形学轮子 opengl vulkun direct3D 游戏引擎 Unreal ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:7:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#经典开源项目研究"},{"categories":null,"content":" 8 顶会论文阅读 \u0026 复现 Tip 本阶段搜集一些系统顶会，并且对其系统进行复现，根据论文对已有的系统进行一些优化。本阶段需要达到毕业博士生的科研水平。 系统方向顶会搜集 利用 AI 提取顶会关键词，整理顶会论文的 topic 及其发展历史 所有系统顶会阅读 复现顶会论文 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:8:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#顶会论文阅读--复现"},{"categories":null,"content":" 9 自我提升书籍阅读 Tip 本阶段阅读一些自我提升的书籍，增强自己对社会的认知水平、自己的思想水平、以及领导力。 《黑客：计算机革命的英雄》阅读 《Borland 传奇》阅读 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:9:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#自我提升书籍阅读"},{"categories":null,"content":" 10 个人项目开发 Tip 本阶段进行个人项目的开发，目的是像卡玛克和法布里斯贝拉那样实现一些改变世界的工程项目。 实现在自己的CPU上运行自己的操作系统、编译器、网络协议栈，携带图形界面，并且能运行超级玛丽和一些小游戏 构造出 RISC-V 架构上的全套系统，包括 CPU 模拟器、编译器/解释器、操作系统、网络协议栈、数据库等等 把那些成熟的开发产品都学习到位 手机上的创业idea全部实现完成 实现对人，对社会有用的产品，部分可以卖给企业，部分可以自己维护赚钱 失业者救助交流论坛开发 心理聊天室开发 利用自己的技术开发很多对社会有帮助的项目，无论是盈利还是非盈利 实现计算机科学一站式指导项目 做出足够震撼和足够有影响力的开源项目，要对自己有自信 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:10:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#个人项目开发"},{"categories":null,"content":" 11 找到工作并赚到钱 Tip 本阶段的目的是找到年薪百万的工作并赚到钱，攒钱 1000 万。 Security Bug Bounty，成为 hackerone 排行榜榜首 TopCoder CTF 游戏开发 外包接单 App 开发 Facebook Hacker cup 奖金 阿里天池、Kaggle 及其他数据科学竞赛奖金 留学生写作业 英语家教 设计代做 利用AI进行一些股票预测、量化交易、赛马预测搞钱 找到字节跳动岗位工作 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:11:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#找到工作并赚到钱"},{"categories":null,"content":" 12 发表系统顶级会议论文 📅 2025-7-16 SIGMOD 📅 2025-7-19 ICSE 📅 2025-9-17 FAST 9-17 📅 2025-9-26 EuroSys 9-26 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:12:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#发表系统顶级会议论文"},{"categories":null,"content":" 13 终极目标 申请到MIT PDos Lab的phD，进行编译原理、操作系统、分布式系统、系统安全和数据库方向的研究 成为卡马克和法布里斯贝拉、Jeff Dean 那样的人，要做最棒的系统工程师、电子信息工程师和游戏工程师，在计算机行业打出名声，成为大富翁 ","date":"2024-08-25","objectID":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/:13:0","series":["记录"],"tags":null,"title":"计算机科学之路","uri":"/roadmap/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B9%8B%E8%B7%AF/#终极目标"},{"categories":["Documentation"],"content":"这篇文档将展示如何在 DoIt 中使用 GoAT 和 Mermaid 创建 SVG 图表。","date":"2022-02-28","objectID":"/create-diagrams/","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/"},{"categories":["Documentation"],"content":" Note 你需要使用 Hugo v0.93.0 或更新的版本来创建自定义图表。 如果你不得不使用旧版的 Hugo，你可以使用 mermaid shortcode。 ","date":"2022-02-28","objectID":"/create-diagrams/:0:0","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#"},{"categories":["Documentation"],"content":" 1 GoATGoATGo ASCII Tool 是 markdeep.mini.js 图像生成器的 Go 语言实现。 要使用 GoAT，只需将 ASCII 输入放在代码块中，并将语言设置为 goat。 markdown ```goat // ASCII input here ``` 以下是使用 GoAT 生成 SVG 的一些示例。 查看更多示例 。 ","date":"2022-02-28","objectID":"/create-diagrams/:1:0","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#goat"},{"categories":["Documentation"],"content":" 1.1 树 markdown ```goat . . . .--- 1 .-- 1 / 1 / \\ | | .---+ .-+ + / \\ .---+---. .--+--. | '--- 2 | '-- 2 / \\ 2 + + | | | | ---+ ---+ + / \\ / \\ .-+-. .-+-. .+. .+. | .--- 3 | .-- 3 \\ / 3 / \\ / \\ | | | | | | | | '---+ '-+ + 1 2 3 4 1 2 3 4 1 2 3 4 '--- 4 '-- 4 \\ 4 ``` 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 ","date":"2022-02-28","objectID":"/create-diagrams/:1:1","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#树"},{"categories":["Documentation"],"content":" 1.2 重叠 markdown ```goat .-. .-. .-. .-. .-. .-. | | | | | | | | | | | | .---------. .--+---+--. .--+---+--. .--| |--. .--+ +--. .------|--. | | | | | | | | | | | | | | | | | | '---------' '--+---+--' '--+---+--' '--| |--' '--+ +--' '--|------' | | | | | | | | | | | | '-' '-' '-' '-' '-' '-' ``` ","date":"2022-02-28","objectID":"/create-diagrams/:1:2","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#重叠"},{"categories":["Documentation"],"content":" 1.3 线条装饰 markdown ```goat ________ o * * .--------------. *---+--. | | o o | ^ \\ / | .----------. | | | '--* -+- | | v / \\ / | | \u003c------. | | | '-----\u003e .---(---' ---\u003e*\u003c--- / .+-\u003e*\u003c--o----' | | | | | \u003c--' ^ ^ | | | | | ^ \\ | '--------' | | \\/ *-----' o |\u003c-----\u003e| '-----' |__| v '------------' | /\\ *---------------' ``` ","date":"2022-02-28","objectID":"/create-diagrams/:1:3","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#线条装饰"},{"categories":["Documentation"],"content":" 1.4 线端 markdown ```goat o--o *--o / / * o o o o o * * * * o o o o * * * * o o o o * * * * o--* *--* v v ^ ^ | | | | | | | | \\ \\ \\ \\ \\ \\ \\ \\ / / / / / / / / o--\u003e *--\u003e * o / / o * v ' o * v ' o * v \\ o * v \\ o * v / o * v / o--- *--- ^ ^ ^ ^ . . . . ^ ^ ^ ^ \\ \\ \\ \\ ^ ^ ^ ^ / / / / | | * o \\ \\ * o | | | | | | | | \\ \\ \\ \\ \\ \\ \\ \\ / / / / / / / / v v ^ ^ v v ^ ^ o * v ' o * v ' o * v \\ o * v \\ o * v / o * v / * o | | * o \\ \\ \u003c--o \u003c--* \u003c--\u003e \u003c--- ---o ---* ---\u003e ---- *\u003c-- o\u003c-- --\u003eo --\u003e* ``` ","date":"2022-02-28","objectID":"/create-diagrams/:1:4","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#线端"},{"categories":["Documentation"],"content":" 1.5 点网格 markdown ```goat o o o o o * * * * * * * o o * o o o * * * o o o · * · · · · · · o o o o o * * * * * o o o o * o o o o * * * * * o * * · * * · · · · · · o o o o o * * * * * o * o o o o o o o o * * * * * o o o o o · o · · o · · * * · o o o o o * * * * * o * o o o o o o o * * * * o * o o · · · · o · · * · o o o o o * * * * * * * * * o o o o * * * o * o · · · · · · · * ``` · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · ","date":"2022-02-28","objectID":"/create-diagrams/:1:5","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#点网格"},{"categories":["Documentation"],"content":" 1.6 大节点 markdown ```goat .---. .-. .-. .-. .-. | A +-----\u003e| 1 +\u003c----\u003e| 2 |\u003c----+ 4 +------------------. | 8 | '---' '-' '+' '-' | '-' | ^ | ^ v | v | .-. .-+-. .-. .-+-. .-. .+. .---. | 3 +----\u003e| B |\u003c-----\u003e| 5 +----\u003e| C +----\u003e| 6 +----\u003e| 7 |\u003c----\u003e| D | '-' '---' '-' '---' '-' '-' '---' ``` A 1 2 3 4 B 5 C 6 8 7 D ","date":"2022-02-28","objectID":"/create-diagrams/:1:6","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#大节点"},{"categories":["Documentation"],"content":" 1.7 小网格 markdown ```goat ___ ___ .---+---+---+---+---. .---+---+---+---. .---. .---. ___/ \\___/ \\ | | | | | | / \\ / \\ / \\ / \\ / | +---+ | / \\___/ \\___/ +---+---+---+---+---+ +---+---+---+---+ +---+ +---+ \\___/ b \\___/ \\ | | | b | | | \\ / \\a/ \\b/ \\ / \\ | +---+ | / a \\___/ \\___/ +---+---+---+---+---+ +---+---+---+---+ +---+ b +---+ \\___/ \\___/ \\ | | a | | | | / \\ / \\ / \\ / \\ / | a +---+ | \\___/ \\___/ '---+---+---+---+---' '---+---+---+---' '---' '---' ``` a b a b a b a b ","date":"2022-02-28","objectID":"/create-diagrams/:1:7","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#小网格"},{"categories":["Documentation"],"content":" 1.8 大网格 markdown ```goat .----. .----. / \\ / \\ .-----+-----+-----. + +----+ +----. | | | | .-----+-----+-----+-----+ \\ / \\ / \\ | | | | / / / / / +----+ B +----+ + +-----+-----+-----+ +-----+-----+-----+-----+ / \\ / \\ / | | | | / / / / / + A +----+ +----+ | | B | | +-----+-----+-----+-----+ \\ / \\ / \\ +-----+-----+-----+ / / A / B / / '----+ +----+ + | | | | +-----+-----+-----+-----+ \\ / \\ / | A | | | / / / / / '----' '----' '-----+-----+-----' '-----+-----+-----+-----+ ``` A B A B A B ","date":"2022-02-28","objectID":"/create-diagrams/:1:8","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#大网格"},{"categories":["Documentation"],"content":" 1.9 复杂图表 markdown ```goat +-------------------+ ^ .---. | A Box |__.--.__ __.--\u003e | .-. | | | | '--' v | * |\u003c--- | | +-------------------+ '-' | | Round *---(-. | .-----------------. .-------. .----------. .-------. | | | | Mixed Rounded | | | / Diagonals \\ | | | | | | | \u0026 Square Corners | '--. .--' / \\ |---+---| '-)-' .--------. '--+------------+-' .--. | '-------+--------' | | | | / Search / | | | | '---. | '-------' | '-+------' |\u003c----------\u003e| | | | v Interior | ^ ' \u003c---' '----' .-----------. ---. .--- v | .------------------. Diag line | .-------. +---. \\ / . | | if (a \u003e b) +---. .---\u003e| | | | | Curved line \\ / / \\ | | obj-\u003efcn() | \\ / | '-------' |\u003c--' + / \\ | '------------------' '--' '--+--------' .--. .--. | .-. +Done?+-' .---+-----. | ^ |\\ | | /| .--+ | | \\ / | | | Join \\|/ | | Curved | \\| |/ | | \\ | \\ / | | +----\u003e o --o-- '-' Vertical '--' '--' '-- '--' + .---. \u003c--+---+-----' | /|\\ | | 3 | v not:line 'quotes' .-' '---' .-. .---+--------. / A || B *bold* | ^ | | | Not a dot | \u003c---+---\u003c-- A dash--is not a line v | '-' '---------+--' / Nor/is this. --- ``` \u0026 A M S i o i q f b B x u j o e a ( - x d r a \u003e e f R \u003e c o C n u o b ( n r ) ) d n e e J d r o s i n N o R D t o i u a a n g d d l o i t n e D i a g o n a l s C V u e r r v t e i d c a l n o t A N C : o u l d r r i A a / I v n s i n e e h s t d - e - t r l B i h i i s i o n ' s r e q n . u * o o b t t o e l a s d ' * l i n e D o n S e e ? a r c 3 h ","date":"2022-02-28","objectID":"/create-diagrams/:1:9","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#复杂图表"},{"categories":["Documentation"],"content":" 2 MermaidMermaid 是一个基于 JavaScript 的图表工具，它允许您使用文本和代码创建图表和可视化。 要使用 Mermaid，只需将 Mermaid 的代码输入放在代码块中，并将语言设置为 mermaid。 markdown ```mermaid // mermaid diagram code here ``` 下面是一些使用 Mermaid 生成的 SVG 图表示例。 ","date":"2022-02-28","objectID":"/create-diagrams/:2:0","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#mermaid"},{"categories":["Documentation"],"content":" 2.1 流程图All [Flowcharts](https://mermaid-js.github.io/mermaid/#/./flowchart?id=flowcharts-basic-syntax ) are composed of nodes, geometric shapes and edges, the arrows or lines. The mermaid code defines the way that these nodes and edges are made and interact. markdown ```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ","date":"2022-02-28","objectID":"/create-diagrams/:2:1","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#流程图"},{"categories":["Documentation"],"content":" 2.2 序列图A [Sequence diagram](https://mermaid-js.github.io/mermaid/#/./sequenceDiagram ) is an interaction diagram that shows how processes operate with one another and in what order. markdown ```mermaid sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! ``` sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! ","date":"2022-02-28","objectID":"/create-diagrams/:2:2","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#序列图"},{"categories":["Documentation"],"content":" 2.3 甘特图A Gantt chart is a type of bar chart, first developed by Karol Adamiecki in 1896, and independently by Henry Gantt in the 1910s, that illustrates a project schedule and the amount of time it would take for any one project to finish. Gantt charts illustrate numbers of days between the start and finish dates of the terminal elements and summary elements of a project. markdown ```mermaid gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d ``` gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d ","date":"2022-02-28","objectID":"/create-diagrams/:2:3","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#甘特图"},{"categories":["Documentation"],"content":" 2.4 类图The class diagram is the main building block of object-oriented modelling. It is used for general conceptual modelling of the structure of the application, and detailed modelling translating the models into programming code. Class diagrams can also be used for data modelling. The classes in a class diagram represent both the main elements, interactions in the application, and the classes to be programmed. markdown ```mermaid classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label ``` classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label ","date":"2022-02-28","objectID":"/create-diagrams/:2:4","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#类图"},{"categories":["Documentation"],"content":" 2.5 Git 图 markdown ```mermaid gitGraph commit branch hotfix checkout hotfix commit branch develop checkout develop commit id:\"ash\" tag:\"abc\" branch featureB checkout featureB commit type:HIGHLIGHT checkout main checkout hotfix commit type:NORMAL checkout develop commit type:REVERSE checkout featureB commit checkout main merge hotfix checkout featureB commit checkout develop branch featureA commit checkout develop merge hotfix checkout featureA commit checkout featureB commit checkout develop merge featureA branch release checkout release commit checkout main commit checkout release merge main checkout develop merge release ``` gitGraph commit branch hotfix checkout hotfix commit branch develop checkout develop commit id:\"ash\" tag:\"abc\" branch featureB checkout featureB commit type:HIGHLIGHT checkout main checkout hotfix commit type:NORMAL checkout develop commit type:REVERSE checkout featureB commit checkout main merge hotfix checkout featureB commit checkout develop branch featureA commit checkout develop merge hotfix checkout featureA commit checkout featureB commit checkout develop merge featureA branch release checkout release commit checkout main commit checkout release merge main checkout develop merge release ","date":"2022-02-28","objectID":"/create-diagrams/:2:5","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#git-图"},{"categories":["Documentation"],"content":" 2.6 实体关系图 - 实验性An entity–relationship diagram (or ER diagram) describes interrelated things of interest in a specific domain of knowledge. A basic ER diagram is composed of entity types (which classify the things of interest) and specifies relationships that can exist between entities (instances of those entity types). markdown ```mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ","date":"2022-02-28","objectID":"/create-diagrams/:2:6","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#实体关系图---实验性"},{"categories":["Documentation"],"content":" 2.7 用户旅程图User journey diagrams describe at a high level of detail exactly what steps different users take to complete a specific task within a system, application or website. This technique shows the current (as-is) user workflow, and reveals areas of improvement for the to-be workflow. markdown ```mermaid journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me ``` journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me ","date":"2022-02-28","objectID":"/create-diagrams/:2:7","series":["how-to-doit"],"tags":["diagram","markdown"],"title":"如何在 DoIt 中创建图表","uri":"/create-diagrams/#用户旅程图"},{"categories":["Documentation"],"content":"Guide to setup PWA in DoIt","date":"2021-05-10","objectID":"/pwa-support/","series":null,"tags":["PWA"],"title":"PWA 支持","uri":"/pwa-support/"},{"categories":["Documentation"],"content":"了解如何在 DoIt 主题中配置渐进式网络应用程序 (PWA). ","date":"2021-05-10","objectID":"/pwa-support/:0:0","series":null,"tags":["PWA"],"title":"PWA 支持","uri":"/pwa-support/#"},{"categories":["Documentation"],"content":" 1 什么是 PWA？渐进式网络应用程序(PWA)是运用现代的 Web API 以及传统的渐进式增强策略来创建跨平台网络应用程序.这些应用无处不在、功能丰富, 使其具有与原生应用相同的用户体验. ","date":"2021-05-10","objectID":"/pwa-support/:1:0","series":null,"tags":["PWA"],"title":"PWA 支持","uri":"/pwa-support/#什么是-pwa"},{"categories":["Documentation"],"content":" 2 为什么要配置 PWA？你并不需要将你的站点配置为一个 PWA. 传统的网站足以满足你想要分享的所有内容.但是, PWA 带来了一些可能有用的额外好处. 在用户安装 PWA 后, 页面将由 service worker 自动缓存, 这使得从第二次访问开始页面将被快速加载. 用户始终可以在离线时访问缓存的页面. 这些功能可能对某些网站（例如此文档站点）很有用, 但是将个人博客配置为 PWA 就没有多少意义.当然一切都取决于你的选择, 无论如何 DoIt 主题都将为你提供开启此功能的选项. ","date":"2021-05-10","objectID":"/pwa-support/:2:0","series":null,"tags":["PWA"],"title":"PWA 支持","uri":"/pwa-support/#为什么要配置-pwa"},{"categories":["Documentation"],"content":" 3 如何将使用 DoIt 主题的静态网站配置为 PWA?","date":"2021-05-10","objectID":"/pwa-support/:3:0","series":null,"tags":["PWA"],"title":"PWA 支持","uri":"/pwa-support/#如何将使用-doit-主题的静态网站配置为-pwa"},{"categories":["Documentation"],"content":" 3.1 配置 site.webmanifest你需要在 /static 文件夹下创建名为 site.webmanifest 的文件, 并在此文件提供有关你的 PWA 的信息. 以下是必填参数. name [必须] 你的 PWA 的名称. short_name [必须] 你的 PWA 的简称. start_url [必须] 你的 PWA 的起始地址.请默认填写\"/\". icons [必须] 你的 PWA 的图标.你可以将网站的 favicon 作为图标. 您还可以在 site.webmanifest 中设置其他可选值, 查看这篇文档来了解更多. 这是一份示例 site.webmanifest 文件. json { \"name\": \"DoIt Theme Documentation\", \"short_name\": \"DoIt Docs\", \"start_url\": \"/\", \"description\": \"The documentation site for Hugo DoIt Theme\", \"theme_color\": \"#ffffff\", \"background_color\": \"#ffffff\", \"orientation\": \"portrait\", \"display\": \"standalone\", \"icons\": [ { \"src\": \"/android-chrome-192x192.png\", \"sizes\": \"192x192\", \"type\": \"image/png\" }, { \"src\": \"/android-chrome-512x512.png\", \"sizes\": \"512x512\", \"type\": \"image/png\" }, { \"src\": \"/apple-touch-icon.png\", \"sizes\": \"180x180\", \"type\": \"image/png\", \"purpose\": \"any maskable\" } ] } ","date":"2021-05-10","objectID":"/pwa-support/:3:1","series":null,"tags":["PWA"],"title":"PWA 支持","uri":"/pwa-support/#配置-sitewebmanifest"},{"categories":["Documentation"],"content":" 3.2 配置离线页面离线页面将在访客离线访问未缓存的页面时显示. 在/content目录下创建offline.md并在其中编写离线提示. Permalink 你需要确保离线页面的 Permalink 是 /offline, 否则你需要手动更改 service worker 中 OFFLINE_CACHE_FILES 和 OFFLINE_PAGE 的值. i18n 目前离线页面不支持 i18n, 如果你运行的是多语言网站, 请考虑在同一页面上编写多条不同语言的离线消息. 这是一个示例离线页面. md --- title: \"Offline\" --- \u003e 你没有连接至互联网, 只有缓存的页面可用. ","date":"2021-05-10","objectID":"/pwa-support/:3:2","series":null,"tags":["PWA"],"title":"PWA 支持","uri":"/pwa-support/#配置离线页面"},{"categories":["Documentation"],"content":" 3.3 开启 enablePWA 选项前往 config.toml, 添加/修改 [params] 配置项下 enablePWA 选项的值为 true. toml [params] # ... enablePWA = true ","date":"2021-05-10","objectID":"/pwa-support/:3:3","series":null,"tags":["PWA"],"title":"PWA 支持","uri":"/pwa-support/#开启-enablepwa-选项"},{"categories":["Documentation"],"content":" 4 安装并使用你的 PWA如果一切顺利, 现在当你访问你的网站时, 浏览器将显示一个安装按钮. 安装 PWA 单击“安装”后, 你的网站将被安装为一个本地的原生应用程序. 安装完成 大功告成！你已成功将你的静态网站配置为了一个 PWA 🎉 如果你在配置过程中有任何问题, 你可以通过浏览器调试工具中的 Console 与 Application 面板来进行调试.你也可以用PWA Builder来检查你的网站以获得更多信息.你可以创建一个 discussion 来获得社区帮助或者提交 issue 来报告你遇到的任何 bug. ","date":"2021-05-10","objectID":"/pwa-support/:4:0","series":null,"tags":["PWA"],"title":"PWA 支持","uri":"/pwa-support/#安装并使用你的-pwa"},{"categories":["documentation"],"content":"DoIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode.","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"DoIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode. ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:0:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#"},{"categories":["documentation"],"content":" 1 style 注意 Hugo extended 版本对于 style shortcode 是必需的. style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持 SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 一个 style 示例: markdown {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下: This is a right-aligned paragraph. ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:1:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#style"},{"categories":["documentation"],"content":" 2 link link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: markdown {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: markdown {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:2:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#link"},{"categories":["documentation"],"content":" 3 image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lightgallery.js. 支持本地资源引用的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. optimise [可选] 图片是否需要被优化，覆盖全局配置。 cacheRemote [可选] 是否缓存远程图片，覆盖全局配置。 一个 image 示例: markdown {{\u003c image src=\"/images/lighthouse.webp\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.webp\" src_l=\"/images/lighthouse-large.webp\" \u003e}} 呈现的输出效果如下: Lighthouse (image) ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:3:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#image"},{"categories":["documentation"],"content":" 4 admonitionadmonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 admonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: markdown {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip 一个 技巧 横幅 ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:4:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#admonition"},{"categories":["documentation"],"content":" 5 mermaidmermaid 是一个可以帮助你在文章中生成图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:5:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#mermaid"},{"categories":["documentation"],"content":" 5.1 流程图一个 流程图 mermaid 示例: markdown {{\u003c mermaid \u003e}}graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:5:1","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#flowchart"},{"categories":["documentation"],"content":" 5.2 时序图一个 时序图 mermaid 示例: markdown {{\u003c mermaid \u003e}}sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:5:2","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#sequence-diagram"},{"categories":["documentation"],"content":" 5.3 甘特图一个 甘特图 mermaid 示例: markdown {{\u003c mermaid \u003e}}gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:5:3","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#gantt"},{"categories":["documentation"],"content":" 5.4 类图一个 类图 mermaid 示例: markdown {{\u003c mermaid \u003e}}classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} 呈现的输出效果如下: classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:5:4","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#class-diagram"},{"categories":["documentation"],"content":" 5.5 状态图一个 状态图 mermaid 示例: markdown {{\u003c mermaid \u003e}}stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:5:5","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#state-diagram"},{"categories":["documentation"],"content":" 5.6 Git 图一个 Git 图 mermaid 示例: markdown {{\u003c mermaid \u003e}} gitGraph commit branch hotfix checkout hotfix commit branch develop checkout develop commit id:\"ash\" tag:\"abc\" branch featureB checkout featureB commit type:HIGHLIGHT checkout main checkout hotfix commit type:NORMAL checkout develop commit type:REVERSE checkout featureB commit checkout main merge hotfix checkout featureB commit checkout develop branch featureA commit checkout develop merge hotfix checkout featureA commit checkout featureB commit checkout develop merge featureA branch release checkout release commit checkout main commit checkout release merge main checkout develop merge release {{\u003c /mermaid \u003e}} 呈现的输出效果如下: gitGraph commit branch hotfix checkout hotfix commit branch develop checkout develop commit id:\"ash\" tag:\"abc\" branch featureB checkout featureB commit type:HIGHLIGHT checkout main checkout hotfix commit type:NORMAL checkout develop commit type:REVERSE checkout featureB commit checkout main merge hotfix checkout featureB commit checkout develop branch featureA commit checkout develop merge hotfix checkout featureA commit checkout featureB commit checkout develop merge featureA branch release checkout release commit checkout main commit checkout release merge main checkout develop merge release ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:5:6","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#git-graph"},{"categories":["documentation"],"content":" 5.7 饼图一个 饼图 mermaid 示例: markdown {{\u003c mermaid \u003e}}pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:5:7","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#pie"},{"categories":["documentation"],"content":" 6 echartsECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: json {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: yaml {{\u003c echarts \u003e}} title: text: 折线统计图 top: 2% left: center tooltip: trigger: axis legend: data: - 邮件营销 - 联盟广告 - 视频广告 - 直接访问 - 搜索引擎 top: 10% grid: left: 5% right: 5% bottom: 5% top: 20% containLabel: true toolbox: feature: saveAsImage: title: 保存为图片 xAxis: type: category boundaryGap: false data: - 周一 - 周二 - 周三 - 周四 - 周五 - 周六 - 周日 yAxis: type: value series: - name: 邮件营销 type: line stack: 总量 data: - 120 - 132 - 101 - 134 - 90 - 230 - 210 - name: 联盟广告 type: line stack: 总量 data: - 220 - 182 - 191 - 234 - 290 - 330 - 310 - name: 视频广告 type: line stack: 总量 data: - 150 - 232 - 201 - 154 - 190 - 330 - 410 - name: 直接访问 type: line stack: 总量 data: - 320 - 332 - 301 - 334 - 390 - 330 - 320 - name: 搜索引擎 type: line stack: 总量 data: - 820 - 932 - 901 - 934 - 1290 - 1330 - 1320 {{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: toml {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:6:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#echarts"},{"categories":["documentation"],"content":" 7 mapbox Mapbox GL JS 是一个 JavaScript 库, 它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. navigation [可选] 是否添加 NavigationControl, 默认值是前置参数或者网站配置中设置的值. geolocate [可选] 是否添加 GeolocateControl, 默认值是前置参数或者网站配置中设置的值. scale [可选] 是否添加 ScaleControl, 默认值是前置参数或者网站配置中设置的值. fullscreen [可选] 是否添加 FullscreenControl, 默认值是前置参数或者网站配置中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: markdown {{\u003c mapbox 121.485 31.233 12 \u003e}} 或者 {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: markdown {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:7:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#mapbox"},{"categories":["documentation"],"content":" 8 musicmusic shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:8:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#music"},{"categories":["documentation"],"content":" 8.1 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: markdown {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.webp\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:8:1","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#custom-music-url"},{"categories":["documentation"],"content":" 8.2 音乐平台 URL 的自动识别music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: markdown {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:8:2","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#automatic-identification"},{"categories":["documentation"],"content":" 8.3 自定义音乐平台, 类型和 IDmusic shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: markdown {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:8:3","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#custom-server"},{"categories":["documentation"],"content":" 8.4 其它参数music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:8:4","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#other-parameters"},{"categories":["documentation"],"content":" 9 aplayer and audio 如果你需要针对音乐播放器的更多自定义选项（如自定义歌单，迷你模式，自定义音乐类型以及更多…），你可以使用 aplayer shortcode 配合 audio shortcode 以发挥 APlayer.js 的全部功能。 aplayer shortcode 用于创建一个 APlayer 播放器实例，audio shortcode 则用于设置音乐文件的相关信息。请查看 APlayer.js 的文档 来了解所有的可配置项。 一个 aplayer 和 audio 的示例： markdown {{\u003c aplayer fixed=false mini=false autoplay=false theme=\"#b7daff\" loop=\"all\" order=\"list\" preload=\"auto\" volume=0.7 mutex=true lrcType=1 listFolded=false listMaxHeight=\"\" storageName=\"aplayer-setting\" \u003e}} {{\u003c audio name=\"Wavelength\" artist=\"oldmanyoung\" url=\"/music/Wavelength.mp3\" cover=\"/images/Wavelength.webp\" /\u003e}} {{\u003c audio name=\"Wavelength\" artist=\"oldmanyoung\" url=\"/music/Wavelength.mp3\" cover=\"/images/Wavelength.webp\" \u003e}} [00:00.00]APlayer audio1 [00:04.01]is [00:08.02]amazing {{\u003c /audio \u003e}} {{\u003c /aplayer \u003e}} 呈现的输出效果如下： 需要注意的是，这两个 shortcodes 并不能单独使用，并且必须使用命名参数来设置它们的属性。 如果你将 LRC 放置于 audio shortcode 之中，它会通过 JS 字符串方式传递给 APlayer，所以你需要将 lrcType 设置为 1。如果你通过配置 lrc 参数的方式来设置 LRC 文件的链接，那么它将会被通过 LRC 文件方式传递给 APlayer，则 lrcType 需要被设置为 3。 ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:9:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#aplayer-and-audio"},{"categories":["documentation"],"content":" 10 bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: code https://www.bilibili.com/video/BV1Sx411T7QQ 一个 bilibili 示例: markdown {{\u003c bilibili BV1Sx411T7QQ \u003e}} 或者 {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} 呈现的输出效果如下: 如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: code https://www.bilibili.com/video/BV1TJ411C7An?p=3 一个带有 p 参数的 bilibili 示例: markdown {{\u003c bilibili BV1TJ411C7An 3 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:10:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#bilibili"},{"categories":["documentation"],"content":" 10.1 高级用法bilibili shortcode 支持此博客文章中展示的所有命名参数。 以下是所有命名参数的列表： 参数名 参数位置 参数用途 使用方法 id 0 视频BVID，必须项 BV1TJ411C7An p 1 视频分P（默认为1） 输入数字 autoplay 2 是否自动播放（默认为否） 1或true：启用，0或false：关闭 danmaku 3 默认弹幕开关（默认为开启） 1或true：启用，0或false：关闭 muted 4 是否默认静音（默认为否） 1或true：启用，0或false：关闭 t 5 默认开始时间（默认为0） 直接输入数值，单位为秒 以下选项目前似乎不起作用，但仍然被加进shortcode中，以希望未来这些选项能够被正常使用： 参数名 参数位置 参数用途 使用方法 hasMuteButton 6 一键静音按钮是否显示（默认不显示） 1或true：启用，0或false：关闭 hideCoverInfo 7 视频封面下方是否显示播放量弹幕量等信息（默认显示） 1或true：启用，0或false：关闭 hideDanmakuButton 8 是否隐藏弹幕按钮（默认不隐藏） 1或true：启用，0或false：关闭 noFullScreenButton 9 是否隐藏全屏按钮（默认显示） 1或true：启用，0或false：关闭 fjw 10 是否启用记忆播放（默认开启） 1或true：启用，0或false：关闭 一个带有所有命名参数的bilibili示例： markdown {{\u003c bilibili BV1TJ411C7An 3 0 0 1 30 0 1 1 1 1 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 autoplay=0 danmaku=0 muted=1 t=30 hasMuteButton=0 hideCoverInfo=1 hideDanmakuButton=1 noFullScreenButton=1 fjw=1 \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:10:1","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#高级用法"},{"categories":["documentation"],"content":" 11 typeittypeit shortcode 基于 TypeIt 提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:11:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#typeit"},{"categories":["documentation"],"content":" 11.1 简单内容允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: markdown {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: 另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: markdown {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:11:1","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#simple-content"},{"categories":["documentation"],"content":" 11.1 简单内容允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: markdown {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: 另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: markdown {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:11:1","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#id-43"},{"categories":["documentation"],"content":" 11.2 代码内容代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: markdown {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:11:2","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#code-content"},{"categories":["documentation"],"content":" 11.3 分组内容默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: markdown {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:11:3","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#code-content"},{"categories":["documentation"],"content":" 12 script script shortcode 用来在你的文章中插入 Javascript 脚本. 注意 脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库. 一个 script 示例: markdown {{\u003c script \u003e}} console.log('Just DoIt!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:12:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#script"},{"categories":["documentation"],"content":" 13 friend friend shortcode 用来在你的页面上插入友链. friend shortcode 有以下命名参数: name [必需] (第一个位置参数) 友站的名称. url [必需] (第二个位置参数) 友站的链接. avatar [必需] (第三个位置参数) 友站的头像. bio [必需] (第四个位置参数) 友站的简介. 一个 friend 示例: markdown {{\u003c friend \"PCloud\" \"https://github.com/HEIGE-PCloud/\" \"https://avatars.githubusercontent.com/u/52968553?v=4\" \"This is PCloud~💤\" \u003e}} 或者 {{\u003c friend name=\"PCloud\" url=\"https://github.com/HEIGE-PCloud/\" avatar=\"https://avatars.githubusercontent.com/u/52968553?v=4\" bio=\"This is PCloud~💤\" \u003e}} 呈现的输出效果如下: PCloud This is PCloud~💤 ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:13:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#friend"},{"categories":["documentation"],"content":" 14 showcase showcase 用于在页面上插入一个个人项目的展示柜. showcase shortcode 有以下命名参数: title [required] (第一个位置参数) 项目名称. summary [required] (第二个位置参数) 项目简介. image [required] (第三个位置参数) 预览图的链接. link [required] (第四个位置参数) 项目主页的链接. column [optional] (fifth positional parameter) 这个参数定义一行显示几个 showcase. 默认的值是 2, 默认一行显示两个 showcase. 你可以将它改为 1, 2 或 3. 需要注意的是, 当用户使用小屏幕访问网站时, 每行显示的 showcase 数量将会被自动调整以保证最好的体验. 一个 showcase 示例: markdown {{\u003c showcase title=\"Theme Documentation - Basics\" summary=\"Discover what the Hugo - DoIt theme is all about and the core-concepts behind it.\" image=\"/theme-documentation-basics/featured-image.webp\" link=\"/theme-documentation-basics\" \u003e}} Or {{\u003c showcase \"Theme Documentation - Basics\" \"Discover what the Hugo - DoIt theme is all about and the core-concepts behind it.\" \"/theme-documentation-basics/featured-image.webp\" \"/theme-documentation-basics\" \u003e}} 呈现的输出效果如下: 主题文档 - 基本概念 探索 Hugo - DoIt 主题的全部内容和背后的核心概念. 阅读全文 ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:14:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#showcase"},{"categories":["documentation"],"content":" 15 tabs 和 tabtabs 和 tab 是两个 shortcodes, 当一起使用时, 可以为你的内容创建一个选项卡组件。 一个 tabs 和 tab 示例: markdown {{\u003c tabs \u003e}} {{% tab title=\"选项卡 1\" %}} ### 标题 1 你好👋 #### 标题 2 ```py print(\"Hello world!\") ``` {{% /tab %}} {{% tab title=\"选项卡 2\" %}} 另一个选项卡 {{% /tab %}} {{\u003c /tabs \u003e}} 呈现的输出效果如下： 选项卡 1 选项卡 2 ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:15:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#tabs-和-tab"},{"categories":["documentation"],"content":" 17.1 标题 1你好👋 17.1.1 标题 2 py print(\"Hello world!\") 另一个选项卡 由于 Hugo shortcode 系统的限制，嵌套的选项卡可能无法正常工作。 ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:15:1","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#标题-1"},{"categories":["documentation"],"content":" 17.1 标题 1你好👋 17.1.1 标题 2 py print(\"Hello world!\") 另一个选项卡 由于 Hugo shortcode 系统的限制，嵌套的选项卡可能无法正常工作。 ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:15:1","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#标题-2"},{"categories":["documentation"],"content":" 16 fa-iconfa-icon shortcode 用于插入 Font Awesome 5 图标。 一个 fa-icon 示例: markdown {{\u003c fa-icon regular smile \u003e}} 呈现的输出效果如下: ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:16:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#fa-icon"},{"categories":["documentation"],"content":" 17 personperson shortcode 用来在你的文章中以 h-card 的格式插入个人网站链接。 person shortcode 有以下命名参数： url [必需] (第一个位置参数) 个人网站的链接。 name [必需] (第二个位置参数) 个人的名字。 text [可选] (第三个位置参数) 个人的简介。 picture [可选] (第四个位置参数) 个人的头像。 nick [可选] 个人的昵称。 一个 person 示例: markdown {{\u003c person url=\"https://evgenykuznetsov.org\" name=\"Evgeny Kuznetsov\" nick=\"nekr0z\" text=\"author of this shortcode\" picture=\"https://evgenykuznetsov.org/img/avatar.jpg\" \u003e}} 呈现的输出效果为   Evgeny Kuznetsov (nekr0z). 一个使用通用图标的 person 示例: markdown {{\u003c person \"https://dillonzq.com/\" Dillon \"author of the LoveIt theme\" \u003e}} 呈现的输出效果为  Dillon. ","date":"2020-03-06","objectID":"/theme-documentation-extended-shortcodes/:17:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/#person"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁.","date":"2020-03-05","objectID":"/theme-documentation-built-in-shortcodes/","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. ","date":"2020-03-05","objectID":"/theme-documentation-built-in-shortcodes/:0:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/#"},{"categories":["documentation"],"content":" 1 figurefigure 的文档 一个 figure 示例: markdown {{\u003c figure src=\"/images/lighthouse.webp\" title=\"Lighthouse (figure)\" \u003e}} 呈现的输出效果如下: Lighthouse (figure) 输出的 HTML 看起来像这样: html \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.webp\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"2020-03-05","objectID":"/theme-documentation-built-in-shortcodes/:1:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/#figure"},{"categories":["documentation"],"content":" 2 gistgist 的文档 一个 gist 示例: markdown {{\u003c gist spf13 7896402 \u003e}} 呈现的输出效果如下: 输出的 HTML 看起来像这样: html \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\"\u003e\u003c/script\u003e ","date":"2020-03-05","objectID":"/theme-documentation-built-in-shortcodes/:2:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/#gist"},{"categories":["documentation"],"content":" 3 paramparam 的文档 一个 param 示例: markdown {{\u003c param description \u003e}} 呈现的输出效果如下: Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. ","date":"2020-03-05","objectID":"/theme-documentation-built-in-shortcodes/:3:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/#param"},{"categories":["documentation"],"content":" 4 ref 和 relrefref 和 relref 的文档 ","date":"2020-03-05","objectID":"/theme-documentation-built-in-shortcodes/:4:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/#ref-and-relref"},{"categories":["documentation"],"content":" 5 tweettweet 的文档 一个 tweet 示例: markdown {{\u003c tweet user=\"SanDiegoZoo\" id=\"1453110110599868418\" \u003e}} Owl bet you'll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC — San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 ","date":"2020-03-05","objectID":"/theme-documentation-built-in-shortcodes/:5:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/#tweet"},{"categories":["documentation"],"content":" 6 vimeovimeo 的文档 一个 vimeo 示例: markdown {{\u003c vimeo 146022717 \u003e}} 呈现的输出效果如下: ","date":"2020-03-05","objectID":"/theme-documentation-built-in-shortcodes/:6:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/#vimeo"},{"categories":["documentation"],"content":" 7 youtubeyoutube 的文档 一个 youtube 示例: markdown {{\u003c youtube w7Ft2ymGmfc \u003e}} 呈现的输出效果如下: ","date":"2020-03-05","objectID":"/theme-documentation-built-in-shortcodes/:7:0","series":["getting-start"],"tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/#youtube"},{"categories":["documentation"],"content":"了解如何在 DoIt 主题中快速, 直观地创建和组织内容.","date":"2020-03-04","objectID":"/theme-documentation-content/","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"了解如何在 DoIt 主题中快速, 直观地创建和组织内容. ","date":"2020-03-04","objectID":"/theme-documentation-content/:0:0","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#"},{"categories":["documentation"],"content":" 1 内容组织以下是一些方便你清晰管理和生成文章的目录结构建议: 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 本地资源组织 本地资源引用 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接, 图片, image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理会在未来的版本中得到支持. 非常酷的功能! ","date":"2020-03-04","objectID":"/theme-documentation-content/:1:0","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#contents-organization"},{"categories":["documentation"],"content":" 2 作者配置我们鼓励你在 mysite/data/authors 下创建你的作者个人资料 author_name.toml. 在你的资料中, 你可以添加个人链接, 邮箱, 以及支持 i18n 的姓名. 以下是 Alice.toml 的示例: toml link = \"https://alice.example.com\" email = \"alice@example.com\" name = \"Alice\" [zh-cn] name = \"爱丽丝\" 在创建作者个人资料后, 您可以在文章的前置参数中指定您的姓名. 之后, 该文章将自动著上你的名字, 并可以根据作者进行分类. yaml --- authors: [Alice] --- 您也可以为一篇文章注明多个作者. yaml --- authors: [Alice, Bob, Catherine] --- ","date":"2020-03-04","objectID":"/theme-documentation-content/:2:0","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#author-setup"},{"categories":["documentation"],"content":" 3 前置参数Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的前置参数. 注意 不是所有的以下前置参数都必须在你的每篇文章中设置. 只有在文章的参数和你的 网站设置 中的 page 部分不一致时才有必要这么做. 这是一个前置参数例子: yaml --- title: \"我的第一篇文章\" subtitle: \"\" date: 2020-03-04T15:58:26+08:00 lastmod: 2020-03-04T15:58:26+08:00 draft: true authors: [] description: \"\" license: \"\" images: [] tags: [] categories: [] series: [] series_weight: 1 seriesNavigation: true featuredImage: \"\" featuredImagePreview: \"\" hiddenFromHomePage: false hiddenFromSearch: false twemoji: false lightgallery: true ruby: true fraction: true linkToMarkdown: true linkToSource: false linkToEdit: false linkToReport: false rssFullText: false license: '' toc: enable: true auto: true code: copy: true # ... table: sort: true # ... math: enable: true # ... mapbox: accessToken: \"\" # ... share: enable: true # ... comment: enable: true # ... library: css: # someCSS = \"some.css\" # 位于 \"assets/\" # 或者 # someCSS = \"https://cdn.example.com/some.css\" js: # someJS = \"some.js\" # 位于 \"assets/\" # 或者 # someJS = \"https://cdn.example.com/some.js\" seo: images: [] # ... outdatedArticleReminder: enable: false # ... sponsor: enable: false # ... related: enable: false count: 5 --- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. authors: 文章作者. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. series: 文章所属的系列. series_weight: 自定义文章在系列中的位置. seriesNavigation: 是否使用系列导航. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. linkToSource: 如果设为 false, 则关闭页脚 view source 的链接. 你可以将其设置为一个指向文章原始文件的链接. 使用魔法变量 {path} 来获取文章的相对路径, 这篇文章的 {path} 是 posts/theme-documentation-content/index.en.md. linkToEdit: 如果设为 false, 则关闭页脚 编辑此页 的链接. 你可以将其设置为一个用于编辑这个页面的链接. 使用魔法变量 {path} 来获取这篇文章的相对路径, 这篇文章的 {path} 是 posts/theme-documentation-content/index.zh-cn.md. linkToReport: 如果设为 false, 则关闭页脚 报告问题 的链接. 你可以将其设置为一个用于报告此页面中错误的链接. 使用魔法变量 {path} 来获取文章的相对路径, 这篇文章的 {path} 是 posts/theme-documentation-content/index.en.md, 使用 {title} 来获取文章的标题, 这篇文章的 {title} 为 Theme Documentation - Content, 使用 {url} 来获取文章的链接, 这篇文章的 {url} 为 https://hugodoit.pages.dev/theme-documentation-content/. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. enableLastMod: 如果设为 true，在文章的顶部将会显示上次修改内容的日期时间. enableWordCount: 如果设为 true, 在文章的顶部将会显示文章的字数. enableReadingTime: 如果设为 true, 在文章的顶部将会显示文章的阅读时间. license: 许可协议信息 (支持 HTML 格式). toc: 和 网站配置 中的 params.page.toc 部分相同. code: 和 网站配置 中的 params.page.code 部分相同. table: 和 网站配置 中的 params.page.table 部分相同. math: 和 网站配置 中的 params.page.math 部分相同. mapbox: 和 网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和 网站配置 中的 params.page.comment 部分相同. library: 和 网站配置 中的 params.page.library 部分相同. seo: 和 网站配置 中的 params.page.seo 部分相同. outdatedArticleReminder: 和 网站配置 中的 params.page.outdatedArticleReminder 部分相同. sponsor: 和 网站配置 中的 params.sponsor 部分相同. related: 和 网站配置 中的 params.page.related 部分相同. 技巧 featuredImage 和 featuredImagePreview 支持本地资源引用的完整用法. 如果带有在前置参数中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源, 没有必要在设置 featuredImage 或 featuredImagePreview: yaml resources: - name: featured-image src: featured-image.jpg - name: featured-image-preview src: featured-image-preview.jpg ","date":"2020-03-04","objectID":"/theme-documentation-content/:3:0","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#front-matter"},{"categories":["documentation"],"content":" 4 内容摘要DoIt 主题使用内容摘要在主页中显示大致文章信息. Hugo 支持生成文章的摘要. 文章摘要预览 ","date":"2020-03-04","objectID":"/theme-documentation-content/:4:0","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#内容摘要"},{"categories":["documentation"],"content":" 4.1 自动摘要拆分默认情况下, Hugo 自动将内容的前 70 个单词作为摘要. 你可以通过在 网站配置 中设置 summaryLength 来自定义摘要长度. 如果您要使用 CJK中文/日语/韩语 语言创建内容, 并且想使用 Hugo 的自动摘要拆分功能, 请在 网站配置 中将 hasCJKLanguage 设置为 true. ","date":"2020-03-04","objectID":"/theme-documentation-content/:4:1","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#自动摘要拆分"},{"categories":["documentation"],"content":" 4.2 手动摘要拆分另外, 你也可以添加 \u003c!--more--\u003e 摘要分割符来拆分文章生成摘要. 摘要分隔符之前的内容将用作该文章的摘要. 注意 请小心输入\u003c!--more--\u003e ; 即全部为小写且没有空格. ","date":"2020-03-04","objectID":"/theme-documentation-content/:4:2","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#手动摘要拆分"},{"categories":["documentation"],"content":" 4.3 前置参数摘要你可能希望摘要不是文章开头的文字. 在这种情况下, 你可以在文章前置参数的 summary 变量中设置单独的摘要. ","date":"2020-03-04","objectID":"/theme-documentation-content/:4:3","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#前置参数摘要"},{"categories":["documentation"],"content":" 4.4 使用文章描述作为摘要你可能希望将文章前置参数中的 description 变量的内容作为摘要. 你仍然需要在文章开头添加 \u003c!--more--\u003e 摘要分割符. 将摘要分隔符之前的内容保留为空. 然后 DoIt 主题会将你的文章描述作为摘要. ","date":"2020-03-04","objectID":"/theme-documentation-content/:4:4","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#使用文章描述作为摘要"},{"categories":["documentation"],"content":" 4.5 摘要选择的优先级顺序由于可以通过多种方式指定摘要, 因此了解顺序很有用. 如下: 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 但分隔符之前没有内容, 则使用描述作为摘要. 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 则将按照手动摘要拆分的方法获得摘要. 如果文章前置参数中有摘要变量, 那么将以该值作为摘要. 按照自动摘要拆分方法. 注意 不建议在摘要内容中包含富文本块元素, 这会导致渲染错误. 例如代码块, 图片, 表格等. ","date":"2020-03-04","objectID":"/theme-documentation-content/:4:5","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#摘要选择的优先级顺序"},{"categories":["documentation"],"content":" 5 Markdown 基本语法这部分内容在 Markdown 基本语法页面 中介绍. ","date":"2020-03-04","objectID":"/theme-documentation-content/:5:0","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#markdown-基本语法"},{"categories":["documentation"],"content":" 6 Markdown 扩展语法DoIt 主题提供了一些扩展的语法便于你撰写文章. ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:0","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#extended-markdown-syntax"},{"categories":["documentation"],"content":" 6.1 Emoji 支持这部分内容在 Emoji 支持页面 中介绍. ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:1","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#emoji-支持"},{"categories":["documentation"],"content":" 6.2 数学公式DoIt 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中添加如下设置来启用数学公式支持： hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true 技巧 这是一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 列表。 6.2.1 公式块默认的公式块分割符是 \\[ \\]： markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 呈现的输出效果如下： [ c = \\pm\\sqrt{a^2 + b^2} ] [ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ] 6.2.2 行内公式默认的行内公式分割符是 \\( \\)： markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 呈现的输出效果如下: ( c = \\pm\\sqrt{a^2 + b^2} ) and ( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ) 6.2.3 Copy-texCopy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. 6.2.4 mhchemmhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] 呈现的输出效果如下: [ \\ce{CO2 + C -\u003e 2 CO} ] [ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} ] ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#数学公式"},{"categories":["documentation"],"content":" 6.2 数学公式DoIt 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中添加如下设置来启用数学公式支持： hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true 技巧 这是一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 列表。 6.2.1 公式块默认的公式块分割符是 \\[ \\]： markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 呈现的输出效果如下： [ c = \\pm\\sqrt{a^2 + b^2} ] [ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ] 6.2.2 行内公式默认的行内公式分割符是 \\( \\)： markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 呈现的输出效果如下: ( c = \\pm\\sqrt{a^2 + b^2} ) and ( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ) 6.2.3 Copy-texCopy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. 6.2.4 mhchemmhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] 呈现的输出效果如下: [ \\ce{CO2 + C -\u003e 2 CO} ] [ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} ] ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#公式块"},{"categories":["documentation"],"content":" 6.2 数学公式DoIt 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中添加如下设置来启用数学公式支持： hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true 技巧 这是一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 列表。 6.2.1 公式块默认的公式块分割符是 \\[ \\]： markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 呈现的输出效果如下： [ c = \\pm\\sqrt{a^2 + b^2} ] [ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ] 6.2.2 行内公式默认的行内公式分割符是 \\( \\)： markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 呈现的输出效果如下: ( c = \\pm\\sqrt{a^2 + b^2} ) and ( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ) 6.2.3 Copy-texCopy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. 6.2.4 mhchemmhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] 呈现的输出效果如下: [ \\ce{CO2 + C -\u003e 2 CO} ] [ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} ] ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#行内公式"},{"categories":["documentation"],"content":" 6.2 数学公式DoIt 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中添加如下设置来启用数学公式支持： hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true 技巧 这是一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 列表。 6.2.1 公式块默认的公式块分割符是 \\[ \\]： markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 呈现的输出效果如下： [ c = \\pm\\sqrt{a^2 + b^2} ] [ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ] 6.2.2 行内公式默认的行内公式分割符是 \\( \\)： markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 呈现的输出效果如下: ( c = \\pm\\sqrt{a^2 + b^2} ) and ( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ) 6.2.3 Copy-texCopy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. 6.2.4 mhchemmhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] 呈现的输出效果如下: [ \\ce{CO2 + C -\u003e 2 CO} ] [ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} ] ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#copy-tex"},{"categories":["documentation"],"content":" 6.2 数学公式DoIt 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中添加如下设置来启用数学公式支持： hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true 技巧 这是一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 列表。 6.2.1 公式块默认的公式块分割符是 \\[ \\]： markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 呈现的输出效果如下： [ c = \\pm\\sqrt{a^2 + b^2} ] [ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ] 6.2.2 行内公式默认的行内公式分割符是 \\( \\)： markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 呈现的输出效果如下: ( c = \\pm\\sqrt{a^2 + b^2} ) and ( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi ) 6.2.3 Copy-texCopy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. 6.2.4 mhchemmhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] 呈现的输出效果如下: [ \\ce{CO2 + C -\u003e 2 CO} ] [ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} ] ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#mhchem"},{"categories":["documentation"],"content":" 6.3 字符注音或者注释DoIt 主题支持一种 字符注音或者注释 Markdown 扩展语法: markdown [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:3","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#ruby"},{"categories":["documentation"],"content":" 6.4 分数 DoIt 主题支持一种 分数 Markdown 扩展语法: markdown [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:4","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#fraction"},{"categories":["documentation"],"content":" 6.5 BlockquotesDoIt 支持 GitHub 风格的引用块： markdown \u003e [!NOTE] \u003e Useful information that users should know, even when skimming content. \u003e [!TIP] \u003e Helpful advice for doing things better or more easily. \u003e [!IMPORTANT] \u003e Key information users need to know to achieve their goal. \u003e [!WARNING] \u003e Urgent info that needs immediate user attention to avoid problems. \u003e [!CAUTION] \u003e Advises about risks or negative outcomes of certain actions. 呈现的输出效果如下： Note Useful information that users should know, even when skimming content. Tip Helpful advice for doing things better or more easily. Important Key information users need to know to achieve their goal. Warning Urgent info that needs immediate user attention to avoid problems. Caution Advises about risks or negative outcomes of certain actions. ","date":"2020-03-04","objectID":"/theme-documentation-content/:6:5","series":["getting-start"],"tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/#blockquotes"},{"categories":["documentation"],"content":"探索 Hugo - DoIt 主题的全部内容和背后的核心概念.","date":"2020-03-03","objectID":"/theme-documentation-basics/","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"探索 Hugo - DoIt 主题的全部内容和背后的核心概念. ","date":"2020-03-03","objectID":"/theme-documentation-basics/:0:0","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#"},{"categories":["documentation"],"content":" 1 准备由于 Hugo 提供的便利性, Hugo 本身是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本 Hugo (\u003e 0.122.0). 为什么不支持早期版本的 Hugo? 由于 WebP 图像处理 在 Hugo 0.122.0版本 中被引入, 本主题只支持高于 0.122.0 的 Hugo 版本. 推荐使用 Hugo extended 版本 由于这个主题的一些特性需要将 SCSS 转换为 CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验. ","date":"2020-03-03","objectID":"/theme-documentation-basics/:1:0","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#准备"},{"categories":["documentation"],"content":" 2 安装以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"2020-03-03","objectID":"/theme-documentation-basics/:2:0","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#安装"},{"categories":["documentation"],"content":" 2.1 创建你的项目Hugo 提供了一个 new 命令来创建一个新的网站: bash hugo new site my_website cd my_website ","date":"2020-03-03","objectID":"/theme-documentation-basics/:2:1","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#创建你的项目"},{"categories":["documentation"],"content":" 2.2 安装主题DoIt 主题的仓库是: https://github.com/HEIGE-PCloud/DoIt. 你可以下载主题的 最新版本 .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: bash git clone https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: bash git init git submodule add https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt ","date":"2020-03-03","objectID":"/theme-documentation-basics/:2:2","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#安装主题"},{"categories":["documentation"],"content":" 2.3 基础配置以下是 DoIt 主题的基本配置: toml baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"DoIt\" [params] # DoIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意 在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题. ","date":"2020-03-03","objectID":"/theme-documentation-basics/:2:3","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#basic-configuration"},{"categories":["documentation"],"content":" 2.4 创建你的第一篇文章以下是创建第一篇文章的方法: bash hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意 默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数. ","date":"2020-03-03","objectID":"/theme-documentation-basics/:2:4","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#创建你的第一篇文章"},{"categories":["documentation"],"content":" 2.5 在本地启动网站使用以下命令启动网站: bash hugo serve 去查看 http://localhost:1313. 基本配置下的预览 技巧 当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新. 注意 由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. bash hugo serve --disableFastRender ","date":"2020-03-03","objectID":"/theme-documentation-basics/:2:5","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#在本地启动网站"},{"categories":["documentation"],"content":" 2.6 构建网站当你准备好部署你的网站时, 运行以下命令: bash hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧 网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多… ","date":"2020-03-03","objectID":"/theme-documentation-basics/:2:6","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#构建网站"},{"categories":["documentation"],"content":" 3 配置","date":"2020-03-03","objectID":"/theme-documentation-basics/:3:0","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#配置"},{"categories":["documentation"],"content":" 3.1 网站配置除了 Hugo 全局配置 和 菜单配置 之外, DoIt 主题还允许您在网站配置中定义以下参数 (这是一个示例 config.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : toml [params] # DoIt 主题版本 version = \"0.3.X\" # 网站名称 title = \"我的全新 Hugo 网站\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"black\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径, 仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 开启 PWA 支持 enablePWA = false # [试验性功能] 缓存markdown中的图片链接到本地，详情请见：https://github.com/HEIGE-PCloud/DoIt/pull/860#issue-1574342372 cacheRemoteImages = true # [试验性功能] 使用 hugo 自带的图片处理功能生成 srcset 属性 optimizeImages = true # [实验性功能] optimizeImages 中 srcset 属性的缩放方法, 详情请见：https://gohugo.io/content-management/image-processing/#image-processing-options srcsetSmallResizeMethod = \"700x webp Lanczos q75\" srcsetDefaultResizeMethod = \"1200x webp Lanczos q75\" srcsetLargeResizeMethod = \"2000x webp Lanczos q75\" # 版权信息 license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # 作者配置 [params.author] name = \"xxxx\" email = \"\" link = \"\" avatar = \"\" gravatarEmail = \"\" # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"DoIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"algolia\", \"fuse\") type = \"fuse\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" [params.search.fuse] # https://fusejs.io/api/options.html isCaseSensitive = false minMatchCharLength = 2 findAllMatches = false location = 0 threshold = 0.3 distance = 100 ignoreLocation = false useExtendedSearch = false ignoreFieldNorm = false [params.image] # 缓存图片链接到本地 cacheRemote = true # 图片缩放和优化 optimise = true # 页面头部导航栏配置 [params.header] # 主题切换模式 # 主题切换模式 (\"switch\", \"select\") themeChangeMode = \"select\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 托管服务信息 (支持 HTML 格式) # \u003ca title=\"Github Pages\" href=\"https://docs.github.com/en/pages/\" target=\"_blank\" rel=\"noopener noreffer\"\u003eGitHub Pages\u003c/a\u003e hostedOn = '' # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息, 仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 最近更新文章设置 [params.section.recentlyUpdated] enable = false rss = false days = 30 maxCount = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱, 用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL # 将你的头像文件放置于 static 或者 assets 目录下 # 文件路径是相对于 static 或者 assets 目录的 avatarURL = \"/images/avatar.webp\" # 头像的链接指向的 URL avatarLinkURL = \"\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFrom","date":"2020-03-03","objectID":"/theme-documentation-basics/:3:1","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#site-configuration"},{"categories":["documentation"],"content":" 3.2 网站图标, 浏览器配置, 网站清单强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2020-03-03","objectID":"/theme-documentation-basics/:3:2","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#网站图标-浏览器配置-网站清单"},{"categories":["documentation"],"content":" 3.3 自定义样式 注意 Hugo extended 版本对于自定义样式是必需的. 通过定义自定义 .scss 样式文件, DoIt 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/DoIt/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: scss @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"2020-03-03","objectID":"/theme-documentation-basics/:3:3","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#自定义样式"},{"categories":["documentation"],"content":" 4 多语言和 i18nDoIt 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. 语言切换 ","date":"2020-03-03","objectID":"/theme-documentation-basics/:4:0","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#多语言和-i18n"},{"categories":["documentation"],"content":" 4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 英语 en en 简体中文 zh-cn zh-CN 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi Arabic ar ar Catalan ca ca Hindi hi hi Indonesian id id Telugu te te Thai th th Turkish tr tr Ukrainian uk uk Traditional Chinese zh-tw zh-tw ","date":"2020-03-03","objectID":"/theme-documentation-basics/:4:1","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#language-compatibility"},{"categories":["documentation"],"content":" 4.2 基本配置学习了 Hugo如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: toml # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为两个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 注意 请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容. 技巧 也可以使用 文章前置参数 来翻译网址. ","date":"2020-03-03","objectID":"/theme-documentation-basics/:4:2","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#基本配置"},{"categories":["documentation"],"content":" 4.3 修改默认的翻译字符串翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件, 并从 themes/DoIt/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过 创建一个 PR 来贡献主题翻译, 谢谢! ","date":"2020-03-03","objectID":"/theme-documentation-basics/:4:3","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#修改默认的翻译字符串"},{"categories":["documentation"],"content":" 5 搜索 基于 Lunr.js 或 algolia, DoIt 主题支持搜索功能. ","date":"2020-03-03","objectID":"/theme-documentation-basics/:5:0","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#搜索"},{"categories":["documentation"],"content":" 5.1 输出配置为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. toml [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-03","objectID":"/theme-documentation-basics/:5:1","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#输出配置"},{"categories":["documentation"],"content":" 5.2 搜索配置基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: toml [params.search] enable = true # 搜索引擎的类型 (\"algolia\", \"fuse\") type = \"fuse\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" [params.search.fuse] # https://fusejs.io/api/options.html isCaseSensitive = false minMatchCharLength = 2 findAllMatches = false location = 0 threshold = 0.3 distance = 100 ignoreLocation = false useExtendedSearch = false ignoreFieldNorm = false 怎样选择搜索引擎? 以下是两种搜索引擎的对比: fuse: 简单, 无需同步 index.json, 没有 contentLength 的限制, 性能高 algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. 关于 algolia 的使用技巧 你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. Algolia Atomic 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json…","date":"2020-03-03","objectID":"/theme-documentation-basics/:5:2","series":["getting-start"],"tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/#搜索配置"},{"categories":["documentation"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["documentation"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 DoIt 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧 将此页保存为书签, 以备将来参考! ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#"},{"categories":["documentation"],"content":" 1 标题从 h2 到 h6 的标题在每个级别上都加上一个 ＃: markdown ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: html \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: markdown ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: html \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#标题"},{"categories":["documentation"],"content":" 2 注释注释是和 HTML 兼容的： html \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#注释"},{"categories":["documentation"],"content":" 3 水平线HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#水平线"},{"categories":["documentation"],"content":" 4 段落按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: markdown Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: html \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#段落"},{"categories":["documentation"],"content":" 5 内联 HTML 元素如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: html Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#内联-html-元素"},{"categories":["documentation"],"content":" 6 强调","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#强调"},{"categories":["documentation"],"content":" 6.1 加粗用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. markdown **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: html \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#加粗"},{"categories":["documentation"],"content":" 6.2 斜体用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. markdown *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: html \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#斜体"},{"categories":["documentation"],"content":" 6.3 删除线按照 GFMGitHub flavored Markdown 你可以使用删除线. markdown ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: html \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#删除线"},{"categories":["documentation"],"content":" 6.4 组合加粗, 斜体, 和删除线可以 组合使用. markdown ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: html \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#组合"},{"categories":["documentation"],"content":" 7 引用用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: markdown \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: html \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: markdown \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#引用"},{"categories":["documentation"],"content":" 8 列表","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#列表"},{"categories":["documentation"],"content":" 8.1 无序列表一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: markdown * 一项内容 - 一项内容 + 一项内容 例如: markdown * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: html \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#无序列表"},{"categories":["documentation"],"content":" 8.2 有序列表一系列项的列表, 其中项的顺序确实很重要. markdown 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: html \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: markdown 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#有序列表"},{"categories":["documentation"],"content":" 8.3 任务列表任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框, 请在方括号之间添加 x ([x]). markdown - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#任务列表"},{"categories":["documentation"],"content":" 9 代码","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#代码"},{"categories":["documentation"],"content":" 9.1 行内代码用 ` 包装行内代码段. markdown 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: html \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#行内代码"},{"categories":["documentation"],"content":" 9.2 缩进代码将几行代码缩进至少四个空格, 例如: markdown // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: html \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#缩进代码"},{"categories":["documentation"],"content":" 9.3 围栏代码块使用 “围栏” ``` 来生成一段带有语言属性的代码块. markdown ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: html \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#围栏代码块"},{"categories":["documentation"],"content":" 9.4 语法高亮GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它, 只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: markdown ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 您可以通过以下选项来自定义你的代码块： 选项 描述 类型 open 是否展开代码块。默认值由 maxShownLines 决定。 bool lineNos 是否显示行数。 int wrap 长度溢出时是否换行。 bool title 自定义代码块的标题。 string header 是否显示标题与控制按钮。 bool 以下是一个例子： markdown ```go {open=true, lineNos=false, wrap=true, header=false, title=\"main.go\"} package main import \"fmt\" // calculateSquares calculates the sum of the squares of the digits of the given number // and sends the result to the squareop channel. func calculateSquares(number int, squareop chan int) { sum := 0 for number != 0 { digit := number % 10 sum += digit * digit number /= 10 } squareop \u003c- sum } // calculateCubes calculates the sum of the cubes of the digits of the given number // and sends the result to the cubeop channel. func calculateCubes(number int, cubeop chan int) { sum := 0 for number != 0 { digit := number % 10 sum += digit * digit * digit number /= 10 } cubeop \u003c- sum } func main() { number := 589 sqrch := make(chan int) cubech := make(chan int) // Start two goroutines to calculate the sum of squares and cubes of the digits. go calculateSquares(number, sqrch) go calculateCubes(number, cubech) // Receive the results from the channels and add them. squares, cubes := \u003c-sqrch, \u003c-cubech fmt.Println(\"Final result\", squares+cubes) } ``` 输出的效果如下： main.go package main import \"fmt\" // calculateSquares calculates the sum of the squares of the digits of the given number // and sends the result to the squareop channel. func calculateSquares(number int, squareop chan int) { sum := 0 for number != 0 { digit := number % 10 sum += digit * digit number /= 10 } squareop \u003c- sum } // calculateCubes calculates the sum of the cubes of the digits of the given number // and sends the result to the cubeop channel. func calculateCubes(number int, cubeop chan int) { sum := 0 for number != 0 { digit := number % 10 sum += digit * digit * digit number /= 10 } cubeop \u003c- sum } func main() { number := 589 sqrch := make(chan int) cubech := make(chan int) // Start two goroutines to calculate the sum of squares and cubes of the digits. go calculateSquares(number, sqrch) go calculateCubes(number, cubech) // Receive the results from the channels and add them. squares, cubes := \u003c-sqrch, \u003c-cubech fmt.Println(\"Final result\", squares+cubes) } ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#语法高亮"},{"categories":["documentation"],"content":" 10 表格通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. markdown | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: html \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. markdown | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#表格"},{"categories":["documentation"],"content":" 11 链接","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#links"},{"categories":["documentation"],"content":" 11.1 基本链接 markdown \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上, 没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: html \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#基本链接"},{"categories":["documentation"],"content":" 11.2 添加一个标题 markdown [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage 输出的 HTML 看起来像这样: html \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#添加一个标题"},{"categories":["documentation"],"content":" 11.3 定位标记定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: markdown ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: markdown ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#定位标记"},{"categories":["documentation"],"content":" 12 脚注脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. markdown 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#脚注"},{"categories":["documentation"],"content":" 13 图片图片的语法与链接相似, 但包含一个在前面的感叹号. markdown ![Minion](https://octodex.github.com/images/minion.png) 或者: markdown ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: markdown ![Alt text][id] The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: markdown [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 DoIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/#图片"},{"categories":["documentation"],"content":"Hugo 和 DoIt 中的 Emoji 的用法指南.","date":"2019-10-01","objectID":"/emoji-support/","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["documentation"],"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾, 并且包含 emoji 的 代码: markdown 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-10-01","objectID":"/emoji-support/:0:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#"},{"categories":["documentation"],"content":" 1 表情与情感","date":"2019-10-01","objectID":"/emoji-support/:1:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#表情与情感"},{"categories":["documentation"],"content":" 1.1 笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/emoji-support/:1:1","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#笑脸表情"},{"categories":["documentation"],"content":" 1.2 爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/emoji-support/:1:2","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#爱意表情"},{"categories":["documentation"],"content":" 1.3 吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/emoji-support/:1:3","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#吐舌头表情"},{"categories":["documentation"],"content":" 1.4 带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/emoji-support/:1:4","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#带手的表情"},{"categories":["documentation"],"content":" 1.5 中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/emoji-support/:1:5","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#中性表情"},{"categories":["documentation"],"content":" 1.6 困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/emoji-support/:1:6","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#困倦的表情"},{"categories":["documentation"],"content":" 1.7 不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/emoji-support/:1:7","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#不适的表情"},{"categories":["documentation"],"content":" 1.8 戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/emoji-support/:1:8","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#戴帽子的表情"},{"categories":["documentation"],"content":" 1.9 戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/emoji-support/:1:9","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#戴眼镜的表情"},{"categories":["documentation"],"content":" 1.10 担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹️ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/emoji-support/:1:10","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#担心的表情"},{"categories":["documentation"],"content":" 1.11 否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/emoji-support/:1:11","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#否定的表情"},{"categories":["documentation"],"content":" 1.12 特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/emoji-support/:1:12","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#特殊打扮的表情"},{"categories":["documentation"],"content":" 1.13 猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/emoji-support/:1:13","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#猫脸表情"},{"categories":["documentation"],"content":" 1.14 猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/emoji-support/:1:14","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#猴脸表情"},{"categories":["documentation"],"content":" 1.15 情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/emoji-support/:1:15","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#情感"},{"categories":["documentation"],"content":" 2 人与身体","date":"2019-10-01","objectID":"/emoji-support/:2:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#人与身体"},{"categories":["documentation"],"content":" 2.1 张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/emoji-support/:2:1","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#张开手掌的手势"},{"categories":["documentation"],"content":" 2.2 部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/emoji-support/:2:2","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#部分手指的手势"},{"categories":["documentation"],"content":" 2.3 一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/emoji-support/:2:3","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#一根手指的手势"},{"categories":["documentation"],"content":" 2.4 握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/emoji-support/:2:4","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#握紧的手势"},{"categories":["documentation"],"content":" 2.5 两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/emoji-support/:2:5","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#两只手"},{"categories":["documentation"],"content":" 2.6 握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/emoji-support/:2:6","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#握住东西的手势"},{"categories":["documentation"],"content":" 2.7 身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/emoji-support/:2:7","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#身体部位"},{"categories":["documentation"],"content":" 2.8 人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:8","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#人"},{"categories":["documentation"],"content":" 2.9 身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man :person_with_pouting_face: person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁 information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋 raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇 bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/emoji-support/:2:9","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#身体动作"},{"categories":["documentation"],"content":" 2.10 人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮 cop policeman 👮‍♀️ policewoman 🕵️ detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷 construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰‍♀️ bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:10","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#人物角色"},{"categories":["documentation"],"content":" 2.11 幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/emoji-support/:2:11","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#幻想的人物"},{"categories":["documentation"],"content":" 2.12 人物活动 图标 代码 图标 代码 💆 massage massage_woman 💆‍♂️ massage_man 💇 haircut haircut_woman 💇‍♂️ haircut_man 🚶 walking walking_man 🚶‍♀️ walking_woman 🏃 runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯 dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/emoji-support/:2:12","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#人物活动"},{"categories":["documentation"],"content":" 2.13 体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄 surfer surfing_man 🏄‍♀️ surfing_woman 🚣 rowboat rowing_man 🚣‍♀️ rowing_woman 🏊 swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴 bicyclist biking_man 🚴‍♀️ biking_woman 🚵 mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/emoji-support/:2:13","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#体育"},{"categories":["documentation"],"content":" 2.14 休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/emoji-support/:2:14","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#休息"},{"categories":["documentation"],"content":" 2.15 家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 💑 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👪 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/emoji-support/:2:15","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#家庭"},{"categories":["documentation"],"content":" 2.16 人物符号 图标 代码 图标 代码 🗣️ speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/emoji-support/:2:16","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#人物符号"},{"categories":["documentation"],"content":" 3 动物与自然","date":"2019-10-01","objectID":"/emoji-support/:3:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#动物与自然"},{"categories":["documentation"],"content":" 3.1 哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/emoji-support/:3:1","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#哺乳动物"},{"categories":["documentation"],"content":" 3.2 鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊️ dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/emoji-support/:3:2","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#鸟类"},{"categories":["documentation"],"content":" 3.3 两栖动物 icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/emoji-support/:3:3","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#两栖动物"},{"categories":["documentation"],"content":" 3.4 爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/emoji-support/:3:4","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#爬虫类"},{"categories":["documentation"],"content":" 3.5 海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/emoji-support/:3:5","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#海洋动物"},{"categories":["documentation"],"content":" 3.6 虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/emoji-support/:3:6","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#虫类"},{"categories":["documentation"],"content":" 3.7 花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/emoji-support/:3:7","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#花类植物"},{"categories":["documentation"],"content":" 3.8 其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/emoji-support/:3:8","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#其它植物"},{"categories":["documentation"],"content":" 4 食物与饮料","date":"2019-10-01","objectID":"/emoji-support/:4:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#食物与饮料"},{"categories":["documentation"],"content":" 4.1 水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/emoji-support/:4:1","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#水果"},{"categories":["documentation"],"content":" 4.2 蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/emoji-support/:4:2","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#蔬菜"},{"categories":["documentation"],"content":" 4.3 快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/emoji-support/:4:3","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#快餐"},{"categories":["documentation"],"content":" 4.4 亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/emoji-support/:4:4","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#亚洲食物"},{"categories":["documentation"],"content":" 4.5 海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/emoji-support/:4:5","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#海鲜"},{"categories":["documentation"],"content":" 4.6 甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/emoji-support/:4:6","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#甜点"},{"categories":["documentation"],"content":" 4.7 饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/emoji-support/:4:7","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#饮料"},{"categories":["documentation"],"content":" 4.8 餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/emoji-support/:4:8","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#餐具"},{"categories":["documentation"],"content":" 5 旅游与地理","date":"2019-10-01","objectID":"/emoji-support/:5:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#旅游与地理"},{"categories":["documentation"],"content":" 5.1 地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/emoji-support/:5:1","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#地图"},{"categories":["documentation"],"content":" 5.2 地理现象 图标 代码 图标 代码 🏔️ mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping 🏖️ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/emoji-support/:5:2","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#地理现象"},{"categories":["documentation"],"content":" 5.3 建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘️ houses 🏚️ derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/emoji-support/:5:3","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#建筑物"},{"categories":["documentation"],"content":" 5.4 宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/emoji-support/:5:4","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#宗教建筑"},{"categories":["documentation"],"content":" 5.5 其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/emoji-support/:5:5","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#其它地点"},{"categories":["documentation"],"content":" 5.6 陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍️ motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/emoji-support/:5:6","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#陆路运输"},{"categories":["documentation"],"content":" 5.7 水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/emoji-support/:5:7","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#水路运输"},{"categories":["documentation"],"content":" 5.8 空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/emoji-support/:5:8","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#空中运输"},{"categories":["documentation"],"content":" 5.9 旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/emoji-support/:5:9","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#旅馆"},{"categories":["documentation"],"content":" 5.10 时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/emoji-support/:5:10","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#时间"},{"categories":["documentation"],"content":" 5.11 天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈️ cloud_with_lightning_and_rain 🌤️ sun_behind_small_cloud 🌥️ sun_behind_large_cloud 🌦️ sun_behind_rain_cloud 🌧️ cloud_with_rain 🌨️ cloud_with_snow 🌩️ cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬️ wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☔ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ⛄ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/emoji-support/:5:11","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#天空与天气"},{"categories":["documentation"],"content":" 6 活动","date":"2019-10-01","objectID":"/emoji-support/:6:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#活动"},{"categories":["documentation"],"content":" 6.1 事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟️ tickets 🎫 ticket ","date":"2019-10-01","objectID":"/emoji-support/:6:1","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#事件"},{"categories":["documentation"],"content":" 6.2 奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/emoji-support/:6:2","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#奖杯与奖牌"},{"categories":["documentation"],"content":" 6.3 体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/emoji-support/:6:3","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#体育运动"},{"categories":["documentation"],"content":" 6.4 游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/emoji-support/:6:4","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#游戏"},{"categories":["documentation"],"content":" 6.5 艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼️ framed_picture 🎨 art ","date":"2019-10-01","objectID":"/emoji-support/:6:5","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#艺术与工艺"},{"categories":["documentation"],"content":" 7 物品","date":"2019-10-01","objectID":"/emoji-support/:7:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#物品"},{"categories":["documentation"],"content":" 7.1 服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/emoji-support/:7:1","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#服装"},{"categories":["documentation"],"content":" 7.2 声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/emoji-support/:7:2","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#声音"},{"categories":["documentation"],"content":" 7.3 音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/emoji-support/:7:3","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#音乐"},{"categories":["documentation"],"content":" 7.4 乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/emoji-support/:7:4","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#乐器"},{"categories":["documentation"],"content":" 7.5 电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/emoji-support/:7:5","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#电话"},{"categories":["documentation"],"content":" 7.6 电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱️ computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/emoji-support/:7:6","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#电脑"},{"categories":["documentation"],"content":" 7.7 灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/emoji-support/:7:7","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#灯光与影像"},{"categories":["documentation"],"content":" 7.8 书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/emoji-support/:7:8","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#书与纸张"},{"categories":["documentation"],"content":" 7.9 钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/emoji-support/:7:9","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#钱"},{"categories":["documentation"],"content":" 7.10 邮件 图标 代码 图标 代码 📧 email envelope 📧 :e-mail: 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳️ ballot_box ","date":"2019-10-01","objectID":"/emoji-support/:7:10","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#邮件"},{"categories":["documentation"],"content":" 7.11 书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋️ fountain_pen 🖊️ pen 🖌️ paintbrush 🖍️ crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/emoji-support/:7:11","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#书写"},{"categories":["documentation"],"content":" 7.12 办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒️ spiral_notepad 🗓️ spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇️ paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/emoji-support/:7:12","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#办公"},{"categories":["documentation"],"content":" 7.13 锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/emoji-support/:7:13","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#锁"},{"categories":["documentation"],"content":" 7.14 工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡️ dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜️ clamp ⚖️ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/emoji-support/:7:14","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#工具"},{"categories":["documentation"],"content":" 7.15 科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 📡 satellite ","date":"2019-10-01","objectID":"/emoji-support/:7:15","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#科学"},{"categories":["documentation"],"content":" 7.16 医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/emoji-support/:7:16","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#医疗"},{"categories":["documentation"],"content":" 7.17 生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/emoji-support/:7:17","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#生活用品"},{"categories":["documentation"],"content":" 7.18 其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/emoji-support/:7:18","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#其它物品"},{"categories":["documentation"],"content":" 8 符号","date":"2019-10-01","objectID":"/emoji-support/:8:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#符号"},{"categories":["documentation"],"content":" 8.1 交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/emoji-support/:8:1","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#交通标识"},{"categories":["documentation"],"content":" 8.2 警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 :non-potable_water: 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢️ radioactive ☣️ biohazard ","date":"2019-10-01","objectID":"/emoji-support/:8:2","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#警告"},{"categories":["documentation"],"content":" 8.3 箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/emoji-support/:8:3","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#箭头"},{"categories":["documentation"],"content":" 8.4 宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉️ om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/emoji-support/:8:4","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#宗教"},{"categories":["documentation"],"content":" 8.5 生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/emoji-support/:8:5","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#生肖"},{"categories":["documentation"],"content":" 8.6 影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭️ next_track_button ⏯️ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸️ pause_button ⏹️ stop_button ⏺️ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/emoji-support/:8:6","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#影像符号"},{"categories":["documentation"],"content":" 8.7 数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:7","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#数学"},{"categories":["documentation"],"content":" 8.8 标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/emoji-support/:8:8","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#标点符号"},{"categories":["documentation"],"content":" 8.9 货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:9","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#货币"},{"categories":["documentation"],"content":" 8.10 按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/emoji-support/:8:10","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#按键符号"},{"categories":["documentation"],"content":" 8.11 字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id Ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/emoji-support/:8:11","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#字母符号"},{"categories":["documentation"],"content":" 8.12 几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/emoji-support/:8:12","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#几何符号"},{"categories":["documentation"],"content":" 8.13 其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/emoji-support/:8:13","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#其它符合"},{"categories":["documentation"],"content":" 9 旗帜","date":"2019-10-01","objectID":"/emoji-support/:9:0","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#旗帜"},{"categories":["documentation"],"content":" 9.1 常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳️ white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/emoji-support/:9:1","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#常用旗帜"},{"categories":["documentation"],"content":" 9.2 国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/emoji-support/:9:2","series":null,"tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/#国家和地区旗帜"}]